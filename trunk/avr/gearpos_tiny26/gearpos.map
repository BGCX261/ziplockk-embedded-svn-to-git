Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.1/libgcc.a(_udivmodhi4.o)
                              adc.o (__udivmodhi4)
/usr/lib/gcc/avr/4.5.1/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/crttn26.o (exit)
/usr/lib/gcc/avr/4.5.1/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.5.1/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

average_chan0       0x64              adc.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00002000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/crttn26.o
LOAD main.o
LOAD adc.o
LOAD /usr/lib/gcc/avr/4.5.1/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/libc.a
LOAD /usr/lib/gcc/avr/4.5.1/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000      0x254
 *(.vectors)
 .vectors       0x00000000       0x18 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/crttn26.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00000018                . = ALIGN (0x2)
                0x00000018                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000018        0x0 linker stubs
 *(.trampolines*)
                0x00000018                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000018                __ctors_start = .
 *(.ctors)
                0x00000018                __ctors_end = .
                0x00000018                __dtors_start = .
 *(.dtors)
                0x00000018                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000018        0x0 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/crttn26.o
                0x00000018                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000018        0x8 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/crttn26.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000020       0x18 /usr/lib/gcc/avr/4.5.1/libgcc.a(_copy_data.o)
                0x00000020                __do_copy_data
 .init4         0x00000038       0x10 /usr/lib/gcc/avr/4.5.1/libgcc.a(_clear_bss.o)
                0x00000038                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000048        0x4 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/crttn26.o
 *(.init9)
 *(.text)
 .text          0x0000004c        0x2 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/crttn26.o
                0x0000004c                __vector_1
                0x0000004c                __bad_interrupt
                0x0000004c                __vector_6
                0x0000004c                __vector_3
                0x0000004c                __vector_7
                0x0000004c                __vector_5
                0x0000004c                __vector_4
                0x0000004c                __vector_9
                0x0000004c                __vector_2
                0x0000004c                __vector_8
                0x0000004c                __vector_10
 .text          0x0000004e       0xdc main.o
                0x0000004e                calculateGearPosition
                0x000000b0                main
 .text          0x0000012a       0xfa adc.o
                0x0000012a                __vector_11
                0x00000212                startAdcSequence
                0x00000216                adcInit
 .text          0x00000224        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_udivmodhi4.o)
 .text          0x00000224        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_exit.o)
 .text          0x00000224        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_copy_data.o)
 .text          0x00000224        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_clear_bss.o)
                0x00000224                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x00000224       0x2c /usr/lib/gcc/avr/4.5.1/libgcc.a(_udivmodhi4.o)
                0x00000224                __udivmodhi4
 .text.libgcc   0x00000250        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_exit.o)
 .text.libgcc   0x00000250        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000250        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_clear_bss.o)
                0x00000250                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000250        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_exit.o)
                0x00000250                exit
                0x00000250                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000250        0x4 /usr/lib/gcc/avr/4.5.1/libgcc.a(_exit.o)
 *(.fini0)
                0x00000254                _etext = .

.data           0x00800060        0xc load address 0x00000254
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/crttn26.o
 .data          0x00800060        0xb main.o
                0x00800060                displayValue
 .data          0x0080006b        0x0 adc.o
 .data          0x0080006b        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_udivmodhi4.o)
 .data          0x0080006b        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_exit.o)
 .data          0x0080006b        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_copy_data.o)
 .data          0x0080006b        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0080006c                . = ALIGN (0x2)
 *fill*         0x0080006b        0x1 00
                0x0080006c                _edata = .
                0x0080006c                PROVIDE (__data_end, .)

.bss            0x0080006c       0x74
                0x0080006c                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0080006c        0x0 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/crttn26.o
 .bss           0x0080006c        0x0 main.o
 .bss           0x0080006c       0x10 adc.o
                0x0080006c                adcValues
                0x00800074                adcChan
                0x00800075                analog_result_16
                0x00800077                adcrunning
                0x00800078                average_chan0_tot
                0x0080007a                average_chan0_pos
                0x0080007b                flip
 .bss           0x0080007c        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_udivmodhi4.o)
 .bss           0x0080007c        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_exit.o)
 .bss           0x0080007c        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_copy_data.o)
 .bss           0x0080007c        0x0 /usr/lib/gcc/avr/4.5.1/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0080007c       0x64 adc.o
                0x0080007c                average_chan0
                0x008000e0                PROVIDE (__bss_end, .)
                0x00000254                __data_load_start = LOADADDR (.data)
                0x00000260                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x008000e0        0x0
                0x008000e0                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x008000e0                PROVIDE (__noinit_end, .)
                0x008000e0                _end = .
                0x008000e0                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0xe
 *(.eeprom*)
 .eeprom        0x00810000        0xe main.o
                0x00810000                test
                0x0081000e                __eeprom_end = .

.stab           0x00000000     0x10bc
 *(.stab)
 .stab          0x00000000      0x6b4 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/crttn26.o
 .stab          0x000006b4      0x690 main.o
                                0x69c (size before relaxing)
 .stab          0x00000d44      0x378 adc.o
                                0x60c (size before relaxing)

.stabstr        0x00000000      0xc46
 *(.stabstr)
 .stabstr       0x00000000      0xc46 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/crttn26.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo .zdebug_srcinfo)

.debug_sfnames
 *(.debug_sfnames .zdebug_sfnames)

.debug_aranges
 *(.debug_aranges .zdebug_aranges)

.debug_pubnames
 *(.debug_pubnames .zdebug_pubnames)

.debug_info
 *(.debug_info .gnu.linkonce.wi.* .zdebug_info)

.debug_abbrev
 *(.debug_abbrev .zdebug_abbrev)

.debug_line
 *(.debug_line .zdebug_line)

.debug_frame
 *(.debug_frame .zdebug_frame)

.debug_str
 *(.debug_str .zdebug_str)

.debug_loc
 *(.debug_loc .zdebug_loc)

.debug_macinfo
 *(.debug_macinfo .zdebug_macinfo)
OUTPUT(gearpos.elf elf32-avr)
LOAD linker stubs
