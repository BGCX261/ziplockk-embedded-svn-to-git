Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_mulsi3.o)
                              fat32.o (__mulsi3)
/usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_udivmodsi4.o)
                              fat32.o (__udivmodsi4)
/usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/crtm16.o (exit)
/usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_copy_data.o)
                              fat32.o (__do_copy_data)
/usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_clear_bss.o)
                              fat32.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

rtc_register        0x7               fat32.o
appendFileLocation  0x4               fat32.o
dateFAT             0x2               fat32.o
firstDataSector     0x4               fat32.o
fileSize            0x4               fat32.o
bytesPerSector      0x2               fat32.o
totalClusters       0x4               fat32.o
rootCluster         0x4               fat32.o
timeFAT             0x2               fat32.o
startBlock          0x4               fat32.o
buffer              0x200             fat32.o
sectorPerCluster    0x2               fat32.o
unusedSectors       0x4               fat32.o
SDHC_flag           0x1               fat32.o
totalBlocks         0x4               fat32.o
reservedSectorCount
                    0x2               fat32.o
time                0xa               rtc_routines.o
appendStartCluster  0x4               fat32.o
cardType            0x1               fat32.o
day                 0x1               rtc_routines.o
date                0xc               rtc_routines.o
freeClusterCountUpdated
                    0x1               fat32.o
appendFileSector    0x4               fat32.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00020000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/crtm16.o
LOAD fat32.o
LOAD i2c_routines.o
LOAD rtc_routines.o
LOAD sd_routines.o
LOAD spi_routines.o
LOAD uart_routines.o
LOAD main.o
LOAD /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000     0x34c8
 *(.vectors)
 .vectors       0x00000000       0x54 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/crtm16.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x00000054      0x16b fat32.o
 .progmem.data  0x000001bf      0x139 rtc_routines.o
 .progmem.data  0x000002f8      0x385 main.o
                0x0000067e                . = ALIGN (0x2)
 *fill*         0x0000067d        0x1 00
                0x0000067e                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000067e        0x0 linker stubs
 *(.trampolines*)
                0x0000067e                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000067e                __ctors_start = .
 *(.ctors)
                0x0000067e                __ctors_end = .
                0x0000067e                __dtors_start = .
 *(.dtors)
                0x0000067e                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000067e        0x0 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/crtm16.o
                0x0000067e                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000067e        0xc /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/crtm16.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000068a       0x16 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_copy_data.o)
                0x0000068a                __do_copy_data
 .init4         0x000006a0       0x10 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_clear_bss.o)
                0x000006a0                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000006b0        0x8 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/crtm16.o
 *(.init9)
 *(.text)
 .text          0x000006b8        0x4 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/crtm16.o
                0x000006b8                __vector_1
                0x000006b8                __vector_12
                0x000006b8                __bad_interrupt
                0x000006b8                __vector_6
                0x000006b8                __vector_3
                0x000006b8                __vector_11
                0x000006b8                __vector_13
                0x000006b8                __vector_17
                0x000006b8                __vector_19
                0x000006b8                __vector_7
                0x000006b8                __vector_5
                0x000006b8                __vector_4
                0x000006b8                __vector_9
                0x000006b8                __vector_2
                0x000006b8                __vector_15
                0x000006b8                __vector_8
                0x000006b8                __vector_14
                0x000006b8                __vector_10
                0x000006b8                __vector_16
                0x000006b8                __vector_18
                0x000006b8                __vector_20
 .text          0x000006bc     0x18e4 fat32.o
                0x000006bc                getFirstSector
                0x00000706                getSetNextCluster
                0x000007f8                getSetFreeCluster
                0x0000091e                getBootSectorData
                0x00000ade                convertFileName
                0x00000bda                searchNextFreeCluster
                0x00000d34                displayMemory
                0x00000e04                memoryStatistics
                0x00001052                freeMemoryUpdate
                0x00001136                findFiles
                0x00001548                deleteFile
                0x00001564                readFile
                0x00001750                writeFile
 .text          0x00001fa0       0xba i2c_routines.o
                0x00001fa0                i2c_start
                0x00001fba                i2c_repeatStart
                0x00001fd4                i2c_sendAddress
                0x00002004                i2c_sendData
                0x00002020                i2c_receiveData_ACK
                0x0000203a                i2c_receiveData_NACK
                0x00002054                i2c_stop
 .text          0x0000205a      0x7ee rtc_routines.o
                0x0000205a                RTC_setStartAddress
                0x00002086                RTC_read
                0x000020f8                RTC_getTime
                0x00002198                RTC_getDate
                0x00002234                RTC_displayTime
                0x00002260                RTC_displayDay
                0x000022d8                RTC_displayDate
                0x00002308                RTC_updateRegisters
                0x000023c8                RTC_writeTime
                0x00002416                RTC_writeDate
                0x00002464                RTC_updateTime
                0x0000258a                RTC_updateDate
                0x00002724                getDateTime_FAT
 .text          0x00002848      0x3b2 sd_routines.o
                0x00002848                SD_sendCommand
                0x00002916                SD_init
                0x00002a78                SD_erase
                0x00002ade                SD_readSingleBlock
                0x00002b4a                SD_writeSingleBlock
 .text          0x00002bfa       0x1e spi_routines.o
                0x00002bfa                spi_init
                0x00002c02                SPI_transmit
                0x00002c0c                SPI_receive
 .text          0x00002c18       0xf4 uart_routines.o
                0x00002c18                uart0_init
                0x00002c2c                receiveByte
                0x00002c36                transmitByte
                0x00002c3e                transmitHex
                0x00002cda                transmitString_F
                0x00002cf4                transmitString
 .text          0x00002d0c      0x736 main.o
                0x00002d0c                port_init
                0x00002d24                init_devices
                0x00002d4c                main
 .text          0x00003442        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_mulsi3.o)
 .text          0x00003442        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_udivmodsi4.o)
 .text          0x00003442        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_exit.o)
 .text          0x00003442        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_copy_data.o)
 .text          0x00003442        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_clear_bss.o)
                0x00003442                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x00003442       0x3e /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_mulsi3.o)
                0x00003442                __mulsi3
 .text.libgcc   0x00003480       0x44 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_udivmodsi4.o)
                0x00003480                __udivmodsi4
 .text.libgcc   0x000034c4        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x000034c4        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x000034c4        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_clear_bss.o)
                0x000034c4                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000034c4        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_exit.o)
                0x000034c4                exit
                0x000034c4                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000034c4        0x4 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x000034c8                _etext = .

.data           0x00800060       0x20 load address 0x000034c8
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/crtm16.o
 .data          0x00800060       0x14 fat32.o
 .data          0x00800074        0x0 i2c_routines.o
 .data          0x00800074        0x0 rtc_routines.o
 .data          0x00800074        0x0 sd_routines.o
 .data          0x00800074        0x0 spi_routines.o
 .data          0x00800074        0xb uart_routines.o
 .data          0x0080007f        0x0 main.o
 .data          0x0080007f        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_mulsi3.o)
 .data          0x0080007f        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_udivmodsi4.o)
 .data          0x0080007f        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_exit.o)
 .data          0x0080007f        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_copy_data.o)
 .data          0x0080007f        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800080                . = ALIGN (0x2)
 *fill*         0x0080007f        0x1 00
                0x00800080                _edata = .
                0x00800080                PROVIDE (__data_end, .)

.bss            0x00800080      0x253
                0x00800080                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800080        0x0 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/crtm16.o
 .bss           0x00800080        0x0 fat32.o
 .bss           0x00800080        0x0 i2c_routines.o
 .bss           0x00800080        0x0 rtc_routines.o
 .bss           0x00800080        0x0 sd_routines.o
 .bss           0x00800080        0x0 spi_routines.o
 .bss           0x00800080        0x0 uart_routines.o
 .bss           0x00800080        0x0 main.o
 .bss           0x00800080        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_mulsi3.o)
 .bss           0x00800080        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_udivmodsi4.o)
 .bss           0x00800080        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_exit.o)
 .bss           0x00800080        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_copy_data.o)
 .bss           0x00800080        0x0 /usr/lib/gcc/avr/4.5.1/avr5/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800080      0x23c fat32.o
                0x00800080                rtc_register
                0x00800087                appendFileLocation
                0x0080008b                dateFAT
                0x0080008d                firstDataSector
                0x00800091                fileSize
                0x00800095                bytesPerSector
                0x00800097                totalClusters
                0x0080009b                rootCluster
                0x0080009f                timeFAT
                0x008000a1                startBlock
                0x008000a5                buffer
                0x008002a5                sectorPerCluster
                0x008002a7                unusedSectors
                0x008002ab                SDHC_flag
                0x008002ac                totalBlocks
                0x008002b0                reservedSectorCount
                0x008002b2                appendStartCluster
                0x008002b6                cardType
                0x008002b7                freeClusterCountUpdated
                0x008002b8                appendFileSector
 COMMON         0x008002bc       0x17 rtc_routines.o
                0x008002bc                time
                0x008002c6                day
                0x008002c7                date
                0x008002d3                PROVIDE (__bss_end, .)
                0x000034c8                __data_load_start = LOADADDR (.data)
                0x000034e8                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x008002d3        0x0
                0x008002d3                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x008002d3                PROVIDE (__noinit_end, .)
                0x008002d3                _end = .
                0x008002d3                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.stab           0x00000000     0x59ac
 *(.stab)
 .stab          0x00000000      0x6cc /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/crtm16.o
 .stab          0x000006cc     0x1e48 fat32.o
                               0x1e54 (size before relaxing)
 .stab          0x00002514      0x570 i2c_routines.o
                                0x738 (size before relaxing)
 .stab          0x00002a84     0x1134 rtc_routines.o
                               0x13a4 (size before relaxing)
 .stab          0x00003bb8      0x99c sd_routines.o
                                0xc0c (size before relaxing)
 .stab          0x00004554      0x294 spi_routines.o
                                0x45c (size before relaxing)
 .stab          0x000047e8      0x57c uart_routines.o
                                0x7ec (size before relaxing)
 .stab          0x00004d64      0xc48 main.o
                                0xf00 (size before relaxing)

.stabstr        0x00000000     0x1dd9
 *(.stabstr)
 .stabstr       0x00000000     0x1dd9 /usr/lib/gcc/avr/4.5.1/../../../../avr/lib/avr5/crtm16.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(sdtester.elf elf32-avr)
LOAD linker stubs
