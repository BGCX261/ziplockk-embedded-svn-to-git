
sdtester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000034c8  0000355c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000253  00800080  00800080  0000357c  2**0
                  ALLOC
  3 .stab         000059ac  00000000  00000000  0000357c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001dd9  00000000  00000000  00008f28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__ctors_end>
       4:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
       8:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
       c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      10:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      14:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      18:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      1c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      20:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      24:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      28:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      2c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      30:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      34:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      38:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      3c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      40:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      44:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      48:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      4c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      50:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>

00000054 <__c.1784>:
      54:	20 46 72 65 65 20 4d 65 6d 6f 72 79 3a 20 00         Free Memory: .

00000063 <__c.1777>:
      63:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

00000072 <__c.1750>:
      72:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      82:	20 63 6c 75 73 74 65 72 00                           cluster.

0000008b <__c.1748>:
      8b:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
      9b:	68 61 69 6e 00                                      hain.

000000a0 <__c.1740>:
      a0:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 20 00      File Created! .

000000b0 <__c.1735>:
      b0:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

000000c0 <__c.1732>:
      c0:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      d0:	21 00                                               !.

000000d2 <__c.1723>:
      d2:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
      e2:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

000000ec <__c.1721>:
      ec:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      fc:	21 00                                               !.

000000fe <__c.1719>:
      fe:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

0000010f <__c.1715>:
     10f:	20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65 78      File already ex
     11f:	69 73 74 73 2c 20 61 70 70 65 6e 64 69 6e 67 20     ists, appending 
     12f:	64 61 74 61 2e 2e 00                                data...

00000136 <__c.1674>:
     136:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     146:	2e 2e 00                                            ...

00000149 <__c.1662>:
     149:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     159:	20 63 6c 75 73 74 65 72 00                           cluster.

00000162 <__c.1641>:
     162:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     172:	20 63 6c 75 73 74 65 72 00                           cluster.

0000017b <__c.1633>:
     17b:	52 4f 4f 54 00                                      ROOT.

00000180 <__c.1631>:
     180:	44 49 52 00                                         DIR.

00000184 <__c.1629>:
     184:	20 20 20 00                                            .

00000188 <__c.1627>:
     188:	46 49 4c 45 00                                      FILE.

0000018d <__c.1625>:
     18d:	20 20 20 00                                            .

00000191 <__c.1619>:
     191:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

0000019f <__c.1617>:
     19f:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000001aa <__c.1612>:
     1aa:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     1ba:	69 73 74 21 00                                      ist!.

000001bf <__c.1561>:
     1bf:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

000001cf <__c.1559>:
     1cf:	44 61 74 65 20 55 70 64 61 74 65 20 46 61 69 6c     Date Update Fail
     1df:	65 64 2e 2e 00                                      ed...

000001e4 <__c.1557>:
     1e4:	44 61 74 65 20 55 70 64 61 74 65 64 20 73 75 63     Date Updated suc
     1f4:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

000001fe <__c.1555>:
     1fe:	45 6e 74 65 72 20 44 61 79 20 28 53 75 6e 64 61     Enter Day (Sunda
     20e:	79 3a 30 2c 20 4d 6f 6e 64 61 79 3a 31 2e 2e 2e     y:0, Monday:1...
     21e:	29 20 28 30 2d 36 29 3a 00                          ) (0-6):.

00000227 <__c.1552>:
     227:	45 6e 74 65 72 20 44 61 74 65 20 28 64 64 2f 6d     Enter Date (dd/m
     237:	6d 2f 79 79 29 3a 00                                m/yy):.

0000023e <__c.1546>:
     23e:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

0000024e <__c.1544>:
     24e:	54 69 6d 65 20 55 70 64 61 74 65 20 46 61 69 6c     Time Update Fail
     25e:	65 64 2e 2e 00                                      ed...

00000263 <__c.1542>:
     263:	54 69 6d 65 20 55 70 64 61 74 65 64 20 73 75 63     Time Updated suc
     273:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

0000027d <__c.1539>:
     27d:	45 6e 74 65 72 20 54 69 6d 65 20 69 6e 20 32 34     Enter Time in 24
     28d:	68 20 66 6f 72 6d 61 74 28 68 68 3a 6d 6d 3a 73     h format(hh:mm:s
     29d:	73 29 3a 00                                         s):.

000002a1 <__c.1514>:
     2a1:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

000002a9 <__c.1511>:
     2a9:	53 61 74 75 72 64 61 79 00                          Saturday.

000002b2 <__c.1508>:
     2b2:	46 72 69 64 61 79 00                                Friday.

000002b9 <__c.1505>:
     2b9:	54 68 75 72 73 64 61 79 00                          Thursday.

000002c2 <__c.1502>:
     2c2:	57 65 64 6e 65 73 64 61 79 00                       Wednesday.

000002cc <__c.1499>:
     2cc:	54 75 65 73 64 61 79 00                             Tuesday.

000002d4 <__c.1496>:
     2d4:	4d 6f 6e 64 61 79 00                                Monday.

000002db <__c.1492>:
     2db:	53 75 6e 64 61 79 00                                Sunday.

000002e2 <__c.1489>:
     2e2:	20 20 20 20 44 61 79 3a 20 00                           Day: .

000002ec <__c.1484>:
     2ec:	44 61 74 65 3a 00                                   Date:.

000002f2 <__c.1478>:
     2f2:	54 69 6d 65 3a 00                                   Time:.

000002f8 <__c.1714>:
     2f8:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

00000309 <__c.1703>:
     309:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     319:	6f 6e 67 2e 2e 00                                   ong...

0000031f <__c.1696>:
     31f:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
     32f:	20 00                                                .

00000331 <__c.1690>:
     331:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

00000342 <__c.1685>:
     342:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

00000350 <__c.1682>:
     350:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
     360:	21 00                                               !.

00000362 <__c.1680>:
     362:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

00000371 <__c.1676>:
     371:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
     381:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

0000038b <__c.1672>:
     38b:	45 72 61 73 65 64 21 00                             Erased!.

00000393 <__c.1670>:
     393:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

000003a2 <__c.1667>:
     3a2:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     3b2:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     3c2:	39 29 3a 00                                         9):.

000003c6 <__c.1664>:
     3c6:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     3d6:	73 61 62 6c 65 64 21 00                             sabled!.

000003de <__c.1662>:
     3de:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     3ee:	28 30 2d 39 2f 61 2f 62 2f 63 29 3a 20 00           (0-9/a/b/c): .

000003fc <__c.1660>:
     3fc:	3e 20 62 3a 20 55 70 64 61 74 65 20 44 61 74 65     > b: Update Date
     40c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     41c:	20 63 3a 20 55 70 64 61 74 65 20 54 69 6d 65 00      c: Update Time.

0000042c <__c.1658>:
     42c:	3e 20 39 3a 20 52 65 61 64 20 53 44 20 4d 65 6d     > 9: Read SD Mem
     43c:	6f 72 79 20 43 61 70 61 63 69 74 79 20 20 20 20     ory Capacity    
     44c:	20 61 3a 20 53 68 6f 77 20 44 61 74 65 20 26 20      a: Show Date & 
     45c:	54 69 6d 65 00                                      Time.

00000461 <__c.1656>:
     461:	3e 20 37 3a 20 57 72 69 74 65 20 46 69 6c 65 20     > 7: Write File 
     471:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     481:	20 38 3a 20 44 65 6c 65 74 65 20 46 69 6c 65 00      8: Delete File.

00000491 <__c.1654>:
     491:	3e 20 35 3a 20 47 65 74 20 66 69 6c 65 20 6c 69     > 5: Get file li
     4a1:	73 74 20 20 20 20 20 20 20 20 20 20 20 20 20 20     st              
     4b1:	20 36 3a 20 52 65 61 64 20 46 69 6c 65 00            6: Read File.

000004bf <__c.1652>:
     4bf:	3e 20 31 3a 20 57 72 69 74 65 20 73 69 6e 67 6c     > 1: Write singl
     4cf:	65 20 42 6c 6f 63 6b 20 20 20 20 20 20 20 20 20     e Block         
     4df:	20 32 3a 20 52 65 61 64 20 73 69 6e 67 6c 65 20      2: Read single 
     4ef:	42 6c 6f 63 6b 00                                   Block.

000004f5 <__c.1650>:
     4f5:	3e 20 30 3a 20 45 72 61 73 65 20 42 6c 6f 63 6b     > 0: Erase Block
     505:	73 20 00                                            s .

00000508 <__c.1648>:
     508:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

00000519 <__c.1646>:
     519:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

0000052a <__c.1644>:
     52a:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     53a:	44 65 74 65 63 74 65 64 21 00                       Detected!.

00000544 <__c.1641>:
     544:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     554:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     564:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

0000056f <__c.1638>:
     56f:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     57f:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

0000058c <__c.1634>:
     58c:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     59c:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     5ac:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000005b7 <__c.1630>:
     5b7:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     5c7:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

000005d4 <__c.1628>:
     5d4:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     5e4:	63 74 65 64 2e 2e 00                                cted...

000005eb <__c.1623>:
     5eb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5fb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     60b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     61b:	2a 2a 2a 2a 00                                      ****.

00000620 <__c.1621>:
     620:	20 20 20 20 44 68 61 72 6d 61 6e 69 27 73 20 6d         Dharmani's m
     630:	69 63 72 6f 53 44 20 43 61 72 64 20 54 65 73 74     icroSD Card Test
     640:	69 6e 67 2e 2e 20 20 00                             ing..  .

00000648 <__c.1619>:
     648:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     658:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     668:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     678:	2a 2a 2a 2a 00 00                                   ****..

0000067e <__ctors_end>:
     67e:	11 24       	eor	r1, r1
     680:	1f be       	out	0x3f, r1	; 63
     682:	cf e5       	ldi	r28, 0x5F	; 95
     684:	d4 e0       	ldi	r29, 0x04	; 4
     686:	de bf       	out	0x3e, r29	; 62
     688:	cd bf       	out	0x3d, r28	; 61

0000068a <__do_copy_data>:
     68a:	10 e0       	ldi	r17, 0x00	; 0
     68c:	a0 e6       	ldi	r26, 0x60	; 96
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	e8 ec       	ldi	r30, 0xC8	; 200
     692:	f4 e3       	ldi	r31, 0x34	; 52
     694:	02 c0       	rjmp	.+4      	; 0x69a <__do_copy_data+0x10>
     696:	05 90       	lpm	r0, Z+
     698:	0d 92       	st	X+, r0
     69a:	a0 38       	cpi	r26, 0x80	; 128
     69c:	b1 07       	cpc	r27, r17
     69e:	d9 f7       	brne	.-10     	; 0x696 <__do_copy_data+0xc>

000006a0 <__do_clear_bss>:
     6a0:	12 e0       	ldi	r17, 0x02	; 2
     6a2:	a0 e8       	ldi	r26, 0x80	; 128
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <.do_clear_bss_start>

000006a8 <.do_clear_bss_loop>:
     6a8:	1d 92       	st	X+, r1

000006aa <.do_clear_bss_start>:
     6aa:	a3 3d       	cpi	r26, 0xD3	; 211
     6ac:	b1 07       	cpc	r27, r17
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <.do_clear_bss_loop>
     6b0:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <main>
     6b4:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <_exit>

000006b8 <__bad_interrupt>:
     6b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006bc <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     6c4:	20 91 a5 02 	lds	r18, 0x02A5
     6c8:	30 91 a6 02 	lds	r19, 0x02A6
     6cc:	e0 90 8d 00 	lds	r14, 0x008D
     6d0:	f0 90 8e 00 	lds	r15, 0x008E
     6d4:	00 91 8f 00 	lds	r16, 0x008F
     6d8:	10 91 90 00 	lds	r17, 0x0090
     6dc:	62 50       	subi	r22, 0x02	; 2
     6de:	70 40       	sbci	r23, 0x00	; 0
     6e0:	80 40       	sbci	r24, 0x00	; 0
     6e2:	90 40       	sbci	r25, 0x00	; 0
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
     6ec:	9b 01       	movw	r18, r22
     6ee:	ac 01       	movw	r20, r24
     6f0:	2e 0d       	add	r18, r14
     6f2:	3f 1d       	adc	r19, r15
     6f4:	40 1f       	adc	r20, r16
     6f6:	51 1f       	adc	r21, r17
}
     6f8:	b9 01       	movw	r22, r18
     6fa:	ca 01       	movw	r24, r20
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	08 95       	ret

00000706 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     706:	4f 92       	push	r4
     708:	5f 92       	push	r5
     70a:	6f 92       	push	r6
     70c:	7f 92       	push	r7
     70e:	9f 92       	push	r9
     710:	af 92       	push	r10
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	5b 01       	movw	r10, r22
     726:	6c 01       	movw	r12, r24
     728:	94 2e       	mov	r9, r20
     72a:	28 01       	movw	r4, r16
     72c:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     72e:	e0 90 b0 02 	lds	r14, 0x02B0
     732:	f0 90 b1 02 	lds	r15, 0x02B1
     736:	aa 0c       	add	r10, r10
     738:	bb 1c       	adc	r11, r11
     73a:	cc 1c       	adc	r12, r12
     73c:	dd 1c       	adc	r13, r13
     73e:	aa 0c       	add	r10, r10
     740:	bb 1c       	adc	r11, r11
     742:	cc 1c       	adc	r12, r12
     744:	dd 1c       	adc	r13, r13
     746:	20 91 95 00 	lds	r18, 0x0095
     74a:	30 91 96 00 	lds	r19, 0x0096
     74e:	00 e0       	ldi	r16, 0x00	; 0
     750:	10 e0       	ldi	r17, 0x00	; 0
     752:	80 91 a7 02 	lds	r24, 0x02A7
     756:	90 91 a8 02 	lds	r25, 0x02A8
     75a:	a0 91 a9 02 	lds	r26, 0x02A9
     75e:	b0 91 aa 02 	lds	r27, 0x02AA
     762:	e8 0e       	add	r14, r24
     764:	f9 1e       	adc	r15, r25
     766:	0a 1f       	adc	r16, r26
     768:	1b 1f       	adc	r17, r27
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	c6 01       	movw	r24, r12
     770:	b5 01       	movw	r22, r10
     772:	0e 94 40 1a 	call	0x3480	; 0x3480 <__udivmodsi4>
     776:	e2 0e       	add	r14, r18
     778:	f3 1e       	adc	r15, r19
     77a:	04 1f       	adc	r16, r20
     77c:	15 1f       	adc	r17, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     77e:	20 91 95 00 	lds	r18, 0x0095
     782:	30 91 96 00 	lds	r19, 0x0096
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	c6 01       	movw	r24, r12
     78c:	b5 01       	movw	r22, r10
     78e:	0e 94 40 1a 	call	0x3480	; 0x3480 <__udivmodsi4>
     792:	eb 01       	movw	r28, r22
     794:	8a e0       	ldi	r24, 0x0A	; 10
     796:	a8 2e       	mov	r10, r24

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     798:	c8 01       	movw	r24, r16
     79a:	b7 01       	movw	r22, r14
     79c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>
     7a0:	88 23       	and	r24, r24
     7a2:	11 f0       	breq	.+4      	; 0x7a8 <getSetNextCluster+0xa2>
     7a4:	aa 94       	dec	r10

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     7a6:	c1 f7       	brne	.-16     	; 0x798 <getSetNextCluster+0x92>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     7a8:	cb 55       	subi	r28, 0x5B	; 91
     7aa:	df 4f       	sbci	r29, 0xFF	; 255

if(get_set == GET)
     7ac:	99 20       	and	r9, r9
     7ae:	b9 f4       	brne	.+46     	; 0x7de <getSetNextCluster+0xd8>
  return ((*FATEntryValue) & 0x0fffffff);
     7b0:	28 81       	ld	r18, Y
     7b2:	39 81       	ldd	r19, Y+1	; 0x01
     7b4:	4a 81       	ldd	r20, Y+2	; 0x02
     7b6:	5b 81       	ldd	r21, Y+3	; 0x03
     7b8:	5f 70       	andi	r21, 0x0F	; 15
*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT

SD_writeSingleBlock(FATEntrySector);

return (0);
}
     7ba:	b9 01       	movw	r22, r18
     7bc:	ca 01       	movw	r24, r20
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	df 90       	pop	r13
     7cc:	cf 90       	pop	r12
     7ce:	bf 90       	pop	r11
     7d0:	af 90       	pop	r10
     7d2:	9f 90       	pop	r9
     7d4:	7f 90       	pop	r7
     7d6:	6f 90       	pop	r6
     7d8:	5f 90       	pop	r5
     7da:	4f 90       	pop	r4
     7dc:	08 95       	ret

if(get_set == GET)
  return ((*FATEntryValue) & 0x0fffffff);


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     7de:	48 82       	st	Y, r4
     7e0:	59 82       	std	Y+1, r5	; 0x01
     7e2:	6a 82       	std	Y+2, r6	; 0x02
     7e4:	7b 82       	std	Y+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     7e6:	c8 01       	movw	r24, r16
     7e8:	b7 01       	movw	r22, r14
     7ea:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <SD_writeSingleBlock>

return (0);
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	e1 cf       	rjmp	.-62     	; 0x7ba <getSetNextCluster+0xb4>

000007f8 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     7f8:	cf 92       	push	r12
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	c8 2e       	mov	r12, r24
     806:	d6 2e       	mov	r13, r22
     808:	79 01       	movw	r14, r18
     80a:	8a 01       	movw	r16, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     80c:	60 91 a7 02 	lds	r22, 0x02A7
     810:	70 91 a8 02 	lds	r23, 0x02A8
     814:	80 91 a9 02 	lds	r24, 0x02A9
     818:	90 91 aa 02 	lds	r25, 0x02AA
     81c:	6f 5f       	subi	r22, 0xFF	; 255
     81e:	7f 4f       	sbci	r23, 0xFF	; 255
     820:	8f 4f       	sbci	r24, 0xFF	; 255
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     828:	80 91 a5 00 	lds	r24, 0x00A5
     82c:	90 91 a6 00 	lds	r25, 0x00A6
     830:	a0 91 a7 00 	lds	r26, 0x00A7
     834:	b0 91 a8 00 	lds	r27, 0x00A8
     838:	82 35       	cpi	r24, 0x52	; 82
     83a:	22 e5       	ldi	r18, 0x52	; 82
     83c:	92 07       	cpc	r25, r18
     83e:	21 e6       	ldi	r18, 0x61	; 97
     840:	a2 07       	cpc	r26, r18
     842:	21 e4       	ldi	r18, 0x41	; 65
     844:	b2 07       	cpc	r27, r18
     846:	69 f0       	breq	.+26     	; 0x862 <getSetFreeCluster+0x6a>
  return 0xffffffff;
     848:	2f ef       	ldi	r18, 0xFF	; 255
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	4f ef       	ldi	r20, 0xFF	; 255
     84e:	5f ef       	ldi	r21, 0xFF	; 255
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
     850:	b9 01       	movw	r22, r18
     852:	ca 01       	movw	r24, r20
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	ff 90       	pop	r15
     85a:	ef 90       	pop	r14
     85c:	df 90       	pop	r13
     85e:	cf 90       	pop	r12
     860:	08 95       	ret
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     862:	80 91 89 02 	lds	r24, 0x0289
     866:	90 91 8a 02 	lds	r25, 0x028A
     86a:	a0 91 8b 02 	lds	r26, 0x028B
     86e:	b0 91 8c 02 	lds	r27, 0x028C
     872:	82 37       	cpi	r24, 0x72	; 114
     874:	22 e7       	ldi	r18, 0x72	; 114
     876:	92 07       	cpc	r25, r18
     878:	21 e4       	ldi	r18, 0x41	; 65
     87a:	a2 07       	cpc	r26, r18
     87c:	21 e6       	ldi	r18, 0x61	; 97
     87e:	b2 07       	cpc	r27, r18
     880:	19 f7       	brne	.-58     	; 0x848 <getSetFreeCluster+0x50>
     882:	80 91 a1 02 	lds	r24, 0x02A1
     886:	90 91 a2 02 	lds	r25, 0x02A2
     88a:	a0 91 a3 02 	lds	r26, 0x02A3
     88e:	b0 91 a4 02 	lds	r27, 0x02A4
     892:	80 30       	cpi	r24, 0x00	; 0
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	92 07       	cpc	r25, r18
     898:	25 e5       	ldi	r18, 0x55	; 85
     89a:	a2 07       	cpc	r26, r18
     89c:	2a ea       	ldi	r18, 0xAA	; 170
     89e:	b2 07       	cpc	r27, r18
     8a0:	99 f6       	brne	.-90     	; 0x848 <getSetFreeCluster+0x50>
  return 0xffffffff;

 if(get_set == GET)
     8a2:	dd 20       	and	r13, r13
     8a4:	f1 f0       	breq	.+60     	; 0x8e2 <getSetFreeCluster+0xea>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     8a6:	2c 2d       	mov	r18, r12
     8a8:	21 30       	cpi	r18, 0x01	; 1
     8aa:	39 f1       	breq	.+78     	; 0x8fa <getSetFreeCluster+0x102>
      FS->freeClusterCount = FSEntry;
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     8ac:	e0 92 91 02 	sts	0x0291, r14
     8b0:	f0 92 92 02 	sts	0x0292, r15
     8b4:	00 93 93 02 	sts	0x0293, r16
     8b8:	10 93 94 02 	sts	0x0294, r17
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     8bc:	60 91 a7 02 	lds	r22, 0x02A7
     8c0:	70 91 a8 02 	lds	r23, 0x02A8
     8c4:	80 91 a9 02 	lds	r24, 0x02A9
     8c8:	90 91 aa 02 	lds	r25, 0x02AA
     8cc:	6f 5f       	subi	r22, 0xFF	; 255
     8ce:	7f 4f       	sbci	r23, 0xFF	; 255
     8d0:	8f 4f       	sbci	r24, 0xFF	; 255
     8d2:	9f 4f       	sbci	r25, 0xFF	; 255
     8d4:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <SD_writeSingleBlock>
 }
 return 0xffffffff;
     8d8:	2f ef       	ldi	r18, 0xFF	; 255
     8da:	3f ef       	ldi	r19, 0xFF	; 255
     8dc:	4f ef       	ldi	r20, 0xFF	; 255
     8de:	5f ef       	ldi	r21, 0xFF	; 255
     8e0:	b7 cf       	rjmp	.-146    	; 0x850 <getSetFreeCluster+0x58>
if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;

 if(get_set == GET)
 {
   if(totOrNext == TOTAL_FREE)
     8e2:	8c 2d       	mov	r24, r12
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	91 f0       	breq	.+36     	; 0x90c <getSetFreeCluster+0x114>
      return(FS->freeClusterCount);
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     8e8:	20 91 91 02 	lds	r18, 0x0291
     8ec:	30 91 92 02 	lds	r19, 0x0292
     8f0:	40 91 93 02 	lds	r20, 0x0293
     8f4:	50 91 94 02 	lds	r21, 0x0294
     8f8:	ab cf       	rjmp	.-170    	; 0x850 <getSetFreeCluster+0x58>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
      FS->freeClusterCount = FSEntry;
     8fa:	e0 92 8d 02 	sts	0x028D, r14
     8fe:	f0 92 8e 02 	sts	0x028E, r15
     902:	00 93 8f 02 	sts	0x028F, r16
     906:	10 93 90 02 	sts	0x0290, r17
     90a:	d8 cf       	rjmp	.-80     	; 0x8bc <getSetFreeCluster+0xc4>
  return 0xffffffff;

 if(get_set == GET)
 {
   if(totOrNext == TOTAL_FREE)
      return(FS->freeClusterCount);
     90c:	20 91 8d 02 	lds	r18, 0x028D
     910:	30 91 8e 02 	lds	r19, 0x028E
     914:	40 91 8f 02 	lds	r20, 0x028F
     918:	50 91 90 02 	lds	r21, 0x0290
     91c:	99 cf       	rjmp	.-206    	; 0x850 <getSetFreeCluster+0x58>

0000091e <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     91e:	cf 92       	push	r12
     920:	df 92       	push	r13
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     92e:	10 92 a7 02 	sts	0x02A7, r1
     932:	10 92 a8 02 	sts	0x02A8, r1
     936:	10 92 a9 02 	sts	0x02A9, r1
     93a:	10 92 aa 02 	sts	0x02AA, r1

SD_readSingleBlock(0);
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     94a:	80 91 a5 00 	lds	r24, 0x00A5
     94e:	89 3e       	cpi	r24, 0xE9	; 233
     950:	61 f1       	breq	.+88     	; 0x9aa <getBootSectorData+0x8c>
     952:	8b 3e       	cpi	r24, 0xEB	; 235
     954:	51 f1       	breq	.+84     	; 0x9aa <getBootSectorData+0x8c>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     956:	80 91 a3 02 	lds	r24, 0x02A3
     95a:	90 91 a4 02 	lds	r25, 0x02A4
     95e:	2a ea       	ldi	r18, 0xAA	; 170
     960:	85 35       	cpi	r24, 0x55	; 85
     962:	92 07       	cpc	r25, r18
     964:	51 f0       	breq	.+20     	; 0x97a <getBootSectorData+0x5c>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     966:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	08 95       	ret
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     97a:	60 91 6b 02 	lds	r22, 0x026B
     97e:	70 91 6c 02 	lds	r23, 0x026C
     982:	80 91 6d 02 	lds	r24, 0x026D
     986:	90 91 6e 02 	lds	r25, 0x026E
     98a:	60 93 a7 02 	sts	0x02A7, r22
     98e:	70 93 a8 02 	sts	0x02A8, r23
     992:	80 93 a9 02 	sts	0x02A9, r24
     996:	90 93 aa 02 	sts	0x02AA, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     99a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     99e:	80 91 a5 00 	lds	r24, 0x00A5
     9a2:	89 3e       	cpi	r24, 0xE9	; 233
     9a4:	11 f0       	breq	.+4      	; 0x9aa <getBootSectorData+0x8c>
     9a6:	8b 3e       	cpi	r24, 0xEB	; 235
     9a8:	f1 f6       	brne	.-68     	; 0x966 <getBootSectorData+0x48>
}

bytesPerSector = bpb->bytesPerSector;
     9aa:	80 91 b0 00 	lds	r24, 0x00B0
     9ae:	90 91 b1 00 	lds	r25, 0x00B1
     9b2:	90 93 96 00 	sts	0x0096, r25
     9b6:	80 93 95 00 	sts	0x0095, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     9ba:	80 91 b2 00 	lds	r24, 0x00B2
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	90 93 a6 02 	sts	0x02A6, r25
     9c4:	80 93 a5 02 	sts	0x02A5, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     9c8:	c0 90 b3 00 	lds	r12, 0x00B3
     9cc:	d0 90 b4 00 	lds	r13, 0x00B4
     9d0:	d0 92 b1 02 	sts	0x02B1, r13
     9d4:	c0 92 b0 02 	sts	0x02B0, r12
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     9d8:	80 91 d1 00 	lds	r24, 0x00D1
     9dc:	90 91 d2 00 	lds	r25, 0x00D2
     9e0:	a0 91 d3 00 	lds	r26, 0x00D3
     9e4:	b0 91 d4 00 	lds	r27, 0x00D4
     9e8:	80 93 9b 00 	sts	0x009B, r24
     9ec:	90 93 9c 00 	sts	0x009C, r25
     9f0:	a0 93 9d 00 	sts	0x009D, r26
     9f4:	b0 93 9e 00 	sts	0x009E, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     9f8:	c0 91 b0 02 	lds	r28, 0x02B0
     9fc:	d0 91 b1 02 	lds	r29, 0x02B1
     a00:	60 91 b5 00 	lds	r22, 0x00B5
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	20 91 c9 00 	lds	r18, 0x00C9
     a0e:	30 91 ca 00 	lds	r19, 0x00CA
     a12:	40 91 cb 00 	lds	r20, 0x00CB
     a16:	50 91 cc 00 	lds	r21, 0x00CC
     a1a:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
     a1e:	8b 01       	movw	r16, r22
     a20:	9c 01       	movw	r18, r24
     a22:	ce 01       	movw	r24, r28
     a24:	a0 e0       	ldi	r26, 0x00	; 0
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	40 91 c1 00 	lds	r20, 0x00C1
     a2c:	50 91 c2 00 	lds	r21, 0x00C2
     a30:	60 91 c3 00 	lds	r22, 0x00C3
     a34:	70 91 c4 00 	lds	r23, 0x00C4
     a38:	84 0f       	add	r24, r20
     a3a:	95 1f       	adc	r25, r21
     a3c:	a6 1f       	adc	r26, r22
     a3e:	b7 1f       	adc	r27, r23
     a40:	80 0f       	add	r24, r16
     a42:	91 1f       	adc	r25, r17
     a44:	a2 1f       	adc	r26, r18
     a46:	b3 1f       	adc	r27, r19
     a48:	80 93 8d 00 	sts	0x008D, r24
     a4c:	90 93 8e 00 	sts	0x008E, r25
     a50:	a0 93 8f 00 	sts	0x008F, r26
     a54:	b0 93 90 00 	sts	0x0090, r27

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     a58:	40 91 a5 02 	lds	r20, 0x02A5
     a5c:	50 91 a6 02 	lds	r21, 0x02A6
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
     a60:	ee 24       	eor	r14, r14
     a62:	ff 24       	eor	r15, r15
     a64:	60 91 c5 00 	lds	r22, 0x00C5
     a68:	70 91 c6 00 	lds	r23, 0x00C6
     a6c:	80 91 c7 00 	lds	r24, 0x00C7
     a70:	90 91 c8 00 	lds	r25, 0x00C8
     a74:	6c 19       	sub	r22, r12
     a76:	7d 09       	sbc	r23, r13
     a78:	8e 09       	sbc	r24, r14
     a7a:	9f 09       	sbc	r25, r15
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
     a7c:	60 1b       	sub	r22, r16
     a7e:	71 0b       	sbc	r23, r17
     a80:	82 0b       	sbc	r24, r18
     a82:	93 0b       	sbc	r25, r19
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     a84:	9a 01       	movw	r18, r20
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	0e 94 40 1a 	call	0x3480	; 0x3480 <__udivmodsi4>
     a8e:	20 93 97 00 	sts	0x0097, r18
     a92:	30 93 98 00 	sts	0x0098, r19
     a96:	40 93 99 00 	sts	0x0099, r20
     a9a:	50 93 9a 00 	sts	0x009A, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
     aae:	9b 01       	movw	r18, r22
     ab0:	ac 01       	movw	r20, r24
     ab2:	80 91 97 00 	lds	r24, 0x0097
     ab6:	90 91 98 00 	lds	r25, 0x0098
     aba:	a0 91 99 00 	lds	r26, 0x0099
     abe:	b0 91 9a 00 	lds	r27, 0x009A
     ac2:	82 17       	cp	r24, r18
     ac4:	93 07       	cpc	r25, r19
     ac6:	a4 07       	cpc	r26, r20
     ac8:	b5 07       	cpc	r27, r21
     aca:	28 f0       	brcs	.+10     	; 0xad6 <getBootSectorData+0x1b8>
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	80 93 b7 02 	sts	0x02B7, r24
return 0;
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	49 cf       	rjmp	.-366    	; 0x968 <getBootSectorData+0x4a>
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
     ad6:	10 92 b7 02 	sts	0x02B7, r1
else
	 freeClusterCountUpdated = 1;
return 0;
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	45 cf       	rjmp	.-374    	; 0x968 <getBootSectorData+0x4a>

00000ade <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	df 93       	push	r29
     ae4:	cf 93       	push	r28
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	2b 97       	sbiw	r28, 0x0b	; 11
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];

return 0;
     af6:	ac 01       	movw	r20, r24
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     af8:	fc 01       	movw	r30, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     afa:	10 e0       	ldi	r17, 0x00	; 0
if(fileName[j] == '.') break;
     afc:	21 91       	ld	r18, Z+
     afe:	2e 32       	cpi	r18, 0x2E	; 46
     b00:	99 f0       	breq	.+38     	; 0xb28 <convertFileName+0x4a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     b02:	1f 5f       	subi	r17, 0xFF	; 255
     b04:	1c 30       	cpi	r17, 0x0C	; 12
     b06:	d1 f7       	brne	.-12     	; 0xafc <convertFileName+0x1e>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     b08:	86 e3       	ldi	r24, 0x36	; 54
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
     b10:	81 e0       	ldi	r24, 0x01	; 1

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];

return 0;
}
     b12:	2b 96       	adiw	r28, 0x0b	; 11
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     b28:	19 30       	cpi	r17, 0x09	; 9
     b2a:	70 f7       	brcc	.-36     	; 0xb08 <convertFileName+0x2a>

for(k=0; k<j; k++) //setting file name
     b2c:	11 23       	and	r17, r17
     b2e:	09 f4       	brne	.+2      	; 0xb32 <convertFileName+0x54>
     b30:	4f c0       	rjmp	.+158    	; 0xbd0 <convertFileName+0xf2>
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     b32:	9e 01       	movw	r18, r28
     b34:	2f 5f       	subi	r18, 0xFF	; 255
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	f9 01       	movw	r30, r18
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
     b3a:	be 01       	movw	r22, r28
     b3c:	6e 5f       	subi	r22, 0xFE	; 254
     b3e:	7f 4f       	sbci	r23, 0xFF	; 255
     b40:	a1 2f       	mov	r26, r17
     b42:	a1 50       	subi	r26, 0x01	; 1
     b44:	6a 0f       	add	r22, r26
     b46:	71 1d       	adc	r23, r1
     b48:	dc 01       	movw	r26, r24
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
     b4a:	0d 91       	ld	r16, X+
     b4c:	01 93       	st	Z+, r16
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     b4e:	e6 17       	cp	r30, r22
     b50:	f7 07       	cpc	r31, r23
     b52:	d9 f7       	brne	.-10     	; 0xb4a <convertFileName+0x6c>
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     b54:	18 30       	cpi	r17, 0x08	; 8
     b56:	49 f0       	breq	.+18     	; 0xb6a <convertFileName+0x8c>
     b58:	61 2f       	mov	r22, r17
  fileNameFAT[k] = ' ';
     b5a:	70 e2       	ldi	r23, 0x20	; 32
     b5c:	f9 01       	movw	r30, r18
     b5e:	e6 0f       	add	r30, r22
     b60:	f1 1d       	adc	r31, r1
     b62:	70 83       	st	Z, r23
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     b64:	6f 5f       	subi	r22, 0xFF	; 255
     b66:	68 30       	cpi	r22, 0x08	; 8
     b68:	c9 f7       	brne	.-14     	; 0xb5c <convertFileName+0x7e>
  fileNameFAT[k] = ' ';

j++;
     b6a:	1f 5f       	subi	r17, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
     b6c:	68 e0       	ldi	r22, 0x08	; 8
{
  if(fileName[j] != 0)
     b6e:	fc 01       	movw	r30, r24
     b70:	e1 0f       	add	r30, r17
     b72:	f1 1d       	adc	r31, r1
     b74:	70 81       	ld	r23, Z
     b76:	77 23       	and	r23, r23
     b78:	11 f5       	brne	.+68     	; 0xbbe <convertFileName+0xe0>
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     b7a:	6b 30       	cpi	r22, 0x0B	; 11
     b7c:	28 f5       	brcc	.+74     	; 0xbc8 <convertFileName+0xea>
      fileNameFAT[k++] = ' ';
     b7e:	80 e2       	ldi	r24, 0x20	; 32
     b80:	f9 01       	movw	r30, r18
     b82:	e6 0f       	add	r30, r22
     b84:	f1 1d       	adc	r31, r1
     b86:	80 83       	st	Z, r24
     b88:	6f 5f       	subi	r22, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     b8a:	6b 30       	cpi	r22, 0x0B	; 11
     b8c:	c9 f7       	brne	.-14     	; 0xb80 <convertFileName+0xa2>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     b8e:	d9 01       	movw	r26, r18
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
     b90:	ce 01       	movw	r24, r28
     b92:	0c 96       	adiw	r24, 0x0c	; 12
     b94:	f9 01       	movw	r30, r18
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     b96:	20 81       	ld	r18, Z
     b98:	32 2f       	mov	r19, r18
     b9a:	31 56       	subi	r19, 0x61	; 97
     b9c:	3a 31       	cpi	r19, 0x1A	; 26
     b9e:	10 f4       	brcc	.+4      	; 0xba4 <convertFileName+0xc6>
    fileNameFAT[j] -= 0x20;
     ba0:	20 52       	subi	r18, 0x20	; 32
     ba2:	20 83       	st	Z, r18
     ba4:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     ba6:	e8 17       	cp	r30, r24
     ba8:	f9 07       	cpc	r31, r25
     baa:	a9 f7       	brne	.-22     	; 0xb96 <convertFileName+0xb8>
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     bac:	2d 91       	ld	r18, X+
     bae:	fa 01       	movw	r30, r20
     bb0:	21 93       	st	Z+, r18
     bb2:	af 01       	movw	r20, r30

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     bb4:	a8 17       	cp	r26, r24
     bb6:	b9 07       	cpc	r27, r25
     bb8:	c9 f7       	brne	.-14     	; 0xbac <convertFileName+0xce>
  fileName[j] = fileNameFAT[j];

return 0;
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	aa cf       	rjmp	.-172    	; 0xb12 <convertFileName+0x34>

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
     bbe:	f9 01       	movw	r30, r18
     bc0:	e6 0f       	add	r30, r22
     bc2:	f1 1d       	adc	r31, r1
     bc4:	70 83       	st	Z, r23
     bc6:	1f 5f       	subi	r17, 0xFF	; 255

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     bc8:	6f 5f       	subi	r22, 0xFF	; 255
     bca:	6b 30       	cpi	r22, 0x0B	; 11
     bcc:	80 f2       	brcs	.-96     	; 0xb6e <convertFileName+0x90>
     bce:	df cf       	rjmp	.-66     	; 0xb8e <convertFileName+0xb0>
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	9e 01       	movw	r18, r28
     bd4:	2f 5f       	subi	r18, 0xFF	; 255
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	c0 cf       	rjmp	.-128    	; 0xb5a <convertFileName+0x7c>

00000bda <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     bda:	6f 92       	push	r6
     bdc:	7f 92       	push	r7
     bde:	8f 92       	push	r8
     be0:	9f 92       	push	r9
     be2:	af 92       	push	r10
     be4:	bf 92       	push	r11
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     bf2:	60 78       	andi	r22, 0x80	; 128
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     bf4:	20 91 97 00 	lds	r18, 0x0097
     bf8:	30 91 98 00 	lds	r19, 0x0098
     bfc:	40 91 99 00 	lds	r20, 0x0099
     c00:	50 91 9a 00 	lds	r21, 0x009A
     c04:	62 17       	cp	r22, r18
     c06:	73 07       	cpc	r23, r19
     c08:	84 07       	cpc	r24, r20
     c0a:	95 07       	cpc	r25, r21
     c0c:	08 f0       	brcs	.+2      	; 0xc10 <searchNextFreeCluster+0x36>
     c0e:	89 c0       	rjmp	.+274    	; 0xd22 <searchNextFreeCluster+0x148>
     c10:	5b 01       	movw	r10, r22
     c12:	6c 01       	movw	r12, r24
     c14:	aa 0c       	add	r10, r10
     c16:	bb 1c       	adc	r11, r11
     c18:	cc 1c       	adc	r12, r12
     c1a:	dd 1c       	adc	r13, r13
     c1c:	aa 0c       	add	r10, r10
     c1e:	bb 1c       	adc	r11, r11
     c20:	cc 1c       	adc	r12, r12
     c22:	dd 1c       	adc	r13, r13
     c24:	3b 01       	movw	r6, r22
     c26:	4c 01       	movw	r8, r24
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     c28:	e0 90 b0 02 	lds	r14, 0x02B0
     c2c:	f0 90 b1 02 	lds	r15, 0x02B1
     c30:	20 91 95 00 	lds	r18, 0x0095
     c34:	30 91 96 00 	lds	r19, 0x0096
     c38:	00 e0       	ldi	r16, 0x00	; 0
     c3a:	10 e0       	ldi	r17, 0x00	; 0
     c3c:	80 91 a7 02 	lds	r24, 0x02A7
     c40:	90 91 a8 02 	lds	r25, 0x02A8
     c44:	a0 91 a9 02 	lds	r26, 0x02A9
     c48:	b0 91 aa 02 	lds	r27, 0x02AA
     c4c:	e8 0e       	add	r14, r24
     c4e:	f9 1e       	adc	r15, r25
     c50:	0a 1f       	adc	r16, r26
     c52:	1b 1f       	adc	r17, r27
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	c6 01       	movw	r24, r12
     c5a:	b5 01       	movw	r22, r10
     c5c:	0e 94 40 1a 	call	0x3480	; 0x3480 <__udivmodsi4>
     c60:	e2 0e       	add	r14, r18
     c62:	f3 1e       	adc	r15, r19
     c64:	04 1f       	adc	r16, r20
     c66:	15 1f       	adc	r17, r21
      SD_readSingleBlock(sector);
     c68:	c8 01       	movw	r24, r16
     c6a:	b7 01       	movw	r22, r14
     c6c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     c70:	80 91 a5 00 	lds	r24, 0x00A5
     c74:	90 91 a6 00 	lds	r25, 0x00A6
     c78:	a0 91 a7 00 	lds	r26, 0x00A7
     c7c:	b0 91 a8 00 	lds	r27, 0x00A8
     c80:	bf 70       	andi	r27, 0x0F	; 15
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	a1 05       	cpc	r26, r1
     c86:	b1 05       	cpc	r27, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <searchNextFreeCluster+0xb2>
     c8a:	4f c0       	rjmp	.+158    	; 0xd2a <searchNextFreeCluster+0x150>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     c8c:	21 e0       	ldi	r18, 0x01	; 1
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <searchNextFreeCluster+0xbc>
     c90:	2f 5f       	subi	r18, 0xFF	; 255
     c92:	20 38       	cpi	r18, 0x80	; 128
     c94:	41 f1       	breq	.+80     	; 0xce6 <searchNextFreeCluster+0x10c>
      {
       	 value = (unsigned long *) &buffer[i*4];
     c96:	e2 2f       	mov	r30, r18
     c98:	f0 e0       	ldi	r31, 0x00	; 0
         if(((*value) & 0x0fffffff) == 0)
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	eb 55       	subi	r30, 0x5B	; 91
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	80 81       	ld	r24, Z
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	a2 81       	ldd	r26, Z+2	; 0x02
     cac:	b3 81       	ldd	r27, Z+3	; 0x03
     cae:	bf 70       	andi	r27, 0x0F	; 15
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	a1 05       	cpc	r26, r1
     cb4:	b1 05       	cpc	r27, r1
     cb6:	61 f7       	brne	.-40     	; 0xc90 <searchNextFreeCluster+0xb6>
     cb8:	82 2f       	mov	r24, r18
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 e0       	ldi	r26, 0x00	; 0
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
            return(cluster+i);
     cc0:	68 0e       	add	r6, r24
     cc2:	79 1e       	adc	r7, r25
     cc4:	8a 1e       	adc	r8, r26
     cc6:	9b 1e       	adc	r9, r27
      }  
    } 

 return 0;
}
     cc8:	b3 01       	movw	r22, r6
     cca:	c4 01       	movw	r24, r8
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	df 90       	pop	r13
     cd6:	cf 90       	pop	r12
     cd8:	bf 90       	pop	r11
     cda:	af 90       	pop	r10
     cdc:	9f 90       	pop	r9
     cde:	8f 90       	pop	r8
     ce0:	7f 90       	pop	r7
     ce2:	6f 90       	pop	r6
     ce4:	08 95       	ret
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     ce6:	20 e8       	ldi	r18, 0x80	; 128
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	62 0e       	add	r6, r18
     cf0:	73 1e       	adc	r7, r19
     cf2:	84 1e       	adc	r8, r20
     cf4:	95 1e       	adc	r9, r21
     cf6:	80 91 97 00 	lds	r24, 0x0097
     cfa:	90 91 98 00 	lds	r25, 0x0098
     cfe:	a0 91 99 00 	lds	r26, 0x0099
     d02:	b0 91 9a 00 	lds	r27, 0x009A
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	32 e0       	ldi	r19, 0x02	; 2
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	a2 0e       	add	r10, r18
     d10:	b3 1e       	adc	r11, r19
     d12:	c4 1e       	adc	r12, r20
     d14:	d5 1e       	adc	r13, r21
     d16:	68 16       	cp	r6, r24
     d18:	79 06       	cpc	r7, r25
     d1a:	8a 06       	cpc	r8, r26
     d1c:	9b 06       	cpc	r9, r27
     d1e:	08 f4       	brcc	.+2      	; 0xd22 <searchNextFreeCluster+0x148>
     d20:	83 cf       	rjmp	.-250    	; 0xc28 <searchNextFreeCluster+0x4e>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
     d22:	66 24       	eor	r6, r6
     d24:	77 24       	eor	r7, r7
     d26:	43 01       	movw	r8, r6
     d28:	cf cf       	rjmp	.-98     	; 0xcc8 <searchNextFreeCluster+0xee>
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	a0 e0       	ldi	r26, 0x00	; 0
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	c6 cf       	rjmp	.-116    	; 0xcc0 <searchNextFreeCluster+0xe6>

00000d34 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     d34:	7f 92       	push	r7
     d36:	8f 92       	push	r8
     d38:	9f 92       	push	r9
     d3a:	af 92       	push	r10
     d3c:	bf 92       	push	r11
     d3e:	cf 92       	push	r12
     d40:	df 92       	push	r13
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	64 97       	sbiw	r28, 0x14	; 20
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	78 2e       	mov	r7, r24
     d60:	cb 01       	movw	r24, r22
     d62:	ba 01       	movw	r22, r20
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     d64:	4e 01       	movw	r8, r28
     d66:	08 94       	sec
     d68:	81 1c       	adc	r8, r1
     d6a:	91 1c       	adc	r9, r1
     d6c:	d4 01       	movw	r26, r8
     d6e:	e0 e6       	ldi	r30, 0x60	; 96
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	24 e1       	ldi	r18, 0x14	; 20
     d74:	01 90       	ld	r0, Z+
     d76:	0d 92       	st	X+, r0
     d78:	21 50       	subi	r18, 0x01	; 1
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <displayMemory+0x40>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     d7c:	fc e0       	ldi	r31, 0x0C	; 12
     d7e:	ff 2e       	mov	r15, r31
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     d80:	ec e2       	ldi	r30, 0x2C	; 44
     d82:	ee 2e       	mov	r14, r30
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     d84:	5a e0       	ldi	r21, 0x0A	; 10
     d86:	a5 2e       	mov	r10, r21
     d88:	b1 2c       	mov	r11, r1
     d8a:	c1 2c       	mov	r12, r1
     d8c:	d1 2c       	mov	r13, r1
     d8e:	15 c0       	rjmp	.+42     	; 0xdba <displayMemory+0x86>
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     d90:	29 30       	cpi	r18, 0x09	; 9
     d92:	b1 f0       	breq	.+44     	; 0xdc0 <displayMemory+0x8c>
	{
	   memoryString[i-1] = ',';  
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     d94:	8e 01       	movw	r16, r28
     d96:	0f 0d       	add	r16, r15
     d98:	11 1d       	adc	r17, r1
     d9a:	a6 01       	movw	r20, r12
     d9c:	95 01       	movw	r18, r10
     d9e:	0e 94 40 1a 	call	0x3480	; 0x3480 <__udivmodsi4>
     da2:	60 63       	ori	r22, 0x30	; 48
     da4:	f8 01       	movw	r30, r16
     da6:	60 83       	st	Z, r22
    memory /= 10;
     da8:	b9 01       	movw	r22, r18
     daa:	ca 01       	movw	r24, r20
	if(memory == 0) break;
     dac:	61 15       	cp	r22, r1
     dae:	71 05       	cpc	r23, r1
     db0:	81 05       	cpc	r24, r1
     db2:	91 05       	cpc	r25, r1
     db4:	59 f0       	breq	.+22     	; 0xdcc <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     db6:	fa 94       	dec	r15
     db8:	49 f0       	breq	.+18     	; 0xdcc <displayMemory+0x98>
  {
    if(i==5 || i==9) 
     dba:	2f 2d       	mov	r18, r15
     dbc:	25 30       	cpi	r18, 0x05	; 5
     dbe:	41 f7       	brne	.-48     	; 0xd90 <displayMemory+0x5c>
	{
	   memoryString[i-1] = ',';  
     dc0:	fe 01       	movw	r30, r28
     dc2:	ef 0d       	add	r30, r15
     dc4:	f1 1d       	adc	r31, r1
     dc6:	e0 82       	st	Z, r14
	   i--;
     dc8:	fa 94       	dec	r15
     dca:	e4 cf       	rjmp	.-56     	; 0xd94 <displayMemory+0x60>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     dcc:	f7 2d       	mov	r31, r7
     dce:	f1 30       	cpi	r31, 0x01	; 1
     dd0:	11 f4       	brne	.+4      	; 0xdd6 <displayMemory+0xa2>
     dd2:	8b e4       	ldi	r24, 0x4B	; 75
     dd4:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     dd6:	c4 01       	movw	r24, r8
     dd8:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <transmitString>
}
     ddc:	64 96       	adiw	r28, 0x14	; 20
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	cf 90       	pop	r12
     df8:	bf 90       	pop	r11
     dfa:	af 90       	pop	r10
     dfc:	9f 90       	pop	r9
     dfe:	8f 90       	pop	r8
     e00:	7f 90       	pop	r7
     e02:	08 95       	ret

00000e04 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
     e04:	2f 92       	push	r2
     e06:	3f 92       	push	r3
     e08:	4f 92       	push	r4
     e0a:	5f 92       	push	r5
     e0c:	6f 92       	push	r6
     e0e:	7f 92       	push	r7
     e10:	8f 92       	push	r8
     e12:	9f 92       	push	r9
     e14:	af 92       	push	r10
     e16:	bf 92       	push	r11
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
     e24:	60 91 a5 02 	lds	r22, 0x02A5
     e28:	70 91 a6 02 	lds	r23, 0x02A6
     e2c:	20 91 97 00 	lds	r18, 0x0097
     e30:	30 91 98 00 	lds	r19, 0x0098
     e34:	40 91 99 00 	lds	r20, 0x0099
     e38:	50 91 9a 00 	lds	r21, 0x009A
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
     e44:	7b 01       	movw	r14, r22
     e46:	8c 01       	movw	r16, r24
     e48:	8a e0       	ldi	r24, 0x0A	; 10
     e4a:	16 95       	lsr	r17
     e4c:	07 95       	ror	r16
     e4e:	f7 94       	ror	r15
     e50:	e7 94       	ror	r14
     e52:	8a 95       	dec	r24
     e54:	d1 f7       	brne	.-12     	; 0xe4a <memoryStatistics+0x46>
totalMemory *= bytesPerSector;
     e56:	a0 90 95 00 	lds	r10, 0x0095
     e5a:	b0 90 96 00 	lds	r11, 0x0096

TX_NEWLINE;
     e5e:	8d e0       	ldi	r24, 0x0D	; 13
     e60:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
     e64:	8a e0       	ldi	r24, 0x0A	; 10
     e66:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
TX_NEWLINE;
     e6a:	8d e0       	ldi	r24, 0x0D	; 13
     e6c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
     e70:	8a e0       	ldi	r24, 0x0A	; 10
     e72:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F(PSTR("Total Memory: "));
     e76:	83 e6       	ldi	r24, 0x63	; 99
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
totalMemory *= bytesPerSector;
     e7e:	95 01       	movw	r18, r10
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	c8 01       	movw	r24, r16
     e86:	b7 01       	movw	r22, r14
     e88:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
     e8c:	ab 01       	movw	r20, r22
     e8e:	bc 01       	movw	r22, r24

TX_NEWLINE;
TX_NEWLINE;
transmitString_F(PSTR("Total Memory: "));

displayMemory (HIGH, totalMemory);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	0e 94 9a 06 	call	0xd34	; 0xd34 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
     ea6:	5b 01       	movw	r10, r22
     ea8:	6c 01       	movw	r12, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
     eaa:	80 91 97 00 	lds	r24, 0x0097
     eae:	90 91 98 00 	lds	r25, 0x0098
     eb2:	a0 91 99 00 	lds	r26, 0x0099
     eb6:	b0 91 9a 00 	lds	r27, 0x009A
     eba:	8a 15       	cp	r24, r10
     ebc:	9b 05       	cpc	r25, r11
     ebe:	ac 05       	cpc	r26, r12
     ec0:	bd 05       	cpc	r27, r13
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <memoryStatistics+0xc2>
     ec4:	6c c0       	rjmp	.+216    	; 0xf9e <memoryStatistics+0x19a>
{
   freeClusterCountUpdated = 0;
     ec6:	10 92 b7 02 	sts	0x02B7, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
     eca:	20 90 9b 00 	lds	r2, 0x009B
     ece:	30 90 9c 00 	lds	r3, 0x009C
     ed2:	40 90 9d 00 	lds	r4, 0x009D
     ed6:	50 90 9e 00 	lds	r5, 0x009E
     eda:	22 0c       	add	r2, r2
     edc:	33 1c       	adc	r3, r3
     ede:	44 1c       	adc	r4, r4
     ee0:	55 1c       	adc	r5, r5
     ee2:	22 0c       	add	r2, r2
     ee4:	33 1c       	adc	r3, r3
     ee6:	44 1c       	adc	r4, r4
     ee8:	55 1c       	adc	r5, r5

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
   totalClusterCount = 0;
     eea:	ee 24       	eor	r14, r14
     eec:	ff 24       	eor	r15, r15
     eee:	87 01       	movw	r16, r14
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
     ef0:	aa 24       	eor	r10, r10
     ef2:	bb 24       	eor	r11, r11
     ef4:	65 01       	movw	r12, r10
   totalClusterCount = 0;
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
     ef6:	60 90 b0 02 	lds	r6, 0x02B0
     efa:	70 90 b1 02 	lds	r7, 0x02B1
     efe:	20 91 95 00 	lds	r18, 0x0095
     f02:	30 91 96 00 	lds	r19, 0x0096
     f06:	88 24       	eor	r8, r8
     f08:	99 24       	eor	r9, r9
     f0a:	80 91 a7 02 	lds	r24, 0x02A7
     f0e:	90 91 a8 02 	lds	r25, 0x02A8
     f12:	a0 91 a9 02 	lds	r26, 0x02A9
     f16:	b0 91 aa 02 	lds	r27, 0x02AA
     f1a:	68 0e       	add	r6, r24
     f1c:	79 1e       	adc	r7, r25
     f1e:	8a 1e       	adc	r8, r26
     f20:	9b 1e       	adc	r9, r27
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	c2 01       	movw	r24, r4
     f28:	b1 01       	movw	r22, r2
     f2a:	0e 94 40 1a 	call	0x3480	; 0x3480 <__udivmodsi4>
     f2e:	62 0e       	add	r6, r18
     f30:	73 1e       	adc	r7, r19
     f32:	84 1e       	adc	r8, r20
     f34:	95 1e       	adc	r9, r21
      SD_readSingleBlock(sector);
     f36:	c4 01       	movw	r24, r8
     f38:	b3 01       	movw	r22, r6
     f3a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	07 c0       	rjmp	.+14     	; 0xf52 <memoryStatistics+0x14e>
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
     f44:	2c 5f       	subi	r18, 0xFC	; 252
     f46:	3f 4f       	sbci	r19, 0xFF	; 255
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	20 30       	cpi	r18, 0x00	; 0
     f4c:	38 07       	cpc	r19, r24
     f4e:	09 f4       	brne	.+2      	; 0xf52 <memoryStatistics+0x14e>
     f50:	77 c0       	rjmp	.+238    	; 0x1040 <memoryStatistics+0x23c>
//Note: this routine can take upto 15sec for 1GB card (@1MHz clock)
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
     f52:	f9 01       	movw	r30, r18
     f54:	eb 55       	subi	r30, 0x5B	; 91
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
     f58:	80 81       	ld	r24, Z
     f5a:	91 81       	ldd	r25, Z+1	; 0x01
     f5c:	a2 81       	ldd	r26, Z+2	; 0x02
     f5e:	b3 81       	ldd	r27, Z+3	; 0x03
     f60:	bf 70       	andi	r27, 0x0F	; 15
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	a1 05       	cpc	r26, r1
     f66:	b1 05       	cpc	r27, r1
     f68:	29 f4       	brne	.+10     	; 0xf74 <memoryStatistics+0x170>
            freeClusters++;;
     f6a:	08 94       	sec
     f6c:	a1 1c       	adc	r10, r1
     f6e:	b1 1c       	adc	r11, r1
     f70:	c1 1c       	adc	r12, r1
     f72:	d1 1c       	adc	r13, r1
        
         totalClusterCount++;
     f74:	08 94       	sec
     f76:	e1 1c       	adc	r14, r1
     f78:	f1 1c       	adc	r15, r1
     f7a:	01 1d       	adc	r16, r1
     f7c:	11 1d       	adc	r17, r1
         if(totalClusterCount == (totalClusters+2)) break;
     f7e:	80 91 97 00 	lds	r24, 0x0097
     f82:	90 91 98 00 	lds	r25, 0x0098
     f86:	a0 91 99 00 	lds	r26, 0x0099
     f8a:	b0 91 9a 00 	lds	r27, 0x009A
     f8e:	02 96       	adiw	r24, 0x02	; 2
     f90:	a1 1d       	adc	r26, r1
     f92:	b1 1d       	adc	r27, r1
     f94:	8e 15       	cp	r24, r14
     f96:	9f 05       	cpc	r25, r15
     f98:	a0 07       	cpc	r26, r16
     f9a:	b1 07       	cpc	r27, r17
     f9c:	99 f6       	brne	.-90     	; 0xf44 <memoryStatistics+0x140>
      if(i < 128) break;
      cluster+=128;
    } 
}

if(!freeClusterCountUpdated)
     f9e:	80 91 b7 02 	lds	r24, 0x02B7
     fa2:	88 23       	and	r24, r24
     fa4:	31 f4       	brne	.+12     	; 0xfb2 <memoryStatistics+0x1ae>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	a6 01       	movw	r20, r12
     fac:	95 01       	movw	r18, r10
     fae:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 b7 02 	sts	0x02B7, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
     fb8:	20 91 a5 02 	lds	r18, 0x02A5
     fbc:	30 91 a6 02 	lds	r19, 0x02A6
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	c6 01       	movw	r24, r12
     fc6:	b5 01       	movw	r22, r10
     fc8:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
     fcc:	7b 01       	movw	r14, r22
     fce:	8c 01       	movw	r16, r24
     fd0:	aa e0       	ldi	r26, 0x0A	; 10
     fd2:	16 95       	lsr	r17
     fd4:	07 95       	ror	r16
     fd6:	f7 94       	ror	r15
     fd8:	e7 94       	ror	r14
     fda:	aa 95       	dec	r26
     fdc:	d1 f7       	brne	.-12     	; 0xfd2 <memoryStatistics+0x1ce>
freeMemory *= bytesPerSector ;
     fde:	a0 90 95 00 	lds	r10, 0x0095
     fe2:	b0 90 96 00 	lds	r11, 0x0096
TX_NEWLINE;
     fe6:	8d e0       	ldi	r24, 0x0D	; 13
     fe8:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
     fec:	8a e0       	ldi	r24, 0x0A	; 10
     fee:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F(PSTR(" Free Memory: "));
     ff2:	84 e5       	ldi	r24, 0x54	; 84
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>

if(!freeClusterCountUpdated)
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
freeClusterCountUpdated = 1;  //set flag
freeMemory = freeClusters * sectorPerCluster / 1024;
freeMemory *= bytesPerSector ;
     ffa:	95 01       	movw	r18, r10
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	c8 01       	movw	r24, r16
    1002:	b7 01       	movw	r22, r14
    1004:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
    1008:	ab 01       	movw	r20, r22
    100a:	bc 01       	movw	r22, r24
TX_NEWLINE;
transmitString_F(PSTR(" Free Memory: "));
displayMemory (HIGH, freeMemory);
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	0e 94 9a 06 	call	0xd34	; 0xd34 <displayMemory>
TX_NEWLINE; 
    1012:	8d e0       	ldi	r24, 0x0D	; 13
    1014:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1018:	8a e0       	ldi	r24, 0x0A	; 10
    101a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
}
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	bf 90       	pop	r11
    102c:	af 90       	pop	r10
    102e:	9f 90       	pop	r9
    1030:	8f 90       	pop	r8
    1032:	7f 90       	pop	r7
    1034:	6f 90       	pop	r6
    1036:	5f 90       	pop	r5
    1038:	4f 90       	pop	r4
    103a:	3f 90       	pop	r3
    103c:	2f 90       	pop	r2
    103e:	08 95       	ret
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	a0 e0       	ldi	r26, 0x00	; 0
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	28 0e       	add	r2, r24
    104a:	39 1e       	adc	r3, r25
    104c:	4a 1e       	adc	r4, r26
    104e:	5b 1e       	adc	r5, r27
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
      cluster+=128;
    } 
    1050:	52 cf       	rjmp	.-348    	; 0xef6 <memoryStatistics+0xf2>

00001052 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	d8 2e       	mov	r13, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    105e:	db 01       	movw	r26, r22
    1060:	ca 01       	movw	r24, r20
    1062:	91 70       	andi	r25, 0x01	; 1
    1064:	a0 70       	andi	r26, 0x00	; 0
    1066:	b0 70       	andi	r27, 0x00	; 0
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	a1 05       	cpc	r26, r1
    106c:	b1 05       	cpc	r27, r1
    106e:	21 f5       	brne	.+72     	; 0x10b8 <freeMemoryUpdate+0x66>
    1070:	e9 e0       	ldi	r30, 0x09	; 9
    1072:	76 95       	lsr	r23
    1074:	67 95       	ror	r22
    1076:	57 95       	ror	r21
    1078:	47 95       	ror	r20
    107a:	ea 95       	dec	r30
    107c:	d1 f7       	brne	.-12     	; 0x1072 <freeMemoryUpdate+0x20>
  else size = (size / 512) +1;
  if((size % 8) == 0) size = size / 8;
    107e:	db 01       	movw	r26, r22
    1080:	ca 01       	movw	r24, r20
    1082:	87 70       	andi	r24, 0x07	; 7
    1084:	90 70       	andi	r25, 0x00	; 0
    1086:	a0 70       	andi	r26, 0x00	; 0
    1088:	b0 70       	andi	r27, 0x00	; 0
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	a1 05       	cpc	r26, r1
    108e:	b1 05       	cpc	r27, r1
    1090:	f9 f4       	brne	.+62     	; 0x10d0 <freeMemoryUpdate+0x7e>
    1092:	7a 01       	movw	r14, r20
    1094:	8b 01       	movw	r16, r22
    1096:	23 e0       	ldi	r18, 0x03	; 3
    1098:	16 95       	lsr	r17
    109a:	07 95       	ror	r16
    109c:	f7 94       	ror	r15
    109e:	e7 94       	ror	r14
    10a0:	2a 95       	dec	r18
    10a2:	d1 f7       	brne	.-12     	; 0x1098 <freeMemoryUpdate+0x46>
  else size = (size / 8) +1;

  if(freeClusterCountUpdated)
    10a4:	80 91 b7 02 	lds	r24, 0x02B7
    10a8:	88 23       	and	r24, r24
    10aa:	21 f5       	brne	.+72     	; 0x10f4 <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
  }
}
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	08 95       	ret
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
  else size = (size / 512) +1;
    10b8:	39 e0       	ldi	r19, 0x09	; 9
    10ba:	76 95       	lsr	r23
    10bc:	67 95       	ror	r22
    10be:	57 95       	ror	r21
    10c0:	47 95       	ror	r20
    10c2:	3a 95       	dec	r19
    10c4:	d1 f7       	brne	.-12     	; 0x10ba <freeMemoryUpdate+0x68>
    10c6:	4f 5f       	subi	r20, 0xFF	; 255
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	6f 4f       	sbci	r22, 0xFF	; 255
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	d7 cf       	rjmp	.-82     	; 0x107e <freeMemoryUpdate+0x2c>
  if((size % 8) == 0) size = size / 8;
  else size = (size / 8) +1;
    10d0:	7a 01       	movw	r14, r20
    10d2:	8b 01       	movw	r16, r22
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	16 95       	lsr	r17
    10d8:	07 95       	ror	r16
    10da:	f7 94       	ror	r15
    10dc:	e7 94       	ror	r14
    10de:	9a 95       	dec	r25
    10e0:	d1 f7       	brne	.-12     	; 0x10d6 <freeMemoryUpdate+0x84>
    10e2:	08 94       	sec
    10e4:	e1 1c       	adc	r14, r1
    10e6:	f1 1c       	adc	r15, r1
    10e8:	01 1d       	adc	r16, r1
    10ea:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
    10ec:	80 91 b7 02 	lds	r24, 0x02B7
    10f0:	88 23       	and	r24, r24
    10f2:	e1 f2       	breq	.-72     	; 0x10ac <freeMemoryUpdate+0x5a>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
	if(flag == ADD)
    1104:	dd 20       	and	r13, r13
    1106:	81 f0       	breq	.+32     	; 0x1128 <freeMemoryUpdate+0xd6>
  	   freeClusters = freeClusters + size;
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    1108:	9b 01       	movw	r18, r22
    110a:	ac 01       	movw	r20, r24
    110c:	2e 19       	sub	r18, r14
    110e:	3f 09       	sbc	r19, r15
    1110:	40 0b       	sbc	r20, r16
    1112:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
  }
}
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	08 95       	ret

  if(freeClusterCountUpdated)
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
	if(flag == ADD)
  	   freeClusters = freeClusters + size;
    1128:	9b 01       	movw	r18, r22
    112a:	ac 01       	movw	r20, r24
    112c:	2e 0d       	add	r18, r14
    112e:	3f 1d       	adc	r19, r15
    1130:	40 1f       	adc	r20, r16
    1132:	51 1f       	adc	r21, r17
    1134:	ef cf       	rjmp	.-34     	; 0x1114 <freeMemoryUpdate+0xc2>

00001136 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    1136:	2f 92       	push	r2
    1138:	3f 92       	push	r3
    113a:	4f 92       	push	r4
    113c:	5f 92       	push	r5
    113e:	6f 92       	push	r6
    1140:	7f 92       	push	r7
    1142:	8f 92       	push	r8
    1144:	9f 92       	push	r9
    1146:	af 92       	push	r10
    1148:	bf 92       	push	r11
    114a:	cf 92       	push	r12
    114c:	df 92       	push	r13
    114e:	ef 92       	push	r14
    1150:	ff 92       	push	r15
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	2d 97       	sbiw	r28, 0x0d	; 13
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	68 2e       	mov	r6, r24
    116c:	d6 2e       	mov	r13, r22
    116e:	77 2e       	mov	r7, r23
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    1170:	80 91 9b 00 	lds	r24, 0x009B
    1174:	90 91 9c 00 	lds	r25, 0x009C
    1178:	a0 91 9d 00 	lds	r26, 0x009D
    117c:	b0 91 9e 00 	lds	r27, 0x009E
    1180:	89 87       	std	Y+9, r24	; 0x09
    1182:	9a 87       	std	Y+10, r25	; 0x0a
    1184:	ab 87       	std	Y+11, r26	; 0x0b
    1186:	bc 87       	std	Y+12, r27	; 0x0c
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1188:	c6 2c       	mov	r12, r6
    118a:	ca 94       	dec	r12
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    118c:	20 91 a5 02 	lds	r18, 0x02A5
    1190:	30 91 a6 02 	lds	r19, 0x02A6
    1194:	e0 90 8d 00 	lds	r14, 0x008D
    1198:	f0 90 8e 00 	lds	r15, 0x008E
    119c:	00 91 8f 00 	lds	r16, 0x008F
    11a0:	10 91 90 00 	lds	r17, 0x0090
    11a4:	69 85       	ldd	r22, Y+9	; 0x09
    11a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    11a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ac:	62 50       	subi	r22, 0x02	; 2
    11ae:	70 40       	sbci	r23, 0x00	; 0
    11b0:	80 40       	sbci	r24, 0x00	; 0
    11b2:	90 40       	sbci	r25, 0x00	; 0
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
    11bc:	4b 01       	movw	r8, r22
    11be:	5c 01       	movw	r10, r24
    11c0:	8e 0c       	add	r8, r14
    11c2:	9f 1c       	adc	r9, r15
    11c4:	a0 1e       	adc	r10, r16
    11c6:	b1 1e       	adc	r11, r17

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    11c8:	80 91 a5 02 	lds	r24, 0x02A5
    11cc:	90 91 a6 02 	lds	r25, 0x02A6
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <findFiles+0xa0>
    11d4:	16 c1       	rjmp	.+556    	; 0x1402 <findFiles+0x2cc>
    11d6:	22 24       	eor	r2, r2
    11d8:	33 24       	eor	r3, r3
    11da:	21 01       	movw	r4, r2
    11dc:	8d 82       	std	Y+5, r8	; 0x05
    11de:	9e 82       	std	Y+6, r9	; 0x06
    11e0:	af 82       	std	Y+7, r10	; 0x07
    11e2:	b8 86       	std	Y+8, r11	; 0x08
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	af 81       	ldd	r26, Y+7	; 0x07
    11ea:	b8 85       	ldd	r27, Y+8	; 0x08
    11ec:	82 0d       	add	r24, r2
    11ee:	93 1d       	adc	r25, r3
    11f0:	a4 1d       	adc	r26, r4
    11f2:	b5 1d       	adc	r27, r5
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	ab 83       	std	Y+3, r26	; 0x03
    11fa:	bc 83       	std	Y+4, r27	; 0x04
   {
     SD_readSingleBlock (firstSector + sector);
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
    1204:	80 91 95 00 	lds	r24, 0x0095
    1208:	90 91 96 00 	lds	r25, 0x0096
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	09 f4       	brne	.+2      	; 0x1212 <findFiles+0xdc>
    1210:	e7 c0       	rjmp	.+462    	; 0x13e0 <findFiles+0x2aa>
     {
	    dir = (struct dir_Structure *) &buffer[i];
    1212:	25 ea       	ldi	r18, 0xA5	; 165
    1214:	30 e0       	ldi	r19, 0x00	; 0

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1216:	80 91 a5 00 	lds	r24, 0x00A5
    121a:	88 23       	and	r24, r24
    121c:	09 f4       	brne	.+2      	; 0x1220 <findFiles+0xea>
    121e:	69 c0       	rjmp	.+210    	; 0x12f2 <findFiles+0x1bc>
    1220:	00 e0       	ldi	r16, 0x00	; 0
    1222:	10 e0       	ldi	r17, 0x00	; 0
    1224:	59 01       	movw	r10, r18
		{
		  if((flag == GET_FILE) || (flag == DELETE))
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1226:	85 3e       	cpi	r24, 0xE5	; 229
    1228:	09 f4       	brne	.+2      	; 0x122c <findFiles+0xf6>
    122a:	4e c0       	rjmp	.+156    	; 0x12c8 <findFiles+0x192>
    122c:	f5 01       	movw	r30, r10
    122e:	83 85       	ldd	r24, Z+11	; 0x0b
    1230:	8f 30       	cpi	r24, 0x0F	; 15
    1232:	09 f4       	brne	.+2      	; 0x1236 <findFiles+0x100>
    1234:	49 c0       	rjmp	.+146    	; 0x12c8 <findFiles+0x192>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1236:	fc 2d       	mov	r31, r12
    1238:	f2 30       	cpi	r31, 0x02	; 2
    123a:	08 f4       	brcc	.+2      	; 0x123e <findFiles+0x108>
    123c:	7b c0       	rjmp	.+246    	; 0x1334 <findFiles+0x1fe>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    123e:	8d e0       	ldi	r24, 0x0D	; 13
    1240:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1244:	8a e0       	ldi	r24, 0x0A	; 10
    1246:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    124a:	88 24       	eor	r8, r8
    124c:	83 94       	inc	r8
    124e:	ee 24       	eor	r14, r14
    1250:	ff 24       	eor	r15, r15
    1252:	0d c0       	rjmp	.+26     	; 0x126e <findFiles+0x138>
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
    1254:	f5 01       	movw	r30, r10
    1256:	ee 0d       	add	r30, r14
    1258:	f1 1d       	adc	r31, r1
    125a:	80 81       	ld	r24, Z
    125c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    1260:	e8 2d       	mov	r30, r8
    1262:	eb 30       	cpi	r30, 0x0B	; 11
    1264:	98 f4       	brcc	.+38     	; 0x128c <findFiles+0x156>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    1266:	08 94       	sec
    1268:	e1 1c       	adc	r14, r1
    126a:	f1 1c       	adc	r15, r1
    126c:	83 94       	inc	r8
    126e:	9e 2d       	mov	r25, r14
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
    1270:	98 30       	cpi	r25, 0x08	; 8
    1272:	81 f7       	brne	.-32     	; 0x1254 <findFiles+0x11e>
    1274:	80 e2       	ldi	r24, 0x20	; 32
    1276:	ed 86       	std	Y+13, r14	; 0x0d
    1278:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
			   transmitByte (dir->name[j]);
    127c:	9d 85       	ldd	r25, Y+13	; 0x0d
    127e:	f5 01       	movw	r30, r10
    1280:	e9 0f       	add	r30, r25
    1282:	f1 1d       	adc	r31, r1
    1284:	80 81       	ld	r24, Z
    1286:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    128a:	ed cf       	rjmp	.-38     	; 0x1266 <findFiles+0x130>
			 }
		     transmitString_F (PSTR("   "));
    128c:	8d e8       	ldi	r24, 0x8D	; 141
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    1294:	d5 01       	movw	r26, r10
    1296:	1b 96       	adiw	r26, 0x0b	; 11
    1298:	8c 91       	ld	r24, X
    129a:	1b 97       	sbiw	r26, 0x0b	; 11
    129c:	80 31       	cpi	r24, 0x10	; 16
    129e:	09 f4       	brne	.+2      	; 0x12a2 <findFiles+0x16c>
    12a0:	9c c0       	rjmp	.+312    	; 0x13da <findFiles+0x2a4>
    12a2:	88 30       	cpi	r24, 0x08	; 8
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <findFiles+0x172>
    12a6:	94 c0       	rjmp	.+296    	; 0x13d0 <findFiles+0x29a>
			 {
			     transmitString_F (PSTR("FILE" ));
    12a8:	88 e8       	ldi	r24, 0x88	; 136
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
		         transmitString_F (PSTR("   "));
    12b0:	84 e8       	ldi	r24, 0x84	; 132
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    12b8:	f5 01       	movw	r30, r10
    12ba:	44 8d       	ldd	r20, Z+28	; 0x1c
    12bc:	55 8d       	ldd	r21, Z+29	; 0x1d
    12be:	66 8d       	ldd	r22, Z+30	; 0x1e
    12c0:	77 8d       	ldd	r23, Z+31	; 0x1f
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	0e 94 9a 06 	call	0xd34	; 0xd34 <displayMemory>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    12c8:	00 5e       	subi	r16, 0xE0	; 224
    12ca:	1f 4f       	sbci	r17, 0xFF	; 255
    12cc:	80 91 95 00 	lds	r24, 0x0095
    12d0:	90 91 96 00 	lds	r25, 0x0096
    12d4:	08 17       	cp	r16, r24
    12d6:	19 07       	cpc	r17, r25
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <findFiles+0x1a6>
    12da:	82 c0       	rjmp	.+260    	; 0x13e0 <findFiles+0x2aa>
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    12dc:	85 ea       	ldi	r24, 0xA5	; 165
    12de:	a8 2e       	mov	r10, r24
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	b8 2e       	mov	r11, r24
    12e4:	a0 0e       	add	r10, r16
    12e6:	b1 1e       	adc	r11, r17

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    12e8:	d5 01       	movw	r26, r10
    12ea:	8c 91       	ld	r24, X
    12ec:	88 23       	and	r24, r24
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <findFiles+0x1bc>
    12f0:	9a cf       	rjmp	.-204    	; 0x1226 <findFiles+0xf0>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
    12f2:	86 2d       	mov	r24, r6
    12f4:	81 50       	subi	r24, 0x01	; 1
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	08 f4       	brcc	.+2      	; 0x12fc <findFiles+0x1c6>
    12fa:	1f c1       	rjmp	.+574    	; 0x153a <findFiles+0x404>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    12fc:	cc 24       	eor	r12, r12
    12fe:	dd 24       	eor	r13, r13
   if(cluster == 0) 
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
 }
return 0;
}
    1300:	c6 01       	movw	r24, r12
    1302:	2d 96       	adiw	r28, 0x0d	; 13
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	bf 90       	pop	r11
    1320:	af 90       	pop	r10
    1322:	9f 90       	pop	r9
    1324:	8f 90       	pop	r8
    1326:	7f 90       	pop	r7
    1328:	6f 90       	pop	r6
    132a:	5f 90       	pop	r5
    132c:	4f 90       	pop	r4
    132e:	3f 90       	pop	r3
    1330:	2f 90       	pop	r2
    1332:	08 95       	ret
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1334:	d5 01       	movw	r26, r10
    1336:	ed 2d       	mov	r30, r13
    1338:	f7 2d       	mov	r31, r7
    133a:	80 e0       	ldi	r24, 0x00	; 0
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    133c:	2d 91       	ld	r18, X+
    133e:	91 91       	ld	r25, Z+
    1340:	29 17       	cp	r18, r25
    1342:	11 f6       	brne	.-124    	; 0x12c8 <findFiles+0x192>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	8b 30       	cpi	r24, 0x0B	; 11
    1348:	c9 f7       	brne	.-14     	; 0x133c <findFiles+0x206>
    134a:	65 01       	movw	r12, r10
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
			{
			  if(flag == GET_FILE)
    134c:	26 2d       	mov	r18, r6
    134e:	21 30       	cpi	r18, 0x01	; 1
    1350:	09 f0       	breq	.+2      	; 0x1354 <findFiles+0x21e>
    1352:	7c c0       	rjmp	.+248    	; 0x144c <findFiles+0x316>
              {
			    appendFileSector = firstSector + sector;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	ab 81       	ldd	r26, Y+3	; 0x03
    135a:	bc 81       	ldd	r27, Y+4	; 0x04
    135c:	80 93 b8 02 	sts	0x02B8, r24
    1360:	90 93 b9 02 	sts	0x02B9, r25
    1364:	a0 93 ba 02 	sts	0x02BA, r26
    1368:	b0 93 bb 02 	sts	0x02BB, r27
				appendFileLocation = i;
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	00 93 87 00 	sts	0x0087, r16
    1374:	10 93 88 00 	sts	0x0088, r17
    1378:	20 93 89 00 	sts	0x0089, r18
    137c:	30 93 8a 00 	sts	0x008A, r19
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1380:	d5 01       	movw	r26, r10
    1382:	54 96       	adiw	r26, 0x14	; 20
    1384:	8d 91       	ld	r24, X+
    1386:	9c 91       	ld	r25, X
    1388:	55 97       	sbiw	r26, 0x15	; 21
    138a:	a0 e0       	ldi	r26, 0x00	; 0
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	dc 01       	movw	r26, r24
    1390:	99 27       	eor	r25, r25
    1392:	88 27       	eor	r24, r24
    1394:	f5 01       	movw	r30, r10
    1396:	22 8d       	ldd	r18, Z+26	; 0x1a
    1398:	33 8d       	ldd	r19, Z+27	; 0x1b
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	82 2b       	or	r24, r18
    13a0:	93 2b       	or	r25, r19
    13a2:	a4 2b       	or	r26, r20
    13a4:	b5 2b       	or	r27, r21
    13a6:	80 93 b2 02 	sts	0x02B2, r24
    13aa:	90 93 b3 02 	sts	0x02B3, r25
    13ae:	a0 93 b4 02 	sts	0x02B4, r26
    13b2:	b0 93 b5 02 	sts	0x02B5, r27
				fileSize = dir->fileSize;
    13b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    13b8:	95 8d       	ldd	r25, Z+29	; 0x1d
    13ba:	a6 8d       	ldd	r26, Z+30	; 0x1e
    13bc:	b7 8d       	ldd	r27, Z+31	; 0x1f
    13be:	80 93 91 00 	sts	0x0091, r24
    13c2:	90 93 92 00 	sts	0x0092, r25
    13c6:	a0 93 93 00 	sts	0x0093, r26
    13ca:	b0 93 94 00 	sts	0x0094, r27
			    return (dir);
    13ce:	98 cf       	rjmp	.-208    	; 0x1300 <findFiles+0x1ca>
			     transmitString_F (PSTR("FILE" ));
		         transmitString_F (PSTR("   "));
			     displayMemory (LOW, dir->fileSize);
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    13d0:	8b e7       	ldi	r24, 0x7B	; 123
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    13d8:	77 cf       	rjmp	.-274    	; 0x12c8 <findFiles+0x192>
    13da:	80 e8       	ldi	r24, 0x80	; 128
    13dc:	91 e0       	ldi	r25, 0x01	; 1
    13de:	fa cf       	rjmp	.-12     	; 0x13d4 <findFiles+0x29e>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    13e0:	08 94       	sec
    13e2:	21 1c       	adc	r2, r1
    13e4:	31 1c       	adc	r3, r1
    13e6:	41 1c       	adc	r4, r1
    13e8:	51 1c       	adc	r5, r1
    13ea:	80 91 a5 02 	lds	r24, 0x02A5
    13ee:	90 91 a6 02 	lds	r25, 0x02A6
    13f2:	a0 e0       	ldi	r26, 0x00	; 0
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	28 16       	cp	r2, r24
    13f8:	39 06       	cpc	r3, r25
    13fa:	4a 06       	cpc	r4, r26
    13fc:	5b 06       	cpc	r5, r27
    13fe:	08 f4       	brcc	.+2      	; 0x1402 <findFiles+0x2cc>
    1400:	f1 ce       	rjmp	.-542    	; 0x11e4 <findFiles+0xae>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    1402:	69 85       	ldd	r22, Y+9	; 0x09
    1404:	7a 85       	ldd	r23, Y+10	; 0x0a
    1406:	8b 85       	ldd	r24, Y+11	; 0x0b
    1408:	9c 85       	ldd	r25, Y+12	; 0x0c
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	00 e0       	ldi	r16, 0x00	; 0
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	0e 94 83 03 	call	0x706	; 0x706 <getSetNextCluster>
    1418:	69 87       	std	Y+9, r22	; 0x09
    141a:	7a 87       	std	Y+10, r23	; 0x0a
    141c:	8b 87       	std	Y+11, r24	; 0x0b
    141e:	9c 87       	std	Y+12, r25	; 0x0c

   if(cluster > 0x0ffffff6)
    1420:	67 3f       	cpi	r22, 0xF7	; 247
    1422:	ff ef       	ldi	r31, 0xFF	; 255
    1424:	7f 07       	cpc	r23, r31
    1426:	ff ef       	ldi	r31, 0xFF	; 255
    1428:	8f 07       	cpc	r24, r31
    142a:	ff e0       	ldi	r31, 0x0F	; 15
    142c:	9f 07       	cpc	r25, r31
    142e:	08 f0       	brcs	.+2      	; 0x1432 <findFiles+0x2fc>
    1430:	65 cf       	rjmp	.-310    	; 0x12fc <findFiles+0x1c6>
   	 return 0;
   if(cluster == 0) 
    1432:	61 15       	cp	r22, r1
    1434:	71 05       	cpc	r23, r1
    1436:	81 05       	cpc	r24, r1
    1438:	91 05       	cpc	r25, r1
    143a:	09 f0       	breq	.+2      	; 0x143e <findFiles+0x308>
    143c:	a7 ce       	rjmp	.-690    	; 0x118c <findFiles+0x56>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    143e:	82 e6       	ldi	r24, 0x62	; 98
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    1446:	cc 24       	eor	r12, r12
    1448:	dd 24       	eor	r13, r13
    144a:	5a cf       	rjmp	.-332    	; 0x1300 <findFiles+0x1ca>
				fileSize = dir->fileSize;
			    return (dir);
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    144c:	8d e0       	ldi	r24, 0x0D	; 13
    144e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1452:	8a e0       	ldi	r24, 0x0A	; 10
    1454:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
    1458:	8f e9       	ldi	r24, 0x9F	; 159
    145a:	91 e0       	ldi	r25, 0x01	; 1
    145c:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
				 TX_NEWLINE;
    1460:	8d e0       	ldi	r24, 0x0D	; 13
    1462:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1466:	8a e0       	ldi	r24, 0x0A	; 10
    1468:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
				 TX_NEWLINE;
    146c:	8d e0       	ldi	r24, 0x0D	; 13
    146e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1472:	8a e0       	ldi	r24, 0x0A	; 10
    1474:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1478:	d5 01       	movw	r26, r10
    147a:	54 96       	adiw	r26, 0x14	; 20
    147c:	8d 90       	ld	r8, X+
    147e:	9c 90       	ld	r9, X
    1480:	55 97       	sbiw	r26, 0x15	; 21
    1482:	aa 24       	eor	r10, r10
    1484:	bb 24       	eor	r11, r11
    1486:	54 01       	movw	r10, r8
    1488:	99 24       	eor	r9, r9
    148a:	88 24       	eor	r8, r8
    148c:	5a 96       	adiw	r26, 0x1a	; 26
    148e:	8d 91       	ld	r24, X+
    1490:	9c 91       	ld	r25, X
    1492:	5b 97       	sbiw	r26, 0x1b	; 27
    1494:	a0 e0       	ldi	r26, 0x00	; 0
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	88 2a       	or	r8, r24
    149a:	99 2a       	or	r9, r25
    149c:	aa 2a       	or	r10, r26
    149e:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    14a0:	85 ee       	ldi	r24, 0xE5	; 229
    14a2:	f6 01       	movw	r30, r12
    14a4:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    14a6:	69 81       	ldd	r22, Y+1	; 0x01
    14a8:	7a 81       	ldd	r23, Y+2	; 0x02
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    14b2:	d6 01       	movw	r26, r12
    14b4:	5c 96       	adiw	r26, 0x1c	; 28
    14b6:	4d 91       	ld	r20, X+
    14b8:	5d 91       	ld	r21, X+
    14ba:	6d 91       	ld	r22, X+
    14bc:	7c 91       	ld	r23, X
    14be:	5f 97       	sbiw	r26, 0x1f	; 31
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	0e 94 29 08 	call	0x1052	; 0x1052 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
				 if(firstCluster < cluster)
    14d6:	86 16       	cp	r8, r22
    14d8:	97 06       	cpc	r9, r23
    14da:	a8 06       	cpc	r10, r24
    14dc:	b9 06       	cpc	r11, r25
    14de:	48 f4       	brcc	.+18     	; 0x14f2 <findFiles+0x3bc>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	61 e0       	ldi	r22, 0x01	; 1
    14e4:	a5 01       	movw	r20, r10
    14e6:	94 01       	movw	r18, r8
    14e8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <findFiles+0x3bc>
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {transmitString_F(PSTR("File deleted!"));return 0;}
					firstCluster = nextCluster;
    14ee:	46 01       	movw	r8, r12
    14f0:	57 01       	movw	r10, r14
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    14f2:	c5 01       	movw	r24, r10
    14f4:	b4 01       	movw	r22, r8
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	00 e0       	ldi	r16, 0x00	; 0
    14fa:	10 e0       	ldi	r17, 0x00	; 0
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	0e 94 83 03 	call	0x706	; 0x706 <getSetNextCluster>
    1504:	6b 01       	movw	r12, r22
    1506:	7c 01       	movw	r14, r24
					getSetNextCluster (firstCluster, SET, 0);
    1508:	c5 01       	movw	r24, r10
    150a:	b4 01       	movw	r22, r8
    150c:	41 e0       	ldi	r20, 0x01	; 1
    150e:	00 e0       	ldi	r16, 0x00	; 0
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	0e 94 83 03 	call	0x706	; 0x706 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    151a:	b7 ef       	ldi	r27, 0xF7	; 247
    151c:	cb 16       	cp	r12, r27
    151e:	bf ef       	ldi	r27, 0xFF	; 255
    1520:	db 06       	cpc	r13, r27
    1522:	bf ef       	ldi	r27, 0xFF	; 255
    1524:	eb 06       	cpc	r14, r27
    1526:	bf e0       	ldi	r27, 0x0F	; 15
    1528:	fb 06       	cpc	r15, r27
    152a:	08 f3       	brcs	.-62     	; 0x14ee <findFiles+0x3b8>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    152c:	81 e9       	ldi	r24, 0x91	; 145
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    1534:	cc 24       	eor	r12, r12
    1536:	dd 24       	eor	r13, r13
    1538:	e3 ce       	rjmp	.-570    	; 0x1300 <findFiles+0x1ca>
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  if((flag == GET_FILE) || (flag == DELETE))
		      transmitString_F(PSTR("File does not exist!"));
    153a:	8a ea       	ldi	r24, 0xAA	; 170
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
		  return 0;   
    1542:	cc 24       	eor	r12, r12
    1544:	dd 24       	eor	r13, r13
    1546:	dc ce       	rjmp	.-584    	; 0x1300 <findFiles+0x1ca>

00001548 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    154e:	0e 94 6f 05 	call	0xade	; 0xade <convertFileName>
  if(error) return;
    1552:	88 23       	and	r24, r24
    1554:	21 f4       	brne	.+8      	; 0x155e <deleteFile+0x16>

  findFiles (DELETE, fileName);
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	be 01       	movw	r22, r28
    155a:	0e 94 9b 08 	call	0x1136	; 0x1136 <findFiles>
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    1564:	2f 92       	push	r2
    1566:	3f 92       	push	r3
    1568:	4f 92       	push	r4
    156a:	5f 92       	push	r5
    156c:	6f 92       	push	r6
    156e:	7f 92       	push	r7
    1570:	8f 92       	push	r8
    1572:	9f 92       	push	r9
    1574:	af 92       	push	r10
    1576:	bf 92       	push	r11
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	28 97       	sbiw	r28, 0x08	; 8
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	18 2f       	mov	r17, r24
    159a:	6b 01       	movw	r12, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    159c:	cb 01       	movw	r24, r22
    159e:	0e 94 6f 05 	call	0xade	; 0xade <convertFileName>
if(error) return 2;
    15a2:	88 23       	and	r24, r24
    15a4:	d1 f0       	breq	.+52     	; 0x15da <readFile+0x76>
    15a6:	82 e0       	ldi	r24, 0x02	; 2
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
}
return 0;
}
    15a8:	28 96       	adiw	r28, 0x08	; 8
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	9f 90       	pop	r9
    15ca:	8f 90       	pop	r8
    15cc:	7f 90       	pop	r7
    15ce:	6f 90       	pop	r6
    15d0:	5f 90       	pop	r5
    15d2:	4f 90       	pop	r4
    15d4:	3f 90       	pop	r3
    15d6:	2f 90       	pop	r2
    15d8:	08 95       	ret
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;

dir = findFiles (GET_FILE, fileName); //get the file location
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	b6 01       	movw	r22, r12
    15de:	0e 94 9b 08 	call	0x1136	; 0x1136 <findFiles>
    15e2:	bc 01       	movw	r22, r24
if(dir == 0) 
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	09 f4       	brne	.+2      	; 0x15ea <readFile+0x86>
    15e8:	8a c0       	rjmp	.+276    	; 0x16fe <readFile+0x19a>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    15ea:	11 30       	cpi	r17, 0x01	; 1
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <readFile+0x8c>
    15ee:	89 c0       	rjmp	.+274    	; 0x1702 <readFile+0x19e>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    15f0:	dc 01       	movw	r26, r24
    15f2:	54 96       	adiw	r26, 0x14	; 20
    15f4:	2d 91       	ld	r18, X+
    15f6:	3c 91       	ld	r19, X
    15f8:	55 97       	sbiw	r26, 0x15	; 21
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	d9 01       	movw	r26, r18
    1600:	99 27       	eor	r25, r25
    1602:	88 27       	eor	r24, r24
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	ab 83       	std	Y+3, r26	; 0x03
    160a:	bc 83       	std	Y+4, r27	; 0x04
    160c:	db 01       	movw	r26, r22
    160e:	5a 96       	adiw	r26, 0x1a	; 26
    1610:	2d 91       	ld	r18, X+
    1612:	3c 91       	ld	r19, X
    1614:	5b 97       	sbiw	r26, 0x1b	; 27
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	ab 81       	ldd	r26, Y+3	; 0x03
    1620:	bc 81       	ldd	r27, Y+4	; 0x04
    1622:	82 2b       	or	r24, r18
    1624:	93 2b       	or	r25, r19
    1626:	a4 2b       	or	r26, r20
    1628:	b5 2b       	or	r27, r21
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	ab 83       	std	Y+3, r26	; 0x03
    1630:	bc 83       	std	Y+4, r27	; 0x04

fileSize = dir->fileSize;
    1632:	db 01       	movw	r26, r22
    1634:	5c 96       	adiw	r26, 0x1c	; 28
    1636:	8d 90       	ld	r8, X+
    1638:	9d 90       	ld	r9, X+
    163a:	ad 90       	ld	r10, X+
    163c:	bc 90       	ld	r11, X
    163e:	5f 97       	sbiw	r26, 0x1f	; 31

TX_NEWLINE;
    1640:	8d e0       	ldi	r24, 0x0D	; 13
    1642:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1646:	8a e0       	ldi	r24, 0x0A	; 10
    1648:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
TX_NEWLINE;
    164c:	8d e0       	ldi	r24, 0x0D	; 13
    164e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1652:	8a e0       	ldi	r24, 0x0A	; 10
    1654:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    1658:	cc 24       	eor	r12, r12
    165a:	dd 24       	eor	r13, r13
    165c:	76 01       	movw	r14, r12
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    165e:	20 91 a5 02 	lds	r18, 0x02A5
    1662:	30 91 a6 02 	lds	r19, 0x02A6
    1666:	80 91 8d 00 	lds	r24, 0x008D
    166a:	90 91 8e 00 	lds	r25, 0x008E
    166e:	a0 91 8f 00 	lds	r26, 0x008F
    1672:	b0 91 90 00 	lds	r27, 0x0090
    1676:	8d 83       	std	Y+5, r24	; 0x05
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	af 83       	std	Y+7, r26	; 0x07
    167c:	b8 87       	std	Y+8, r27	; 0x08
    167e:	69 81       	ldd	r22, Y+1	; 0x01
    1680:	7a 81       	ldd	r23, Y+2	; 0x02
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	62 50       	subi	r22, 0x02	; 2
    1688:	70 40       	sbci	r23, 0x00	; 0
    168a:	80 40       	sbci	r24, 0x00	; 0
    168c:	90 40       	sbci	r25, 0x00	; 0
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
    1696:	2b 01       	movw	r4, r22
    1698:	3c 01       	movw	r6, r24
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	af 81       	ldd	r26, Y+7	; 0x07
    16a0:	b8 85       	ldd	r27, Y+8	; 0x08
    16a2:	48 0e       	add	r4, r24
    16a4:	59 1e       	adc	r5, r25
    16a6:	6a 1e       	adc	r6, r26
    16a8:	7b 1e       	adc	r7, r27

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    16aa:	80 91 a5 02 	lds	r24, 0x02A5
    16ae:	90 91 a6 02 	lds	r25, 0x02A6
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	91 f1       	breq	.+100    	; 0x171a <readFile+0x1b6>
    16b6:	10 e0       	ldi	r17, 0x00	; 0
  {
    SD_readSingleBlock(firstSector + j);
    16b8:	c3 01       	movw	r24, r6
    16ba:	b2 01       	movw	r22, r4
    16bc:	61 0f       	add	r22, r17
    16be:	71 1d       	adc	r23, r1
    16c0:	81 1d       	adc	r24, r1
    16c2:	91 1d       	adc	r25, r1
    16c4:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>
    
	for(k=0; k<512; k++)
    16c8:	22 24       	eor	r2, r2
    16ca:	33 24       	eor	r3, r3
    16cc:	0d c0       	rjmp	.+26     	; 0x16e8 <readFile+0x184>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    16ce:	08 94       	sec
    16d0:	c1 1c       	adc	r12, r1
    16d2:	d1 1c       	adc	r13, r1
    16d4:	e1 1c       	adc	r14, r1
    16d6:	f1 1c       	adc	r15, r1

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    16d8:	08 94       	sec
    16da:	21 1c       	adc	r2, r1
    16dc:	31 1c       	adc	r3, r1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	29 16       	cp	r2, r25
    16e2:	92 e0       	ldi	r25, 0x02	; 2
    16e4:	39 06       	cpc	r3, r25
    16e6:	79 f0       	breq	.+30     	; 0x1706 <readFile+0x1a2>
    {
      transmitByte(buffer[k]);
    16e8:	f1 01       	movw	r30, r2
    16ea:	eb 55       	subi	r30, 0x5B	; 91
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 81       	ld	r24, Z
    16f0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    16f4:	c8 14       	cp	r12, r8
    16f6:	d9 04       	cpc	r13, r9
    16f8:	ea 04       	cpc	r14, r10
    16fa:	fb 04       	cpc	r15, r11
    16fc:	40 f3       	brcs	.-48     	; 0x16ce <readFile+0x16a>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	53 cf       	rjmp	.-346    	; 0x15a8 <readFile+0x44>

dir = findFiles (GET_FILE, fileName); //get the file location
if(dir == 0) 
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	51 cf       	rjmp	.-350    	; 0x15a8 <readFile+0x44>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    1706:	1f 5f       	subi	r17, 0xFF	; 255
    1708:	20 91 a5 02 	lds	r18, 0x02A5
    170c:	30 91 a6 02 	lds	r19, 0x02A6
    1710:	81 2f       	mov	r24, r17
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	82 17       	cp	r24, r18
    1716:	93 07       	cpc	r25, r19
    1718:	78 f2       	brcs	.-98     	; 0x16b8 <readFile+0x154>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    171a:	69 81       	ldd	r22, Y+1	; 0x01
    171c:	7a 81       	ldd	r23, Y+2	; 0x02
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	00 e0       	ldi	r16, 0x00	; 0
    1726:	10 e0       	ldi	r17, 0x00	; 0
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	0e 94 83 03 	call	0x706	; 0x706 <getSetNextCluster>
    1730:	69 83       	std	Y+1, r22	; 0x01
    1732:	7a 83       	std	Y+2, r23	; 0x02
    1734:	8b 83       	std	Y+3, r24	; 0x03
    1736:	9c 83       	std	Y+4, r25	; 0x04
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    1738:	61 15       	cp	r22, r1
    173a:	71 05       	cpc	r23, r1
    173c:	81 05       	cpc	r24, r1
    173e:	91 05       	cpc	r25, r1
    1740:	09 f0       	breq	.+2      	; 0x1744 <readFile+0x1e0>
    1742:	8d cf       	rjmp	.-230    	; 0x165e <readFile+0xfa>
    1744:	89 e4       	ldi	r24, 0x49	; 73
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	2c cf       	rjmp	.-424    	; 0x15a8 <readFile+0x44>

00001750 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    1750:	2f 92       	push	r2
    1752:	3f 92       	push	r3
    1754:	4f 92       	push	r4
    1756:	5f 92       	push	r5
    1758:	6f 92       	push	r6
    175a:	7f 92       	push	r7
    175c:	8f 92       	push	r8
    175e:	9f 92       	push	r9
    1760:	af 92       	push	r10
    1762:	bf 92       	push	r11
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	2c 97       	sbiw	r28, 0x0c	; 12
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	2c 01       	movw	r4, r24
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	b2 01       	movw	r22, r4
    178a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <readFile>

if(j == 1) 
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	09 f4       	brne	.+2      	; 0x1794 <writeFile+0x44>
    1792:	92 c3       	rjmp	.+1828   	; 0x1eb8 <writeFile+0x768>
  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
//  appendFile();
//  return;
}
else if(j == 2) 
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	09 f4       	brne	.+2      	; 0x179a <writeFile+0x4a>
    1798:	e1 c1       	rjmp	.+962    	; 0x1b5c <writeFile+0x40c>
{
   return; //invalid file name
}
else
{
  TX_NEWLINE;
    179a:	8d e0       	ldi	r24, 0x0D	; 13
    179c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    17a0:	8a e0       	ldi	r24, 0x0A	; 10
    17a2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  transmitString_F(PSTR(" Creating File.."));
    17a6:	8e ef       	ldi	r24, 0xFE	; 254
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
  if(cluster > totalClusters)
    17be:	20 91 97 00 	lds	r18, 0x0097
    17c2:	30 91 98 00 	lds	r19, 0x0098
    17c6:	40 91 99 00 	lds	r20, 0x0099
    17ca:	50 91 9a 00 	lds	r21, 0x009A
    17ce:	26 17       	cp	r18, r22
    17d0:	37 07       	cpc	r19, r23
    17d2:	48 07       	cpc	r20, r24
    17d4:	59 07       	cpc	r21, r25
    17d6:	40 f4       	brcc	.+16     	; 0x17e8 <writeFile+0x98>
     cluster = rootCluster;
    17d8:	60 91 9b 00 	lds	r22, 0x009B
    17dc:	70 91 9c 00 	lds	r23, 0x009C
    17e0:	80 91 9d 00 	lds	r24, 0x009D
    17e4:	90 91 9e 00 	lds	r25, 0x009E

  cluster = searchNextFreeCluster(cluster);
    17e8:	0e 94 ed 05 	call	0xbda	; 0xbda <searchNextFreeCluster>
    17ec:	3b 01       	movw	r6, r22
    17ee:	4c 01       	movw	r8, r24
   if(cluster == 0)
    17f0:	61 15       	cp	r22, r1
    17f2:	71 05       	cpc	r23, r1
    17f4:	81 05       	cpc	r24, r1
    17f6:	91 05       	cpc	r25, r1
    17f8:	09 f4       	brne	.+2      	; 0x17fc <writeFile+0xac>
    17fa:	c9 c1       	rjmp	.+914    	; 0x1b8e <writeFile+0x43e>
   {
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0f ef       	ldi	r16, 0xFF	; 255
    1800:	1f ef       	ldi	r17, 0xFF	; 255
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	3f e0       	ldi	r19, 0x0F	; 15
    1806:	0e 94 83 03 	call	0x706	; 0x706 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    180a:	9a 82       	std	Y+2, r9	; 0x02
    180c:	89 82       	std	Y+1, r8	; 0x01
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    180e:	13 01       	movw	r2, r6
  fileSize = 0;
    1810:	10 92 91 00 	sts	0x0091, r1
    1814:	10 92 92 00 	sts	0x0092, r1
    1818:	10 92 93 00 	sts	0x0093, r1
    181c:	10 92 94 00 	sts	0x0094, r1
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
    1820:	10 e0       	ldi	r17, 0x00	; 0
    1822:	aa 24       	eor	r10, r10
    1824:	bb 24       	eor	r11, r11



while(1)
{
   if(start)
    1826:	aa 20       	and	r10, r10
    1828:	09 f0       	breq	.+2      	; 0x182c <writeFile+0xdc>
    182a:	34 c2       	rjmp	.+1128   	; 0x1c94 <writeFile+0x544>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    182c:	20 91 a5 02 	lds	r18, 0x02A5
    1830:	30 91 a6 02 	lds	r19, 0x02A6
    1834:	c0 90 8d 00 	lds	r12, 0x008D
    1838:	d0 90 8e 00 	lds	r13, 0x008E
    183c:	e0 90 8f 00 	lds	r14, 0x008F
    1840:	f0 90 90 00 	lds	r15, 0x0090
    1844:	c4 01       	movw	r24, r8
    1846:	b3 01       	movw	r22, r6
    1848:	62 50       	subi	r22, 0x02	; 2
    184a:	70 40       	sbci	r23, 0x00	; 0
    184c:	80 40       	sbci	r24, 0x00	; 0
    184e:	90 40       	sbci	r25, 0x00	; 0
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
    1858:	6c 0d       	add	r22, r12
    185a:	7d 1d       	adc	r23, r13
    185c:	8e 1d       	adc	r24, r14
    185e:	9f 1d       	adc	r25, r15
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    1860:	60 93 a1 00 	sts	0x00A1, r22
    1864:	70 93 a2 00 	sts	0x00A2, r23
    1868:	80 93 a3 00 	sts	0x00A3, r24
    186c:	90 93 a4 00 	sts	0x00A4, r25
	  i=0;
    1870:	ee 24       	eor	r14, r14
    1872:	ff 24       	eor	r15, r15
	  j=0;
    1874:	cc 24       	eor	r12, r12
   }
   

   TX_NEWLINE;
    1876:	8d e0       	ldi	r24, 0x0D	; 13
    1878:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    187c:	8a e0       	ldi	r24, 0x0A	; 10
    187e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
   transmitString_F(PSTR(" Enter text (end with ~):"));
    1882:	82 ed       	ldi	r24, 0xD2	; 210
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    188a:	4b 2d       	mov	r20, r11
    188c:	41 30       	cpi	r20, 0x01	; 1
    188e:	09 f4       	brne	.+2      	; 0x1892 <writeFile+0x142>
    1890:	df c1       	rjmp	.+958    	; 0x1c50 <writeFile+0x500>
		fileSize++;
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    1892:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    1896:	18 2f       	mov	r17, r24
	 if(data == 0x08)	//'Back Space' key pressed
    1898:	88 30       	cpi	r24, 0x08	; 8
    189a:	39 f5       	brne	.+78     	; 0x18ea <writeFile+0x19a>
	 { 
	   if(i != 0)
    189c:	e1 14       	cp	r14, r1
    189e:	f1 04       	cpc	r15, r1
    18a0:	c1 f3       	breq	.-16     	; 0x1892 <writeFile+0x142>
	   { 
	     transmitByte(data);
    18a2:	88 e0       	ldi	r24, 0x08	; 8
    18a4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
		 transmitByte(' '); 
    18a8:	80 e2       	ldi	r24, 0x20	; 32
    18aa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	     transmitByte(data); 
    18ae:	88 e0       	ldi	r24, 0x08	; 8
    18b0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	     i--; 
    18b4:	08 94       	sec
    18b6:	e1 08       	sbc	r14, r1
    18b8:	f1 08       	sbc	r15, r1
		 fileSize--;
    18ba:	80 91 91 00 	lds	r24, 0x0091
    18be:	90 91 92 00 	lds	r25, 0x0092
    18c2:	a0 91 93 00 	lds	r26, 0x0093
    18c6:	b0 91 94 00 	lds	r27, 0x0094
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	a1 09       	sbc	r26, r1
    18ce:	b1 09       	sbc	r27, r1
    18d0:	80 93 91 00 	sts	0x0091, r24
    18d4:	90 93 92 00 	sts	0x0092, r25
    18d8:	a0 93 93 00 	sts	0x0093, r26
    18dc:	b0 93 94 00 	sts	0x0094, r27
		fileSize++;
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    18e0:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    18e4:	18 2f       	mov	r17, r24
	 if(data == 0x08)	//'Back Space' key pressed
    18e6:	88 30       	cpi	r24, 0x08	; 8
    18e8:	c9 f2       	breq	.-78     	; 0x189c <writeFile+0x14c>
	     i--; 
		 fileSize--;
	   } 
	   continue;     
	 }
	 transmitByte(data);
    18ea:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
     buffer[i++] = data;
    18ee:	f7 01       	movw	r30, r14
    18f0:	eb 55       	subi	r30, 0x5B	; 91
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	10 83       	st	Z, r17
    18f6:	08 94       	sec
    18f8:	e1 1c       	adc	r14, r1
    18fa:	f1 1c       	adc	r15, r1
	 fileSize++;
    18fc:	80 91 91 00 	lds	r24, 0x0091
    1900:	90 91 92 00 	lds	r25, 0x0092
    1904:	a0 91 93 00 	lds	r26, 0x0093
    1908:	b0 91 94 00 	lds	r27, 0x0094
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	a1 1d       	adc	r26, r1
    1910:	b1 1d       	adc	r27, r1
    1912:	80 93 91 00 	sts	0x0091, r24
    1916:	90 93 92 00 	sts	0x0092, r25
    191a:	a0 93 93 00 	sts	0x0093, r26
    191e:	b0 93 94 00 	sts	0x0094, r27
     if(data == '\r')  //'Carriege Return (CR)' character
    1922:	1d 30       	cpi	r17, 0x0D	; 13
    1924:	09 f4       	brne	.+2      	; 0x1928 <writeFile+0x1d8>
    1926:	3e c1       	rjmp	.+636    	; 0x1ba4 <writeFile+0x454>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	e8 16       	cp	r14, r24
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	f8 06       	cpc	r15, r24
    1930:	08 f0       	brcs	.+2      	; 0x1934 <writeFile+0x1e4>
    1932:	62 c1       	rjmp	.+708    	; 0x1bf8 <writeFile+0x4a8>
    1934:	bb 24       	eor	r11, r11
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');
    1936:	1e 37       	cpi	r17, 0x7E	; 126
    1938:	09 f0       	breq	.+2      	; 0x193c <writeFile+0x1ec>
    193a:	a7 cf       	rjmp	.-178    	; 0x188a <writeFile+0x13a>
    193c:	93 01       	movw	r18, r6
    193e:	a4 01       	movw	r20, r8

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
    1940:	80 91 91 00 	lds	r24, 0x0091
    1944:	90 91 92 00 	lds	r25, 0x0092
    1948:	a0 91 93 00 	lds	r26, 0x0093
    194c:	b0 91 94 00 	lds	r27, 0x0094
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	a1 09       	sbc	r26, r1
    1954:	b1 09       	sbc	r27, r1
    1956:	80 93 91 00 	sts	0x0091, r24
    195a:	90 93 92 00 	sts	0x0092, r25
    195e:	a0 93 93 00 	sts	0x0093, r26
    1962:	b0 93 94 00 	sts	0x0094, r27
	  i--;
    1966:	b7 01       	movw	r22, r14
    1968:	61 50       	subi	r22, 0x01	; 1
    196a:	70 40       	sbci	r23, 0x00	; 0
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    196c:	92 e0       	ldi	r25, 0x02	; 2
    196e:	60 30       	cpi	r22, 0x00	; 0
    1970:	79 07       	cpc	r23, r25
    1972:	50 f4       	brcc	.+20     	; 0x1988 <writeFile+0x238>
        buffer[i]= 0x00;
    1974:	fb 01       	movw	r30, r22
    1976:	eb 55       	subi	r30, 0x5B	; 91
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	10 82       	st	Z, r1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    197c:	6f 5f       	subi	r22, 0xFF	; 255
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	a2 e0       	ldi	r26, 0x02	; 2
    1982:	60 30       	cpi	r22, 0x00	; 0
    1984:	7a 07       	cpc	r23, r26
    1986:	b1 f7       	brne	.-20     	; 0x1974 <writeFile+0x224>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    1988:	60 91 a1 00 	lds	r22, 0x00A1
    198c:	70 91 a2 00 	lds	r23, 0x00A2
    1990:	80 91 a3 00 	lds	r24, 0x00A3
    1994:	90 91 a4 00 	lds	r25, 0x00A4
    1998:	2f 83       	std	Y+7, r18	; 0x07
    199a:	38 87       	std	Y+8, r19	; 0x08
    199c:	49 87       	std	Y+9, r20	; 0x09
    199e:	5a 87       	std	Y+10, r21	; 0x0a
    19a0:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	2f 81       	ldd	r18, Y+7	; 0x07
    19aa:	38 85       	ldd	r19, Y+8	; 0x08
    19ac:	49 85       	ldd	r20, Y+9	; 0x09
    19ae:	5a 85       	ldd	r21, Y+10	; 0x0a
    19b0:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>

error = getDateTime_FAT();    //get current date & time from the RTC
    19b4:	0e 94 92 13 	call	0x2724	; 0x2724 <getDateTime_FAT>
if(error) { dateFAT = 0; timeFAT = 0;}
    19b8:	88 23       	and	r24, r24
    19ba:	41 f0       	breq	.+16     	; 0x19cc <writeFile+0x27c>
    19bc:	10 92 8c 00 	sts	0x008C, r1
    19c0:	10 92 8b 00 	sts	0x008B, r1
    19c4:	10 92 a0 00 	sts	0x00A0, r1
    19c8:	10 92 9f 00 	sts	0x009F, r1

if(appendFile)  //executes this loop if file is to be appended
    19cc:	aa 20       	and	r10, r10
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <writeFile+0x282>
    19d0:	d0 c1       	rjmp	.+928    	; 0x1d72 <writeFile+0x622>
  return;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    19d2:	80 91 9b 00 	lds	r24, 0x009B
    19d6:	90 91 9c 00 	lds	r25, 0x009C
    19da:	a0 91 9d 00 	lds	r26, 0x009D
    19de:	b0 91 9e 00 	lds	r27, 0x009E
    19e2:	8b 83       	std	Y+3, r24	; 0x03
    19e4:	9c 83       	std	Y+4, r25	; 0x04
    19e6:	ad 83       	std	Y+5, r26	; 0x05
    19e8:	be 83       	std	Y+6, r27	; 0x06
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
    19ea:	aa 24       	eor	r10, r10

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    19ec:	20 e2       	ldi	r18, 0x20	; 32
    19ee:	b2 2e       	mov	r11, r18
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    19f0:	20 91 a5 02 	lds	r18, 0x02A5
    19f4:	30 91 a6 02 	lds	r19, 0x02A6
    19f8:	c0 90 8d 00 	lds	r12, 0x008D
    19fc:	d0 90 8e 00 	lds	r13, 0x008E
    1a00:	e0 90 8f 00 	lds	r14, 0x008F
    1a04:	f0 90 90 00 	lds	r15, 0x0090
    1a08:	6b 81       	ldd	r22, Y+3	; 0x03
    1a0a:	7c 81       	ldd	r23, Y+4	; 0x04
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a10:	62 50       	subi	r22, 0x02	; 2
    1a12:	70 40       	sbci	r23, 0x00	; 0
    1a14:	80 40       	sbci	r24, 0x00	; 0
    1a16:	90 40       	sbci	r25, 0x00	; 0
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
    1a20:	3b 01       	movw	r6, r22
    1a22:	4c 01       	movw	r8, r24
    1a24:	6c 0c       	add	r6, r12
    1a26:	7d 1c       	adc	r7, r13
    1a28:	8e 1c       	adc	r8, r14
    1a2a:	9f 1c       	adc	r9, r15

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1a2c:	80 91 a5 02 	lds	r24, 0x02A5
    1a30:	90 91 a6 02 	lds	r25, 0x02A6
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <writeFile+0x2ea>
    1a38:	fc c1       	rjmp	.+1016   	; 0x1e32 <writeFile+0x6e2>
    1a3a:	10 e0       	ldi	r17, 0x00	; 0
   {
     SD_readSingleBlock (firstSector + sector);
    1a3c:	74 01       	movw	r14, r8
    1a3e:	63 01       	movw	r12, r6
    1a40:	c1 0e       	add	r12, r17
    1a42:	d1 1c       	adc	r13, r1
    1a44:	e1 1c       	adc	r14, r1
    1a46:	f1 1c       	adc	r15, r1
    1a48:	c7 01       	movw	r24, r14
    1a4a:	b6 01       	movw	r22, r12
    1a4c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
    1a50:	80 91 95 00 	lds	r24, 0x0095
    1a54:	90 91 96 00 	lds	r25, 0x0096
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <writeFile+0x30e>
    1a5c:	df c1       	rjmp	.+958    	; 0x1e1c <writeFile+0x6cc>
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1a5e:	aa 20       	and	r10, r10
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <writeFile+0x314>
    1a62:	7c c0       	rjmp	.+248    	; 0x1b5c <writeFile+0x40c>
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    1a64:	e5 ea       	ldi	r30, 0xA5	; 165
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1a68:	1c 86       	std	Y+12, r1	; 0x0c
    1a6a:	1b 86       	std	Y+11, r1	; 0x0b
    1a6c:	19 c0       	rjmp	.+50     	; 0x1aa0 <writeFile+0x350>
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    1a6e:	85 3e       	cpi	r24, 0xE5	; 229
    1a70:	d1 f0       	breq	.+52     	; 0x1aa6 <writeFile+0x356>
    1a72:	20 e0       	ldi	r18, 0x00	; 0
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1a74:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a76:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a78:	80 96       	adiw	r24, 0x20	; 32
    1a7a:	9c 87       	std	Y+12, r25	; 0x0c
    1a7c:	8b 87       	std	Y+11, r24	; 0x0b
    1a7e:	80 91 95 00 	lds	r24, 0x0095
    1a82:	90 91 96 00 	lds	r25, 0x0096
    1a86:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a88:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a8a:	a8 17       	cp	r26, r24
    1a8c:	b9 07       	cpc	r27, r25
    1a8e:	08 f0       	brcs	.+2      	; 0x1a92 <writeFile+0x342>
    1a90:	c4 c1       	rjmp	.+904    	; 0x1e1a <writeFile+0x6ca>
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1a92:	22 23       	and	r18, r18
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <writeFile+0x348>
    1a96:	62 c0       	rjmp	.+196    	; 0x1b5c <writeFile+0x40c>
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
    1a98:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a9a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a9c:	eb 55       	subi	r30, 0x5B	; 91
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 23       	and	r24, r24
    1aa4:	21 f7       	brne	.-56     	; 0x1a6e <writeFile+0x31e>
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    1aa8:	82 2f       	mov	r24, r18
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	af 01       	movw	r20, r30
    1aae:	48 0f       	add	r20, r24
    1ab0:	59 1f       	adc	r21, r25
    1ab2:	84 0d       	add	r24, r4
    1ab4:	95 1d       	adc	r25, r5
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	8c 91       	ld	r24, X
    1aba:	da 01       	movw	r26, r20
    1abc:	8c 93       	st	X, r24
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    1abe:	2f 5f       	subi	r18, 0xFF	; 255
    1ac0:	2b 30       	cpi	r18, 0x0B	; 11
    1ac2:	91 f7       	brne	.-28     	; 0x1aa8 <writeFile+0x358>
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1ac4:	b3 86       	std	Z+11, r11	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    1ac6:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    1ac8:	15 86       	std	Z+13, r1	; 0x0d
		  dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
    1aca:	20 91 9f 00 	lds	r18, 0x009F
    1ace:	30 91 a0 00 	lds	r19, 0x00A0
    1ad2:	37 87       	std	Z+15, r19	; 0x0f
    1ad4:	26 87       	std	Z+14, r18	; 0x0e
		  dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
    1ad6:	80 91 8b 00 	lds	r24, 0x008B
    1ada:	90 91 8c 00 	lds	r25, 0x008C
    1ade:	91 8b       	std	Z+17, r25	; 0x11
    1ae0:	80 8b       	std	Z+16, r24	; 0x10
		  dir->lastAccessDate = 0;   	//date of last access ignored
    1ae2:	13 8a       	std	Z+19, r1	; 0x13
    1ae4:	12 8a       	std	Z+18, r1	; 0x12
		  dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
    1ae6:	37 8b       	std	Z+23, r19	; 0x17
    1ae8:	26 8b       	std	Z+22, r18	; 0x16
		  dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
    1aea:	91 8f       	std	Z+25, r25	; 0x19
    1aec:	80 8f       	std	Z+24, r24	; 0x18
		  dir->firstClusterHI = firstClusterHigh;
    1aee:	49 81       	ldd	r20, Y+1	; 0x01
    1af0:	5a 81       	ldd	r21, Y+2	; 0x02
    1af2:	55 8b       	std	Z+21, r21	; 0x15
    1af4:	44 8b       	std	Z+20, r20	; 0x14
		  dir->firstClusterLO = firstClusterLow;
    1af6:	33 8e       	std	Z+27, r3	; 0x1b
    1af8:	22 8e       	std	Z+26, r2	; 0x1a
		  dir->fileSize = fileSize;
    1afa:	80 91 91 00 	lds	r24, 0x0091
    1afe:	90 91 92 00 	lds	r25, 0x0092
    1b02:	a0 91 93 00 	lds	r26, 0x0093
    1b06:	b0 91 94 00 	lds	r27, 0x0094
    1b0a:	84 8f       	std	Z+28, r24	; 0x1c
    1b0c:	95 8f       	std	Z+29, r25	; 0x1d
    1b0e:	a6 8f       	std	Z+30, r26	; 0x1e
    1b10:	b7 8f       	std	Z+31, r27	; 0x1f

		  SD_writeSingleBlock (firstSector + sector);
    1b12:	c7 01       	movw	r24, r14
    1b14:	b6 01       	movw	r22, r12
    1b16:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <SD_writeSingleBlock>
		  fileCreatedFlag = 1;

		  TX_NEWLINE;
    1b1a:	8d e0       	ldi	r24, 0x0D	; 13
    1b1c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1b20:	8a e0       	ldi	r24, 0x0A	; 10
    1b22:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
		  TX_NEWLINE;
    1b26:	8d e0       	ldi	r24, 0x0D	; 13
    1b28:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1b2c:	8a e0       	ldi	r24, 0x0A	; 10
    1b2e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
		  transmitString_F(PSTR(" File Created! "));
    1b32:	80 ea       	ldi	r24, 0xA0	; 160
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    1b3a:	40 91 91 00 	lds	r20, 0x0091
    1b3e:	50 91 92 00 	lds	r21, 0x0092
    1b42:	60 91 93 00 	lds	r22, 0x0093
    1b46:	70 91 94 00 	lds	r23, 0x0094
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	0e 94 29 08 	call	0x1052	; 0x1052 <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
    1b50:	21 e0       	ldi	r18, 0x01	; 1
    1b52:	90 cf       	rjmp	.-224    	; 0x1a74 <writeFile+0x324>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    1b54:	8b e8       	ldi	r24, 0x8B	; 139
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
   
   prevCluster = cluster;
 }
 
 return;
}
    1b5c:	2c 96       	adiw	r28, 0x0c	; 12
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	1f 91       	pop	r17
    1b6e:	0f 91       	pop	r16
    1b70:	ff 90       	pop	r15
    1b72:	ef 90       	pop	r14
    1b74:	df 90       	pop	r13
    1b76:	cf 90       	pop	r12
    1b78:	bf 90       	pop	r11
    1b7a:	af 90       	pop	r10
    1b7c:	9f 90       	pop	r9
    1b7e:	8f 90       	pop	r8
    1b80:	7f 90       	pop	r7
    1b82:	6f 90       	pop	r6
    1b84:	5f 90       	pop	r5
    1b86:	4f 90       	pop	r4
    1b88:	3f 90       	pop	r3
    1b8a:	2f 90       	pop	r2
    1b8c:	08 95       	ret
     cluster = rootCluster;

  cluster = searchNextFreeCluster(cluster);
   if(cluster == 0)
   {
      TX_NEWLINE;
    1b8e:	8d e0       	ldi	r24, 0x0D	; 13
    1b90:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1b94:	8a e0       	ldi	r24, 0x0A	; 10
    1b96:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1b9a:	8c ee       	ldi	r24, 0xEC	; 236
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
	  return;
    1ba2:	dc cf       	rjmp	.-72     	; 0x1b5c <writeFile+0x40c>
	 transmitByte(data);
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
    1ba4:	50 e0       	ldi	r21, 0x00	; 0
    1ba6:	e5 16       	cp	r14, r21
    1ba8:	52 e0       	ldi	r21, 0x02	; 2
    1baa:	f5 06       	cpc	r15, r21
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <writeFile+0x460>
    1bae:	6f c0       	rjmp	.+222    	; 0x1c8e <writeFile+0x53e>
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
    1bb0:	8a e0       	ldi	r24, 0x0A	; 10
    1bb2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1bb6:	f7 01       	movw	r30, r14
    1bb8:	eb 55       	subi	r30, 0x5B	; 91
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	8a e0       	ldi	r24, 0x0A	; 10
    1bbe:	80 83       	st	Z, r24
    1bc0:	08 94       	sec
    1bc2:	e1 1c       	adc	r14, r1
    1bc4:	f1 1c       	adc	r15, r1
		   fileSize++;
    1bc6:	80 91 91 00 	lds	r24, 0x0091
    1bca:	90 91 92 00 	lds	r25, 0x0092
    1bce:	a0 91 93 00 	lds	r26, 0x0093
    1bd2:	b0 91 94 00 	lds	r27, 0x0094
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	a1 1d       	adc	r26, r1
    1bda:	b1 1d       	adc	r27, r1
    1bdc:	80 93 91 00 	sts	0x0091, r24
    1be0:	90 93 92 00 	sts	0x0092, r25
    1be4:	a0 93 93 00 	sts	0x0093, r26
    1be8:	b0 93 94 00 	sts	0x0094, r27
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	e8 16       	cp	r14, r24
    1bf0:	82 e0       	ldi	r24, 0x02	; 2
    1bf2:	f8 06       	cpc	r15, r24
    1bf4:	08 f4       	brcc	.+2      	; 0x1bf8 <writeFile+0x4a8>
    1bf6:	9e ce       	rjmp	.-708    	; 0x1934 <writeFile+0x1e4>
    1bf8:	bb 24       	eor	r11, r11
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    1bfa:	60 91 a1 00 	lds	r22, 0x00A1
    1bfe:	70 91 a2 00 	lds	r23, 0x00A2
    1c02:	80 91 a3 00 	lds	r24, 0x00A3
    1c06:	90 91 a4 00 	lds	r25, 0x00A4
    1c0a:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <SD_writeSingleBlock>
       j++;
    1c0e:	c3 94       	inc	r12
	   if(j == sectorPerCluster) {j = 0; break;}
    1c10:	80 91 a5 02 	lds	r24, 0x02A5
    1c14:	90 91 a6 02 	lds	r25, 0x02A6
    1c18:	2c 2d       	mov	r18, r12
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	28 17       	cp	r18, r24
    1c1e:	39 07       	cpc	r19, r25
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <writeFile+0x4d4>
    1c22:	7b c0       	rjmp	.+246    	; 0x1d1a <writeFile+0x5ca>
	   startBlock++; 
    1c24:	80 91 a1 00 	lds	r24, 0x00A1
    1c28:	90 91 a2 00 	lds	r25, 0x00A2
    1c2c:	a0 91 a3 00 	lds	r26, 0x00A3
    1c30:	b0 91 a4 00 	lds	r27, 0x00A4
    1c34:	01 96       	adiw	r24, 0x01	; 1
    1c36:	a1 1d       	adc	r26, r1
    1c38:	b1 1d       	adc	r27, r1
    1c3a:	80 93 a1 00 	sts	0x00A1, r24
    1c3e:	90 93 a2 00 	sts	0x00A2, r25
    1c42:	a0 93 a3 00 	sts	0x00A3, r26
    1c46:	b0 93 a4 00 	sts	0x00A4, r27
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    1c4a:	ee 24       	eor	r14, r14
    1c4c:	ff 24       	eor	r15, r15
    1c4e:	73 ce       	rjmp	.-794    	; 0x1936 <writeFile+0x1e6>
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
	 {
	 	transmitByte ('\n');
    1c50:	8a e0       	ldi	r24, 0x0A	; 10
    1c52:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1c56:	f7 01       	movw	r30, r14
    1c58:	eb 55       	subi	r30, 0x5B	; 91
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	8a e0       	ldi	r24, 0x0A	; 10
    1c5e:	80 83       	st	Z, r24
    1c60:	08 94       	sec
    1c62:	e1 1c       	adc	r14, r1
    1c64:	f1 1c       	adc	r15, r1
		fileSize++;
    1c66:	80 91 91 00 	lds	r24, 0x0091
    1c6a:	90 91 92 00 	lds	r25, 0x0092
    1c6e:	a0 91 93 00 	lds	r26, 0x0093
    1c72:	b0 91 94 00 	lds	r27, 0x0094
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	a1 1d       	adc	r26, r1
    1c7a:	b1 1d       	adc	r27, r1
    1c7c:	80 93 91 00 	sts	0x0091, r24
    1c80:	90 93 92 00 	sts	0x0092, r25
    1c84:	a0 93 93 00 	sts	0x0093, r26
    1c88:	b0 93 94 00 	sts	0x0094, r27
    1c8c:	02 ce       	rjmp	.-1020   	; 0x1892 <writeFile+0x142>
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    1c8e:	bb 24       	eor	r11, r11
    1c90:	b3 94       	inc	r11
    1c92:	b3 cf       	rjmp	.-154    	; 0x1bfa <writeFile+0x4aa>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1c94:	20 91 a5 02 	lds	r18, 0x02A5
    1c98:	30 91 a6 02 	lds	r19, 0x02A6
    1c9c:	c0 90 8d 00 	lds	r12, 0x008D
    1ca0:	d0 90 8e 00 	lds	r13, 0x008E
    1ca4:	e0 90 8f 00 	lds	r14, 0x008F
    1ca8:	f0 90 90 00 	lds	r15, 0x0090
    1cac:	c1 0e       	add	r12, r17
    1cae:	d1 1c       	adc	r13, r1
    1cb0:	e1 1c       	adc	r14, r1
    1cb2:	f1 1c       	adc	r15, r1
    1cb4:	c4 01       	movw	r24, r8
    1cb6:	b3 01       	movw	r22, r6
    1cb8:	62 50       	subi	r22, 0x02	; 2
    1cba:	70 40       	sbci	r23, 0x00	; 0
    1cbc:	80 40       	sbci	r24, 0x00	; 0
    1cbe:	90 40       	sbci	r25, 0x00	; 0
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    1cc8:	c6 0e       	add	r12, r22
    1cca:	d7 1e       	adc	r13, r23
    1ccc:	e8 1e       	adc	r14, r24
    1cce:	f9 1e       	adc	r15, r25
    1cd0:	c0 92 a1 00 	sts	0x00A1, r12
    1cd4:	d0 92 a2 00 	sts	0x00A2, r13
    1cd8:	e0 92 a3 00 	sts	0x00A3, r14
    1cdc:	f0 92 a4 00 	sts	0x00A4, r15
	  SD_readSingleBlock (startBlock);
    1ce0:	60 91 a1 00 	lds	r22, 0x00A1
    1ce4:	70 91 a2 00 	lds	r23, 0x00A2
    1ce8:	80 91 a3 00 	lds	r24, 0x00A3
    1cec:	90 91 a4 00 	lds	r25, 0x00A4
    1cf0:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    1cf4:	20 91 95 00 	lds	r18, 0x0095
    1cf8:	30 91 96 00 	lds	r19, 0x0096
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	60 91 91 00 	lds	r22, 0x0091
    1d04:	70 91 92 00 	lds	r23, 0x0092
    1d08:	80 91 93 00 	lds	r24, 0x0093
    1d0c:	90 91 94 00 	lds	r25, 0x0094
    1d10:	0e 94 40 1a 	call	0x3480	; 0x3480 <__udivmodsi4>
    1d14:	7b 01       	movw	r14, r22
	  j = sector;
    1d16:	c1 2e       	mov	r12, r17
    1d18:	ae cd       	rjmp	.-1188   	; 0x1876 <writeFile+0x126>
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');

   if(data == '~') 
    1d1a:	1e 37       	cpi	r17, 0x7E	; 126
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <writeFile+0x5d0>
    1d1e:	2a c1       	rjmp	.+596    	; 0x1f74 <writeFile+0x824>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    1d20:	c4 01       	movw	r24, r8
    1d22:	b3 01       	movw	r22, r6
    1d24:	0e 94 ed 05 	call	0xbda	; 0xbda <searchNextFreeCluster>
    1d28:	6b 01       	movw	r12, r22
    1d2a:	7c 01       	movw	r14, r24

   if(cluster == 0)
    1d2c:	61 15       	cp	r22, r1
    1d2e:	71 05       	cpc	r23, r1
    1d30:	81 05       	cpc	r24, r1
    1d32:	91 05       	cpc	r25, r1
    1d34:	99 f0       	breq	.+38     	; 0x1d5c <writeFile+0x60c>
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    1d36:	c4 01       	movw	r24, r8
    1d38:	b3 01       	movw	r22, r6
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	97 01       	movw	r18, r14
    1d3e:	86 01       	movw	r16, r12
    1d40:	0e 94 83 03 	call	0x706	; 0x706 <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1d44:	c7 01       	movw	r24, r14
    1d46:	b6 01       	movw	r22, r12
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	0f ef       	ldi	r16, 0xFF	; 255
    1d4c:	1f ef       	ldi	r17, 0xFF	; 255
    1d4e:	2f ef       	ldi	r18, 0xFF	; 255
    1d50:	3f e0       	ldi	r19, 0x0F	; 15
    1d52:	0e 94 83 03 	call	0x706	; 0x706 <getSetNextCluster>
}        
    1d56:	36 01       	movw	r6, r12
    1d58:	47 01       	movw	r8, r14
    1d5a:	68 cd       	rjmp	.-1328   	; 0x182c <writeFile+0xdc>

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster

   if(cluster == 0)
   {
      TX_NEWLINE;
    1d5c:	8d e0       	ldi	r24, 0x0D	; 13
    1d5e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1d62:	8a e0       	ldi	r24, 0x0A	; 10
    1d64:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1d68:	80 ec       	ldi	r24, 0xC0	; 192
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
	  return;
    1d70:	f5 ce       	rjmp	.-534    	; 0x1b5c <writeFile+0x40c>
error = getDateTime_FAT();    //get current date & time from the RTC
if(error) { dateFAT = 0; timeFAT = 0;}

if(appendFile)  //executes this loop if file is to be appended
{
  SD_readSingleBlock (appendFileSector);    
    1d72:	60 91 b8 02 	lds	r22, 0x02B8
    1d76:	70 91 b9 02 	lds	r23, 0x02B9
    1d7a:	80 91 ba 02 	lds	r24, 0x02BA
    1d7e:	90 91 bb 02 	lds	r25, 0x02BB
    1d82:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    1d86:	e0 91 87 00 	lds	r30, 0x0087
    1d8a:	f0 91 88 00 	lds	r31, 0x0088
    1d8e:	eb 55       	subi	r30, 0x5B	; 91
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255

  dir->lastAccessDate = 0;   //date of last access ignored
    1d92:	13 8a       	std	Z+19, r1	; 0x13
    1d94:	12 8a       	std	Z+18, r1	; 0x12
  dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
    1d96:	80 91 9f 00 	lds	r24, 0x009F
    1d9a:	90 91 a0 00 	lds	r25, 0x00A0
    1d9e:	97 8b       	std	Z+23, r25	; 0x17
    1da0:	86 8b       	std	Z+22, r24	; 0x16
  dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
    1da2:	80 91 8b 00 	lds	r24, 0x008B
    1da6:	90 91 8c 00 	lds	r25, 0x008C
    1daa:	91 8f       	std	Z+25, r25	; 0x19
    1dac:	80 8f       	std	Z+24, r24	; 0x18
  extraMemory = fileSize - dir->fileSize;
    1dae:	80 91 91 00 	lds	r24, 0x0091
    1db2:	90 91 92 00 	lds	r25, 0x0092
    1db6:	a0 91 93 00 	lds	r26, 0x0093
    1dba:	b0 91 94 00 	lds	r27, 0x0094
    1dbe:	24 8d       	ldd	r18, Z+28	; 0x1c
    1dc0:	35 8d       	ldd	r19, Z+29	; 0x1d
    1dc2:	46 8d       	ldd	r20, Z+30	; 0x1e
    1dc4:	57 8d       	ldd	r21, Z+31	; 0x1f
    1dc6:	6c 01       	movw	r12, r24
    1dc8:	7d 01       	movw	r14, r26
    1dca:	c2 1a       	sub	r12, r18
    1dcc:	d3 0a       	sbc	r13, r19
    1dce:	e4 0a       	sbc	r14, r20
    1dd0:	f5 0a       	sbc	r15, r21
  dir->fileSize = fileSize;
    1dd2:	84 8f       	std	Z+28, r24	; 0x1c
    1dd4:	95 8f       	std	Z+29, r25	; 0x1d
    1dd6:	a6 8f       	std	Z+30, r26	; 0x1e
    1dd8:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    1dda:	60 91 b8 02 	lds	r22, 0x02B8
    1dde:	70 91 b9 02 	lds	r23, 0x02B9
    1de2:	80 91 ba 02 	lds	r24, 0x02BA
    1de6:	90 91 bb 02 	lds	r25, 0x02BB
    1dea:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	b7 01       	movw	r22, r14
    1df2:	a6 01       	movw	r20, r12
    1df4:	0e 94 29 08 	call	0x1052	; 0x1052 <freeMemoryUpdate>

  
  TX_NEWLINE;
    1df8:	8d e0       	ldi	r24, 0x0D	; 13
    1dfa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1dfe:	8a e0       	ldi	r24, 0x0A	; 10
    1e00:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  transmitString_F(PSTR(" File appended!"));
    1e04:	80 eb       	ldi	r24, 0xB0	; 176
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  TX_NEWLINE;
    1e0c:	8d e0       	ldi	r24, 0x0D	; 13
    1e0e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    1e12:	8a e0       	ldi	r24, 0x0A	; 10
    1e14:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>

  return;
    1e18:	a1 ce       	rjmp	.-702    	; 0x1b5c <writeFile+0x40c>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1e1a:	a2 2e       	mov	r10, r18

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1e1c:	1f 5f       	subi	r17, 0xFF	; 255
    1e1e:	80 91 a5 02 	lds	r24, 0x02A5
    1e22:	90 91 a6 02 	lds	r25, 0x02A6
    1e26:	21 2f       	mov	r18, r17
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	28 17       	cp	r18, r24
    1e2c:	39 07       	cpc	r19, r25
    1e2e:	08 f4       	brcc	.+2      	; 0x1e32 <writeFile+0x6e2>
    1e30:	05 ce       	rjmp	.-1014   	; 0x1a3c <writeFile+0x2ec>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1e32:	6b 81       	ldd	r22, Y+3	; 0x03
    1e34:	7c 81       	ldd	r23, Y+4	; 0x04
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	00 e0       	ldi	r16, 0x00	; 0
    1e3e:	10 e0       	ldi	r17, 0x00	; 0
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	0e 94 83 03 	call	0x706	; 0x706 <getSetNextCluster>
    1e48:	6b 01       	movw	r12, r22
    1e4a:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    1e4c:	67 3f       	cpi	r22, 0xF7	; 247
    1e4e:	bf ef       	ldi	r27, 0xFF	; 255
    1e50:	7b 07       	cpc	r23, r27
    1e52:	bf ef       	ldi	r27, 0xFF	; 255
    1e54:	8b 07       	cpc	r24, r27
    1e56:	bf e0       	ldi	r27, 0x0F	; 15
    1e58:	9b 07       	cpc	r25, r27
    1e5a:	18 f1       	brcs	.+70     	; 0x1ea2 <writeFile+0x752>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    1e5c:	6f 3f       	cpi	r22, 0xFF	; 255
    1e5e:	ef ef       	ldi	r30, 0xFF	; 255
    1e60:	7e 07       	cpc	r23, r30
    1e62:	ef ef       	ldi	r30, 0xFF	; 255
    1e64:	8e 07       	cpc	r24, r30
    1e66:	ef e0       	ldi	r30, 0x0F	; 15
    1e68:	9e 07       	cpc	r25, r30
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <writeFile+0x71e>
    1e6c:	73 ce       	rjmp	.-794    	; 0x1b54 <writeFile+0x404>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1e6e:	6b 81       	ldd	r22, Y+3	; 0x03
    1e70:	7c 81       	ldd	r23, Y+4	; 0x04
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	0e 94 ed 05 	call	0xbda	; 0xbda <searchNextFreeCluster>
    1e7a:	6b 01       	movw	r12, r22
    1e7c:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    1e7e:	6b 81       	ldd	r22, Y+3	; 0x03
    1e80:	7c 81       	ldd	r23, Y+4	; 0x04
    1e82:	8d 81       	ldd	r24, Y+5	; 0x05
    1e84:	9e 81       	ldd	r25, Y+6	; 0x06
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	97 01       	movw	r18, r14
    1e8a:	86 01       	movw	r16, r12
    1e8c:	0e 94 83 03 	call	0x706	; 0x706 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    1e90:	c7 01       	movw	r24, r14
    1e92:	b6 01       	movw	r22, r12
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0f ef       	ldi	r16, 0xFF	; 255
    1e98:	1f ef       	ldi	r17, 0xFF	; 255
    1e9a:	2f ef       	ldi	r18, 0xFF	; 255
    1e9c:	3f e0       	ldi	r19, 0x0F	; 15
    1e9e:	0e 94 83 03 	call	0x706	; 0x706 <getSetNextCluster>
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1ea2:	c1 14       	cp	r12, r1
    1ea4:	d1 04       	cpc	r13, r1
    1ea6:	e1 04       	cpc	r14, r1
    1ea8:	f1 04       	cpc	r15, r1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <writeFile+0x75e>
    1eac:	5e c0       	rjmp	.+188    	; 0x1f6a <writeFile+0x81a>
   
   prevCluster = cluster;
    1eae:	cb 82       	std	Y+3, r12	; 0x03
    1eb0:	dc 82       	std	Y+4, r13	; 0x04
    1eb2:	ed 82       	std	Y+5, r14	; 0x05
    1eb4:	fe 82       	std	Y+6, r15	; 0x06
    1eb6:	9c cd       	rjmp	.-1224   	; 0x19f0 <writeFile+0x2a0>

j = readFile (VERIFY, fileName);

if(j == 1) 
{
  transmitString_F(PSTR(" File already exists, appending data..")); 
    1eb8:	8f e0       	ldi	r24, 0x0F	; 15
    1eba:	91 e0       	ldi	r25, 0x01	; 1
    1ebc:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  appendFile = 1;
  cluster = appendStartCluster;
    1ec0:	60 90 b2 02 	lds	r6, 0x02B2
    1ec4:	70 90 b3 02 	lds	r7, 0x02B3
    1ec8:	80 90 b4 02 	lds	r8, 0x02B4
    1ecc:	90 90 b5 02 	lds	r9, 0x02B5
  clusterCount=0;
    1ed0:	cc 24       	eor	r12, r12
    1ed2:	dd 24       	eor	r13, r13
    1ed4:	76 01       	movw	r14, r12
    1ed6:	07 c0       	rjmp	.+14     	; 0x1ee6 <writeFile+0x796>
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
	clusterCount++;
    1ed8:	08 94       	sec
    1eda:	c1 1c       	adc	r12, r1
    1edc:	d1 1c       	adc	r13, r1
    1ede:	e1 1c       	adc	r14, r1
    1ee0:	f1 1c       	adc	r15, r1
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    1ee2:	3b 01       	movw	r6, r22
    1ee4:	4c 01       	movw	r8, r24
  appendFile = 1;
  cluster = appendStartCluster;
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    1ee6:	c4 01       	movw	r24, r8
    1ee8:	b3 01       	movw	r22, r6
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	00 e0       	ldi	r16, 0x00	; 0
    1eee:	10 e0       	ldi	r17, 0x00	; 0
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	0e 94 83 03 	call	0x706	; 0x706 <getSetNextCluster>
    if(nextCluster == EOF) break;
    1ef8:	6f 3f       	cpi	r22, 0xFF	; 255
    1efa:	2f ef       	ldi	r18, 0xFF	; 255
    1efc:	72 07       	cpc	r23, r18
    1efe:	2f ef       	ldi	r18, 0xFF	; 255
    1f00:	82 07       	cpc	r24, r18
    1f02:	2f e0       	ldi	r18, 0x0F	; 15
    1f04:	92 07       	cpc	r25, r18
    1f06:	41 f7       	brne	.-48     	; 0x1ed8 <writeFile+0x788>
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    1f08:	20 91 a5 02 	lds	r18, 0x02A5
    1f0c:	30 91 a6 02 	lds	r19, 0x02A6
    1f10:	60 91 95 00 	lds	r22, 0x0095
    1f14:	70 91 96 00 	lds	r23, 0x0096
    1f18:	a0 90 95 00 	lds	r10, 0x0095
    1f1c:	b0 90 96 00 	lds	r11, 0x0096
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	50 e0       	ldi	r21, 0x00	; 0
    1f28:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
    1f2c:	a7 01       	movw	r20, r14
    1f2e:	96 01       	movw	r18, r12
    1f30:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsi3>
    1f34:	9b 01       	movw	r18, r22
    1f36:	ac 01       	movw	r20, r24
    1f38:	60 91 91 00 	lds	r22, 0x0091
    1f3c:	70 91 92 00 	lds	r23, 0x0092
    1f40:	80 91 93 00 	lds	r24, 0x0093
    1f44:	90 91 94 00 	lds	r25, 0x0094
    1f48:	62 1b       	sub	r22, r18
    1f4a:	73 0b       	sbc	r23, r19
    1f4c:	84 0b       	sbc	r24, r20
    1f4e:	95 0b       	sbc	r25, r21
    1f50:	95 01       	movw	r18, r10
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	0e 94 40 1a 	call	0x3480	; 0x3480 <__udivmodsi4>
    1f5a:	12 2f       	mov	r17, r18
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
    1f5c:	22 24       	eor	r2, r2
    1f5e:	33 24       	eor	r3, r3
    1f60:	1a 82       	std	Y+2, r1	; 0x02
    1f62:	19 82       	std	Y+1, r1	; 0x01
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    1f64:	aa 24       	eor	r10, r10
    1f66:	a3 94       	inc	r10
    1f68:	5d cc       	rjmp	.-1862   	; 0x1824 <writeFile+0xd4>
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1f6a:	82 e7       	ldi	r24, 0x72	; 114
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    1f72:	f4 cd       	rjmp	.-1048   	; 0x1b5c <writeFile+0x40c>
     }
	}while (data != '~');

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
    1f74:	80 91 91 00 	lds	r24, 0x0091
    1f78:	90 91 92 00 	lds	r25, 0x0092
    1f7c:	a0 91 93 00 	lds	r26, 0x0093
    1f80:	b0 91 94 00 	lds	r27, 0x0094
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	a1 09       	sbc	r26, r1
    1f88:	b1 09       	sbc	r27, r1
    1f8a:	80 93 91 00 	sts	0x0091, r24
    1f8e:	90 93 92 00 	sts	0x0092, r25
    1f92:	a0 93 93 00 	sts	0x0093, r26
    1f96:	b0 93 94 00 	sts	0x0094, r27
    1f9a:	93 01       	movw	r18, r6
    1f9c:	a4 01       	movw	r20, r8
    1f9e:	f4 cc       	rjmp	.-1560   	; 0x1988 <writeFile+0x238>

00001fa0 <i2c_start>:
//Function to start i2c communication
//*************************************************
unsigned char i2c_start(void)
{
 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
    1fa0:	84 ea       	ldi	r24, 0xA4	; 164
    1fa2:	86 bf       	out	0x36, r24	; 54
	
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    1fa4:	06 b6       	in	r0, 0x36	; 54
    1fa6:	07 fe       	sbrs	r0, 7
    1fa8:	fd cf       	rjmp	.-6      	; 0x1fa4 <i2c_start+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
    1faa:	91 b1       	in	r25, 0x01	; 1
    1fac:	98 7f       	andi	r25, 0xF8	; 248
 	   return(0);
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	98 30       	cpi	r25, 0x08	; 8
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <i2c_start+0x16>
	else
	   return(1);
}
    1fb4:	08 95       	ret
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
	
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
 	   return(0);
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
	else
	   return(1);
}
    1fb8:	08 95       	ret

00001fba <i2c_repeatStart>:
//Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void)
{
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
    1fba:	84 ea       	ldi	r24, 0xA4	; 164
    1fbc:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    1fbe:	06 b6       	in	r0, 0x36	; 54
    1fc0:	07 fe       	sbrs	r0, 7
    1fc2:	fd cf       	rjmp	.-6      	; 0x1fbe <i2c_repeatStart+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)			//Check value of TWI Status Register
    1fc4:	91 b1       	in	r25, 0x01	; 1
    1fc6:	98 7f       	andi	r25, 0xF8	; 248
 	   return(0);
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 31       	cpi	r25, 0x10	; 16
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <i2c_repeatStart+0x16>
	else
	   return(1);
}
    1fce:	08 95       	ret
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)			//Check value of TWI Status Register
 	   return(0);
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
	else
	   return(1);
}
    1fd2:	08 95       	ret

00001fd4 <i2c_sendAddress>:
//*************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
    1fd4:	80 ff       	sbrs	r24, 0
    1fd6:	11 c0       	rjmp	.+34     	; 0x1ffa <i2c_sendAddress+0x26>
    1fd8:	40 e4       	ldi	r20, 0x40	; 64
    1fda:	50 e0       	ldi	r21, 0x00	; 0
     STATUS = MT_SLA_ACK;
   else
     STATUS = MR_SLA_ACK; 
   
   TWDR = address; 
    1fdc:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT)|(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    1fde:	84 e8       	ldi	r24, 0x84	; 132
    1fe0:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    1fe2:	06 b6       	in	r0, 0x36	; 54
    1fe4:	07 fe       	sbrs	r0, 7
    1fe6:	fd cf       	rjmp	.-6      	; 0x1fe2 <i2c_sendAddress+0xe>
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   //Check value of TWI Status Register
    1fe8:	21 b1       	in	r18, 0x01	; 1
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	28 7f       	andi	r18, 0xF8	; 248
    1fee:	30 70       	andi	r19, 0x00	; 0
   	  return(0);
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	24 17       	cp	r18, r20
    1ff4:	35 07       	cpc	r19, r21
    1ff6:	21 f0       	breq	.+8      	; 0x2000 <i2c_sendAddress+0x2c>
   else 
      return(1);
}
    1ff8:	08 95       	ret
//*************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
    1ffa:	48 e1       	ldi	r20, 0x18	; 24
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	ee cf       	rjmp	.-36     	; 0x1fdc <i2c_sendAddress+0x8>
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   //Check value of TWI Status Register
   	  return(0);
    2000:	80 e0       	ldi	r24, 0x00	; 0
   else 
      return(1);
}
    2002:	08 95       	ret

00002004 <i2c_sendData>:
//**************************************************
//Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data)
{
   TWDR = data; 
    2004:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    2006:	84 e8       	ldi	r24, 0x84	; 132
    2008:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    200a:	06 b6       	in	r0, 0x36	; 54
    200c:	07 fe       	sbrs	r0, 7
    200e:	fd cf       	rjmp	.-6      	; 0x200a <i2c_sendData+0x6>
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
    2010:	91 b1       	in	r25, 0x01	; 1
    2012:	98 7f       	andi	r25, 0xF8	; 248
   	  return(1);
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	98 32       	cpi	r25, 0x28	; 40
    2018:	09 f0       	breq	.+2      	; 0x201c <i2c_sendData+0x18>
   else
      return(0);
}
    201a:	08 95       	ret
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
   	  return(1);
    201c:	80 e0       	ldi	r24, 0x00	; 0
   else
      return(0);
}
    201e:	08 95       	ret

00002020 <i2c_receiveData_ACK>:
//*****************************************************
unsigned char i2c_receiveData_ACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
    2020:	84 ec       	ldi	r24, 0xC4	; 196
    2022:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    2024:	06 b6       	in	r0, 0x36	; 54
    2026:	07 fe       	sbrs	r0, 7
    2028:	fd cf       	rjmp	.-6      	; 0x2024 <i2c_receiveData_ACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
    202a:	81 b1       	in	r24, 0x01	; 1
    202c:	88 7f       	andi	r24, 0xF8	; 248
    202e:	80 35       	cpi	r24, 0x50	; 80
    2030:	11 f0       	breq	.+4      	; 0x2036 <i2c_receiveData_ACK+0x16>
   	  return(ERROR_CODE);
    2032:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
    2034:	08 95       	ret
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
  
  data = TWDR;
    2036:	83 b1       	in	r24, 0x03	; 3
  return(data);
    2038:	08 95       	ret

0000203a <i2c_receiveData_NACK>:
//******************************************************************
unsigned char i2c_receiveData_NACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWINT)|(1<<TWEN);
    203a:	84 e8       	ldi	r24, 0x84	; 132
    203c:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    203e:	06 b6       	in	r0, 0x36	; 54
    2040:	07 fe       	sbrs	r0, 7
    2042:	fd cf       	rjmp	.-6      	; 0x203e <i2c_receiveData_NACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
    2044:	81 b1       	in	r24, 0x01	; 1
    2046:	88 7f       	andi	r24, 0xF8	; 248
    2048:	88 35       	cpi	r24, 0x58	; 88
    204a:	11 f0       	breq	.+4      	; 0x2050 <i2c_receiveData_NACK+0x16>
   	  return(ERROR_CODE);
    204c:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
    204e:	08 95       	ret
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
  
  data = TWDR;
    2050:	83 b1       	in	r24, 0x03	; 3
  return(data);
    2052:	08 95       	ret

00002054 <i2c_stop>:
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
    2054:	84 e9       	ldi	r24, 0x94	; 148
    2056:	86 bf       	out	0x36, r24	; 54
}  
    2058:	08 95       	ret

0000205a <RTC_setStartAddress>:
//***************************************************************************
unsigned char RTC_setStartAddress(void)
{
   unsigned char errorStatus;
   
   errorStatus = i2c_start();
    205a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <i2c_start>
   if(errorStatus == 1)
    205e:	81 30       	cpi	r24, 0x01	; 1
    2060:	71 f0       	breq	.+28     	; 0x207e <RTC_setStartAddress+0x24>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2062:	80 ed       	ldi	r24, 0xD0	; 208
    2064:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <i2c_sendAddress>
   
   if(errorStatus == 1)
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	49 f0       	breq	.+18     	; 0x207e <RTC_setStartAddress+0x24>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	0e 94 02 10 	call	0x2004	; 0x2004 <i2c_sendData>
   if(errorStatus == 1)
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	21 f0       	breq	.+8      	; 0x207e <RTC_setStartAddress+0x24>
     //transmitString_F(PSTR("RTC write-2 failed.."));
	 i2c_stop();
	 return 1;
   } 

   i2c_stop();
    2076:	0e 94 2a 10 	call	0x2054	; 0x2054 <i2c_stop>
   return 0;
    207a:	80 e0       	ldi	r24, 0x00	; 0
}
    207c:	08 95       	ret
   
   errorStatus = i2c_sendData(0x00);
   if(errorStatus == 1)
   {
     //transmitString_F(PSTR("RTC write-2 failed.."));
	 i2c_stop();
    207e:	0e 94 2a 10 	call	0x2054	; 0x2054 <i2c_stop>
	 return 1;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	08 95       	ret

00002086 <RTC_read>:

//***********************************************************************
//Function to read RTC registers and store them in buffer rtc_register[]
//***********************************************************************    
unsigned char RTC_read(void)
{
    2086:	1f 93       	push	r17
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
    208c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <i2c_start>
   if(errorStatus == 1)
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	21 f1       	breq	.+72     	; 0x20dc <RTC_read+0x56>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2094:	80 ed       	ldi	r24, 0xD0	; 208
    2096:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <i2c_sendAddress>
   
   if(errorStatus == 1)
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	f9 f0       	breq	.+62     	; 0x20dc <RTC_read+0x56>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	0e 94 02 10 	call	0x2004	; 0x2004 <i2c_sendData>
   if(errorStatus == 1)
    20a4:	81 30       	cpi	r24, 0x01	; 1
    20a6:	d1 f0       	breq	.+52     	; 0x20dc <RTC_read+0x56>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return 1;
   } 

    errorStatus = i2c_repeatStart();
    20a8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <i2c_repeatStart>
   if(errorStatus == 1)
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	b1 f0       	breq	.+44     	; 0x20dc <RTC_read+0x56>
     //transmitString_F(PSTR("RTC repeat start failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
    20b0:	81 ed       	ldi	r24, 0xD1	; 209
    20b2:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <i2c_sendAddress>
   
   if(errorStatus == 1)
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	89 f0       	breq	.+34     	; 0x20dc <RTC_read+0x56>
   {
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
    20ba:	c0 e8       	ldi	r28, 0x80	; 128
    20bc:	d0 e0       	ldi	r29, 0x00	; 0
	 return 1;
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
   
   if(errorStatus == 1)
    20be:	10 e0       	ldi	r17, 0x00	; 0
    20c0:	08 c0       	rjmp	.+16     	; 0x20d2 <RTC_read+0x4c>
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
	   	  data = i2c_receiveData_NACK();
	  else
	  	  data = i2c_receiveData_ACK();
    20c2:	0e 94 10 10 	call	0x2020	; 0x2020 <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
    20c6:	8e 37       	cpi	r24, 0x7E	; 126
    20c8:	49 f0       	breq	.+18     	; 0x20dc <RTC_read+0x56>
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
	   		return 1;
   	  }
	  
	  rtc_register[i] = data;
    20ca:	89 93       	st	Y+, r24
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
   } 
 
    for(i=0;i<7;i++)
    20cc:	1f 5f       	subi	r17, 0xFF	; 255
    20ce:	17 30       	cpi	r17, 0x07	; 7
    20d0:	61 f0       	breq	.+24     	; 0x20ea <RTC_read+0x64>
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
    20d2:	16 30       	cpi	r17, 0x06	; 6
    20d4:	b1 f7       	brne	.-20     	; 0x20c2 <RTC_read+0x3c>
	   	  data = i2c_receiveData_NACK();
    20d6:	0e 94 1d 10 	call	0x203a	; 0x203a <i2c_receiveData_NACK>
    20da:	f5 cf       	rjmp	.-22     	; 0x20c6 <RTC_read+0x40>
	  	  data = i2c_receiveData_ACK();
		  
   	  if(data == ERROR_CODE)
   	  {
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
    20dc:	0e 94 2a 10 	call	0x2054	; 0x2054 <i2c_stop>
	   		return 1;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
	  rtc_register[i] = data;
	}
	
	i2c_stop();
	return 0;
}	  
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	08 95       	ret
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
    20ea:	0e 94 2a 10 	call	0x2054	; 0x2054 <i2c_stop>
	return 0;
    20ee:	80 e0       	ldi	r24, 0x00	; 0
}	  
    20f0:	df 91       	pop	r29
    20f2:	cf 91       	pop	r28
    20f4:	1f 91       	pop	r17
    20f6:	08 95       	ret

000020f8 <RTC_getTime>:
//Function to form time string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
    20f8:	0e 94 43 10 	call	0x2086	; 0x2086 <RTC_read>
   if(error) return 1;
    20fc:	88 23       	and	r24, r24
    20fe:	11 f0       	breq	.+4      	; 0x2104 <RTC_getTime+0xc>
    2100:	81 e0       	ldi	r24, 0x01	; 1
   
   time[1] = (HOURS & 0x0f) | 0x30;	
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;

   return 0;
}
    2102:	08 95       	ret
{
   unsigned char error;
   error = RTC_read();
   if(error) return 1;

   RTC_read();
    2104:	0e 94 43 10 	call	0x2086	; 0x2086 <RTC_read>
   time[8] = 0x00;	  //NIL
    2108:	10 92 c4 02 	sts	0x02C4, r1
   time[7] = (SECONDS & 0x0f) | 0x30;		 //seconds(1's)
    210c:	80 91 80 00 	lds	r24, 0x0080
    2110:	98 2f       	mov	r25, r24
    2112:	9f 70       	andi	r25, 0x0F	; 15
    2114:	90 63       	ori	r25, 0x30	; 48
    2116:	90 93 c3 02 	sts	0x02C3, r25
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30; //seconds(10's)
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	80 77       	andi	r24, 0x70	; 112
    211e:	90 70       	andi	r25, 0x00	; 0
    2120:	95 95       	asr	r25
    2122:	87 95       	ror	r24
    2124:	95 95       	asr	r25
    2126:	87 95       	ror	r24
    2128:	95 95       	asr	r25
    212a:	87 95       	ror	r24
    212c:	95 95       	asr	r25
    212e:	87 95       	ror	r24
    2130:	80 63       	ori	r24, 0x30	; 48
    2132:	80 93 c2 02 	sts	0x02C2, r24
   time[5] = ':';
    2136:	2a e3       	ldi	r18, 0x3A	; 58
    2138:	20 93 c1 02 	sts	0x02C1, r18
   
   time[4] = (MINUTES & 0x0f) | 0x30;
    213c:	80 91 81 00 	lds	r24, 0x0081
    2140:	98 2f       	mov	r25, r24
    2142:	9f 70       	andi	r25, 0x0F	; 15
    2144:	90 63       	ori	r25, 0x30	; 48
    2146:	90 93 c0 02 	sts	0x02C0, r25
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	80 77       	andi	r24, 0x70	; 112
    214e:	90 70       	andi	r25, 0x00	; 0
    2150:	95 95       	asr	r25
    2152:	87 95       	ror	r24
    2154:	95 95       	asr	r25
    2156:	87 95       	ror	r24
    2158:	95 95       	asr	r25
    215a:	87 95       	ror	r24
    215c:	95 95       	asr	r25
    215e:	87 95       	ror	r24
    2160:	80 63       	ori	r24, 0x30	; 48
    2162:	80 93 bf 02 	sts	0x02BF, r24
   time[2] = ':'; 
    2166:	20 93 be 02 	sts	0x02BE, r18
   
   time[1] = (HOURS & 0x0f) | 0x30;	
    216a:	80 91 82 00 	lds	r24, 0x0082
    216e:	98 2f       	mov	r25, r24
    2170:	9f 70       	andi	r25, 0x0F	; 15
    2172:	90 63       	ori	r25, 0x30	; 48
    2174:	90 93 bd 02 	sts	0x02BD, r25
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	80 73       	andi	r24, 0x30	; 48
    217c:	90 70       	andi	r25, 0x00	; 0
    217e:	95 95       	asr	r25
    2180:	87 95       	ror	r24
    2182:	95 95       	asr	r25
    2184:	87 95       	ror	r24
    2186:	95 95       	asr	r25
    2188:	87 95       	ror	r24
    218a:	95 95       	asr	r25
    218c:	87 95       	ror	r24
    218e:	80 63       	ori	r24, 0x30	; 48
    2190:	80 93 bc 02 	sts	0x02BC, r24

   return 0;
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	08 95       	ret

00002198 <RTC_getDate>:
//Function to form date string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
    2198:	0e 94 43 10 	call	0x2086	; 0x2086 <RTC_read>
  if(error) return 1;
    219c:	88 23       	and	r24, r24
    219e:	09 f0       	breq	.+2      	; 0x21a2 <RTC_getDate+0xa>
    21a0:	47 c0       	rjmp	.+142    	; 0x2230 <RTC_getDate+0x98>

  date[11] = 0x00;
    21a2:	10 92 d2 02 	sts	0x02D2, r1
  date[10] = 0x00;
    21a6:	10 92 d1 02 	sts	0x02D1, r1
  date[9] = (YEAR & 0x0f) | 0x30;
    21aa:	80 91 86 00 	lds	r24, 0x0086
    21ae:	98 2f       	mov	r25, r24
    21b0:	9f 70       	andi	r25, 0x0F	; 15
    21b2:	90 63       	ori	r25, 0x30	; 48
    21b4:	90 93 d0 02 	sts	0x02D0, r25
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
    21b8:	82 95       	swap	r24
    21ba:	8f 70       	andi	r24, 0x0F	; 15
    21bc:	80 63       	ori	r24, 0x30	; 48
    21be:	80 93 cf 02 	sts	0x02CF, r24
  date[7] = '0';
    21c2:	80 e3       	ldi	r24, 0x30	; 48
    21c4:	80 93 ce 02 	sts	0x02CE, r24
  date[6] = '2';
    21c8:	82 e3       	ldi	r24, 0x32	; 50
    21ca:	80 93 cd 02 	sts	0x02CD, r24
  date[5] = '/';
    21ce:	2f e2       	ldi	r18, 0x2F	; 47
    21d0:	20 93 cc 02 	sts	0x02CC, r18
  date[4] = (MONTH & 0x0f) | 0x30;
    21d4:	80 91 85 00 	lds	r24, 0x0085
    21d8:	98 2f       	mov	r25, r24
    21da:	9f 70       	andi	r25, 0x0F	; 15
    21dc:	90 63       	ori	r25, 0x30	; 48
    21de:	90 93 cb 02 	sts	0x02CB, r25
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	80 71       	andi	r24, 0x10	; 16
    21e6:	90 70       	andi	r25, 0x00	; 0
    21e8:	95 95       	asr	r25
    21ea:	87 95       	ror	r24
    21ec:	95 95       	asr	r25
    21ee:	87 95       	ror	r24
    21f0:	95 95       	asr	r25
    21f2:	87 95       	ror	r24
    21f4:	95 95       	asr	r25
    21f6:	87 95       	ror	r24
    21f8:	80 63       	ori	r24, 0x30	; 48
    21fa:	80 93 ca 02 	sts	0x02CA, r24
  date[2] = '/';
    21fe:	20 93 c9 02 	sts	0x02C9, r18
  date[1] = (DATE & 0x0f) | 0x30;
    2202:	80 91 84 00 	lds	r24, 0x0084
    2206:	98 2f       	mov	r25, r24
    2208:	9f 70       	andi	r25, 0x0F	; 15
    220a:	90 63       	ori	r25, 0x30	; 48
    220c:	90 93 c8 02 	sts	0x02C8, r25
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	80 73       	andi	r24, 0x30	; 48
    2214:	90 70       	andi	r25, 0x00	; 0
    2216:	95 95       	asr	r25
    2218:	87 95       	ror	r24
    221a:	95 95       	asr	r25
    221c:	87 95       	ror	r24
    221e:	95 95       	asr	r25
    2220:	87 95       	ror	r24
    2222:	95 95       	asr	r25
    2224:	87 95       	ror	r24
    2226:	80 63       	ori	r24, 0x30	; 48
    2228:	80 93 c7 02 	sts	0x02C7, r24
  return 0;
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
  if(error) return 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
  date[2] = '/';
  date[1] = (DATE & 0x0f) | 0x30;
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
  return 0;
}  
    2232:	08 95       	ret

00002234 <RTC_displayTime>:
//Function to display time on LCD and send it to PC (thru UART)
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
    2234:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <RTC_getTime>
  if(error) return 1;
    2238:	88 23       	and	r24, r24
    223a:	11 f0       	breq	.+4      	; 0x2240 <RTC_displayTime+0xc>
    223c:	81 e0       	ldi	r24, 0x01	; 1
  TX_NEWLINE;
  transmitString_F(PSTR("Time:"));
  transmitString(time);

  return 0;
}
    223e:	08 95       	ret
{
  unsigned char error;
  error = RTC_getTime();
  if(error) return 1;
  
  TX_NEWLINE;
    2240:	8d e0       	ldi	r24, 0x0D	; 13
    2242:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2246:	8a e0       	ldi	r24, 0x0A	; 10
    2248:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  transmitString_F(PSTR("Time:"));
    224c:	82 ef       	ldi	r24, 0xF2	; 242
    224e:	92 e0       	ldi	r25, 0x02	; 2
    2250:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  transmitString(time);
    2254:	8c eb       	ldi	r24, 0xBC	; 188
    2256:	92 e0       	ldi	r25, 0x02	; 2
    2258:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <transmitString>

  return 0;
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	08 95       	ret

00002260 <RTC_displayDay>:
//******************************************************************
//Function to get the string for day 
//****************************************************************** 
void RTC_displayDay(void)
{
  transmitString_F(PSTR("    Day: "));
    2260:	82 ee       	ldi	r24, 0xE2	; 226
    2262:	92 e0       	ldi	r25, 0x02	; 2
    2264:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  
  switch(DAY)
    2268:	80 91 83 00 	lds	r24, 0x0083
    226c:	83 30       	cpi	r24, 0x03	; 3
    226e:	79 f1       	breq	.+94     	; 0x22ce <RTC_displayDay+0x6e>
    2270:	84 30       	cpi	r24, 0x04	; 4
    2272:	58 f0       	brcs	.+22     	; 0x228a <RTC_displayDay+0x2a>
    2274:	85 30       	cpi	r24, 0x05	; 5
    2276:	e1 f0       	breq	.+56     	; 0x22b0 <RTC_displayDay+0x50>
    2278:	85 30       	cpi	r24, 0x05	; 5
    227a:	80 f0       	brcs	.+32     	; 0x229c <RTC_displayDay+0x3c>
    227c:	86 30       	cpi	r24, 0x06	; 6
    227e:	e9 f0       	breq	.+58     	; 0x22ba <RTC_displayDay+0x5a>
          break; 		  
   case 5:transmitString_F(PSTR("Friday"));
          break; 		  
   case 6:transmitString_F(PSTR("Saturday"));
          break; 
   default:	transmitString_F(PSTR("Unknown"));  
    2280:	81 ea       	ldi	r24, 0xA1	; 161
    2282:	92 e0       	ldi	r25, 0x02	; 2
    2284:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    2288:	08 95       	ret
//****************************************************************** 
void RTC_displayDay(void)
{
  transmitString_F(PSTR("    Day: "));
  
  switch(DAY)
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	d9 f0       	breq	.+54     	; 0x22c4 <RTC_displayDay+0x64>
    228e:	82 30       	cpi	r24, 0x02	; 2
    2290:	50 f0       	brcs	.+20     	; 0x22a6 <RTC_displayDay+0x46>
  {
   case 0:transmitString_F(PSTR("Sunday"));
          break; 
   case 1:transmitString_F(PSTR("Monday"));
          break; 
   case 2:transmitString_F(PSTR("Tuesday"));
    2292:	8c ec       	ldi	r24, 0xCC	; 204
    2294:	92 e0       	ldi	r25, 0x02	; 2
    2296:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
          break; 
    229a:	08 95       	ret
   case 3:transmitString_F(PSTR("Wednesday"));
          break; 
   case 4:transmitString_F(PSTR("Thursday"));
    229c:	89 eb       	ldi	r24, 0xB9	; 185
    229e:	92 e0       	ldi	r25, 0x02	; 2
    22a0:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
          break; 		  
    22a4:	08 95       	ret
{
  transmitString_F(PSTR("    Day: "));
  
  switch(DAY)
  {
   case 0:transmitString_F(PSTR("Sunday"));
    22a6:	8b ed       	ldi	r24, 0xDB	; 219
    22a8:	92 e0       	ldi	r25, 0x02	; 2
    22aa:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
          break; 
    22ae:	08 95       	ret
          break; 
   case 3:transmitString_F(PSTR("Wednesday"));
          break; 
   case 4:transmitString_F(PSTR("Thursday"));
          break; 		  
   case 5:transmitString_F(PSTR("Friday"));
    22b0:	82 eb       	ldi	r24, 0xB2	; 178
    22b2:	92 e0       	ldi	r25, 0x02	; 2
    22b4:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
          break; 		  
    22b8:	08 95       	ret
   case 6:transmitString_F(PSTR("Saturday"));
    22ba:	89 ea       	ldi	r24, 0xA9	; 169
    22bc:	92 e0       	ldi	r25, 0x02	; 2
    22be:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
          break; 
    22c2:	08 95       	ret
  
  switch(DAY)
  {
   case 0:transmitString_F(PSTR("Sunday"));
          break; 
   case 1:transmitString_F(PSTR("Monday"));
    22c4:	84 ed       	ldi	r24, 0xD4	; 212
    22c6:	92 e0       	ldi	r25, 0x02	; 2
    22c8:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
          break; 
    22cc:	08 95       	ret
   case 2:transmitString_F(PSTR("Tuesday"));
          break; 
   case 3:transmitString_F(PSTR("Wednesday"));
    22ce:	82 ec       	ldi	r24, 0xC2	; 194
    22d0:	92 e0       	ldi	r25, 0x02	; 2
    22d2:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
          break; 
    22d6:	08 95       	ret

000022d8 <RTC_displayDate>:
//Function to display date on LCD and send it to PC (UART)
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
    22d8:	0e 94 cc 10 	call	0x2198	; 0x2198 <RTC_getDate>
  if(error) return 1;
    22dc:	88 23       	and	r24, r24
    22de:	11 f0       	breq	.+4      	; 0x22e4 <RTC_displayDate+0xc>
    22e0:	81 e0       	ldi	r24, 0x01	; 1
  transmitString_F(PSTR("Date:")); 
  transmitString(date);  
  RTC_displayDay();  
  
  return 0; 
}
    22e2:	08 95       	ret
{
  unsigned char error;
  error = RTC_getDate();
  if(error) return 1;
  
  TX_NEWLINE;
    22e4:	8d e0       	ldi	r24, 0x0D	; 13
    22e6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    22ea:	8a e0       	ldi	r24, 0x0A	; 10
    22ec:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  transmitString_F(PSTR("Date:")); 
    22f0:	8c ee       	ldi	r24, 0xEC	; 236
    22f2:	92 e0       	ldi	r25, 0x02	; 2
    22f4:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  transmitString(date);  
    22f8:	87 ec       	ldi	r24, 0xC7	; 199
    22fa:	92 e0       	ldi	r25, 0x02	; 2
    22fc:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <transmitString>
  RTC_displayDay();  
    2300:	0e 94 30 11 	call	0x2260	; 0x2260 <RTC_displayDay>
  
  return 0; 
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	08 95       	ret

00002308 <RTC_updateRegisters>:
//******************************************************************
//Function to update buffer rtc_register[] for next writing to RTC
//****************************************************************** 
void RTC_updateRegisters(void)
{
  SECONDS = ((time[6] & 0x07) << 4) | (time[7] & 0x0f);
    2308:	80 91 c2 02 	lds	r24, 0x02C2
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	87 70       	andi	r24, 0x07	; 7
    2310:	90 70       	andi	r25, 0x00	; 0
    2312:	82 95       	swap	r24
    2314:	92 95       	swap	r25
    2316:	90 7f       	andi	r25, 0xF0	; 240
    2318:	98 27       	eor	r25, r24
    231a:	80 7f       	andi	r24, 0xF0	; 240
    231c:	98 27       	eor	r25, r24
    231e:	20 91 c3 02 	lds	r18, 0x02C3
    2322:	2f 70       	andi	r18, 0x0F	; 15
    2324:	28 2b       	or	r18, r24
    2326:	20 93 80 00 	sts	0x0080, r18
  MINUTES = ((time[3] & 0x07) << 4) | (time[4] & 0x0f);
    232a:	80 91 bf 02 	lds	r24, 0x02BF
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	87 70       	andi	r24, 0x07	; 7
    2332:	90 70       	andi	r25, 0x00	; 0
    2334:	82 95       	swap	r24
    2336:	92 95       	swap	r25
    2338:	90 7f       	andi	r25, 0xF0	; 240
    233a:	98 27       	eor	r25, r24
    233c:	80 7f       	andi	r24, 0xF0	; 240
    233e:	98 27       	eor	r25, r24
    2340:	20 91 c0 02 	lds	r18, 0x02C0
    2344:	2f 70       	andi	r18, 0x0F	; 15
    2346:	28 2b       	or	r18, r24
    2348:	20 93 81 00 	sts	0x0081, r18
  HOURS = ((time[0] & 0x03) << 4) | (time[1] & 0x0f);  
    234c:	ec eb       	ldi	r30, 0xBC	; 188
    234e:	f2 e0       	ldi	r31, 0x02	; 2
    2350:	80 81       	ld	r24, Z
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	83 70       	andi	r24, 0x03	; 3
    2356:	90 70       	andi	r25, 0x00	; 0
    2358:	82 95       	swap	r24
    235a:	92 95       	swap	r25
    235c:	90 7f       	andi	r25, 0xF0	; 240
    235e:	98 27       	eor	r25, r24
    2360:	80 7f       	andi	r24, 0xF0	; 240
    2362:	98 27       	eor	r25, r24
    2364:	21 81       	ldd	r18, Z+1	; 0x01
    2366:	2f 70       	andi	r18, 0x0F	; 15
    2368:	28 2b       	or	r18, r24
    236a:	20 93 82 00 	sts	0x0082, r18
  DAY = date[10];
    236e:	80 91 d1 02 	lds	r24, 0x02D1
    2372:	80 93 83 00 	sts	0x0083, r24
  DATE = ((date[0] & 0x03) << 4) | (date[1] & 0x0f);
    2376:	e7 ec       	ldi	r30, 0xC7	; 199
    2378:	f2 e0       	ldi	r31, 0x02	; 2
    237a:	80 81       	ld	r24, Z
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	83 70       	andi	r24, 0x03	; 3
    2380:	90 70       	andi	r25, 0x00	; 0
    2382:	82 95       	swap	r24
    2384:	92 95       	swap	r25
    2386:	90 7f       	andi	r25, 0xF0	; 240
    2388:	98 27       	eor	r25, r24
    238a:	80 7f       	andi	r24, 0xF0	; 240
    238c:	98 27       	eor	r25, r24
    238e:	21 81       	ldd	r18, Z+1	; 0x01
    2390:	2f 70       	andi	r18, 0x0F	; 15
    2392:	28 2b       	or	r18, r24
    2394:	20 93 84 00 	sts	0x0084, r18
  MONTH = ((date[3] & 0x01) << 4) | (date[4] & 0x0f);
    2398:	83 81       	ldd	r24, Z+3	; 0x03
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	81 70       	andi	r24, 0x01	; 1
    239e:	90 70       	andi	r25, 0x00	; 0
    23a0:	82 95       	swap	r24
    23a2:	92 95       	swap	r25
    23a4:	90 7f       	andi	r25, 0xF0	; 240
    23a6:	98 27       	eor	r25, r24
    23a8:	80 7f       	andi	r24, 0xF0	; 240
    23aa:	98 27       	eor	r25, r24
    23ac:	24 81       	ldd	r18, Z+4	; 0x04
    23ae:	2f 70       	andi	r18, 0x0F	; 15
    23b0:	28 2b       	or	r18, r24
    23b2:	20 93 85 00 	sts	0x0085, r18
  YEAR = ((date[8] & 0x0f) << 4) | (date[9] & 0x0f);
    23b6:	80 85       	ldd	r24, Z+8	; 0x08
    23b8:	82 95       	swap	r24
    23ba:	80 7f       	andi	r24, 0xF0	; 240
    23bc:	91 85       	ldd	r25, Z+9	; 0x09
    23be:	9f 70       	andi	r25, 0x0F	; 15
    23c0:	89 2b       	or	r24, r25
    23c2:	80 93 86 00 	sts	0x0086, r24
}  
    23c6:	08 95       	ret

000023c8 <RTC_writeTime>:

//******************************************************************
//Function to write new time in the RTC 
//******************************************************************   
unsigned char RTC_writeTime(void)
{
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    23cc:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <i2c_start>
   if(errorStatus == 1)
    23d0:	81 30       	cpi	r24, 0x01	; 1
    23d2:	d9 f0       	breq	.+54     	; 0x240a <RTC_writeTime+0x42>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    23d4:	80 ed       	ldi	r24, 0xD0	; 208
    23d6:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <i2c_sendAddress>
   
   if(errorStatus == 1)
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	b1 f0       	breq	.+44     	; 0x240a <RTC_writeTime+0x42>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x00);
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	0e 94 02 10 	call	0x2004	; 0x2004 <i2c_sendData>
   if(errorStatus == 1)
    23e4:	81 30       	cpi	r24, 0x01	; 1
    23e6:	89 f0       	breq	.+34     	; 0x240a <RTC_writeTime+0x42>
   {
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
    23e8:	c0 e8       	ldi	r28, 0x80	; 128
    23ea:	d0 e0       	ldi	r29, 0x00	; 0
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    23ec:	89 91       	ld	r24, Y+
    23ee:	0e 94 02 10 	call	0x2004	; 0x2004 <i2c_sendData>
   	  if(errorStatus == 1)
    23f2:	81 30       	cpi	r24, 0x01	; 1
    23f4:	51 f0       	breq	.+20     	; 0x240a <RTC_writeTime+0x42>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=0;i<3;i++)
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	c3 38       	cpi	r28, 0x83	; 131
    23fa:	d8 07       	cpc	r29, r24
    23fc:	b9 f7       	brne	.-18     	; 0x23ec <RTC_writeTime+0x24>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    23fe:	0e 94 2a 10 	call	0x2054	; 0x2054 <i2c_stop>
	return(0);
    2402:	80 e0       	ldi	r24, 0x00	; 0
}
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	08 95       	ret
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
   	  if(errorStatus == 1)
   	  {
       		//transmitString_F(PSTR("RTC write time failed.."));
			i2c_stop();
    240a:	0e 94 2a 10 	call	0x2054	; 0x2054 <i2c_stop>
	   		return(1);
    240e:	81 e0       	ldi	r24, 0x01	; 1
   	  }
    }
	
	i2c_stop();
	return(0);
}
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	08 95       	ret

00002416 <RTC_writeDate>:

//******************************************************************
//Function to write new date in the RTC
//******************************************************************   
unsigned char RTC_writeDate(void)
{
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    241a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <i2c_start>
   if(errorStatus == 1)
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	d9 f0       	breq	.+54     	; 0x2458 <RTC_writeDate+0x42>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2422:	80 ed       	ldi	r24, 0xD0	; 208
    2424:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <i2c_sendAddress>
   
   if(errorStatus == 1)
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	b1 f0       	breq	.+44     	; 0x2458 <RTC_writeDate+0x42>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x03);
    242c:	83 e0       	ldi	r24, 0x03	; 3
    242e:	0e 94 02 10 	call	0x2004	; 0x2004 <i2c_sendData>
   if(errorStatus == 1)
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	89 f0       	breq	.+34     	; 0x2458 <RTC_writeDate+0x42>
   {
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
    2436:	c3 e8       	ldi	r28, 0x83	; 131
    2438:	d0 e0       	ldi	r29, 0x00	; 0
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    243a:	89 91       	ld	r24, Y+
    243c:	0e 94 02 10 	call	0x2004	; 0x2004 <i2c_sendData>
   	  if(errorStatus == 1)
    2440:	81 30       	cpi	r24, 0x01	; 1
    2442:	51 f0       	breq	.+20     	; 0x2458 <RTC_writeDate+0x42>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=3;i<7;i++)
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	c7 38       	cpi	r28, 0x87	; 135
    2448:	d8 07       	cpc	r29, r24
    244a:	b9 f7       	brne	.-18     	; 0x243a <RTC_writeDate+0x24>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    244c:	0e 94 2a 10 	call	0x2054	; 0x2054 <i2c_stop>
	return(0);
    2450:	80 e0       	ldi	r24, 0x00	; 0
}
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
   	  if(errorStatus == 1)
   	  {
       		//transmitString_F(PSTR("RTC write date failed.."));
			i2c_stop();
    2458:	0e 94 2a 10 	call	0x2054	; 0x2054 <i2c_stop>
	   		return(1);
    245c:	81 e0       	ldi	r24, 0x01	; 1
   	  }
    }
	
	i2c_stop();
	return(0);
}
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	08 95       	ret

00002464 <RTC_updateTime>:
  
//******************************************************************
//Function to update RTC time by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateTime(void)
{
    2464:	1f 93       	push	r17
  unsigned char data;
  TX_NEWLINE;
    2466:	8d e0       	ldi	r24, 0x0D	; 13
    2468:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    246c:	8a e0       	ldi	r24, 0x0A	; 10
    246e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  transmitString_F(PSTR("Enter Time in 24h format(hh:mm:ss):")); 
    2472:	8d e7       	ldi	r24, 0x7D	; 125
    2474:	92 e0       	ldi	r25, 0x02	; 2
    2476:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  
    data = receiveByte(); 	   	  	  				//receive hours
    247a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    247e:	18 2f       	mov	r17, r24
	transmitByte(data);
    2480:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x32)
    2484:	81 2f       	mov	r24, r17
    2486:	80 53       	subi	r24, 0x30	; 48
    2488:	83 30       	cpi	r24, 0x03	; 3
    248a:	58 f4       	brcc	.+22     	; 0x24a2 <RTC_updateTime+0x3e>
	   goto TIME_ERROR;
	   
	time[0]= data;
    248c:	10 93 bc 02 	sts	0x02BC, r17
	 
	data = receiveByte();
    2490:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    2494:	18 2f       	mov	r17, r24
	transmitByte(data);
    2496:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x39)
    249a:	81 2f       	mov	r24, r17
    249c:	80 53       	subi	r24, 0x30	; 48
    249e:	8a 30       	cpi	r24, 0x0A	; 10
    24a0:	68 f0       	brcs	.+26     	; 0x24bc <RTC_updateTime+0x58>
     transmitString_F(PSTR("Time Update Failed.."));
	 return 1;
  }
TIME_ERROR:

  TX_NEWLINE;
    24a2:	8d e0       	ldi	r24, 0x0D	; 13
    24a4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    24a8:	8a e0       	ldi	r24, 0x0A	; 10
    24aa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    24ae:	8e e3       	ldi	r24, 0x3E	; 62
    24b0:	92 e0       	ldi	r25, 0x02	; 2
    24b2:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  return 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
}  
    24b8:	1f 91       	pop	r17
    24ba:	08 95       	ret
	data = receiveByte();
	transmitByte(data);
	if(data < 0x30 || data > 0x39)
	   goto TIME_ERROR;
	 
	time[1]= data;
    24bc:	10 93 bd 02 	sts	0x02BD, r17
	
	transmitByte(':');
    24c0:	8a e3       	ldi	r24, 0x3A	; 58
    24c2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	
	if(((time[1] & 0x0f) + ((time[0] & 0x03)*10)) > 23)
    24c6:	20 91 bc 02 	lds	r18, 0x02BC
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	23 70       	andi	r18, 0x03	; 3
    24ce:	30 70       	andi	r19, 0x00	; 0
    24d0:	c9 01       	movw	r24, r18
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	22 0f       	add	r18, r18
    24d8:	33 1f       	adc	r19, r19
    24da:	22 0f       	add	r18, r18
    24dc:	33 1f       	adc	r19, r19
    24de:	22 0f       	add	r18, r18
    24e0:	33 1f       	adc	r19, r19
    24e2:	82 0f       	add	r24, r18
    24e4:	93 1f       	adc	r25, r19
    24e6:	20 91 bd 02 	lds	r18, 0x02BD
    24ea:	2f 70       	andi	r18, 0x0F	; 15
    24ec:	82 0f       	add	r24, r18
    24ee:	91 1d       	adc	r25, r1
    24f0:	88 31       	cpi	r24, 0x18	; 24
    24f2:	91 05       	cpc	r25, r1
    24f4:	b4 f6       	brge	.-84     	; 0x24a2 <RTC_updateTime+0x3e>
	   goto TIME_ERROR;
	 
	 data = receiveByte();			   			  //receive minutes
    24f6:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    24fa:	18 2f       	mov	r17, r24
	 transmitByte(data);
    24fc:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x35)
    2500:	81 2f       	mov	r24, r17
    2502:	80 53       	subi	r24, 0x30	; 48
    2504:	86 30       	cpi	r24, 0x06	; 6
    2506:	68 f6       	brcc	.-102    	; 0x24a2 <RTC_updateTime+0x3e>
	   goto TIME_ERROR;
	   
	time[3]= data; 
    2508:	10 93 bf 02 	sts	0x02BF, r17
	
	data = receiveByte();
    250c:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    2510:	18 2f       	mov	r17, r24
	transmitByte(data);
    2512:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2516:	81 2f       	mov	r24, r17
    2518:	80 53       	subi	r24, 0x30	; 48
    251a:	8a 30       	cpi	r24, 0x0A	; 10
    251c:	10 f6       	brcc	.-124    	; 0x24a2 <RTC_updateTime+0x3e>
	   goto TIME_ERROR;
	   
	time[4]= data; 
    251e:	10 93 c0 02 	sts	0x02C0, r17
	
	transmitByte(':');
    2522:	8a e3       	ldi	r24, 0x3A	; 58
    2524:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	
	 data = receiveByte();			   			  //receive seconds
    2528:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    252c:	18 2f       	mov	r17, r24
	 transmitByte(data);
    252e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x35)
    2532:	81 2f       	mov	r24, r17
    2534:	80 53       	subi	r24, 0x30	; 48
    2536:	86 30       	cpi	r24, 0x06	; 6
    2538:	08 f0       	brcs	.+2      	; 0x253c <RTC_updateTime+0xd8>
    253a:	b3 cf       	rjmp	.-154    	; 0x24a2 <RTC_updateTime+0x3e>
	   goto TIME_ERROR;
	   
	time[6]= data; 
    253c:	10 93 c2 02 	sts	0x02C2, r17
	
	data = receiveByte();
    2540:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    2544:	18 2f       	mov	r17, r24
	transmitByte(data);
    2546:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x39)
    254a:	81 2f       	mov	r24, r17
    254c:	80 53       	subi	r24, 0x30	; 48
    254e:	8a 30       	cpi	r24, 0x0A	; 10
    2550:	08 f0       	brcs	.+2      	; 0x2554 <RTC_updateTime+0xf0>
    2552:	a7 cf       	rjmp	.-178    	; 0x24a2 <RTC_updateTime+0x3e>
	   goto TIME_ERROR;
	   
	time[7]= data; 
    2554:	10 93 c3 02 	sts	0x02C3, r17
	
	 	  
  RTC_updateRegisters(); 
    2558:	0e 94 84 11 	call	0x2308	; 0x2308 <RTC_updateRegisters>
  data = RTC_writeTime();
    255c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <RTC_writeTime>
    2560:	18 2f       	mov	r17, r24

  TX_NEWLINE;
    2562:	8d e0       	ldi	r24, 0x0D	; 13
    2564:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2568:	8a e0       	ldi	r24, 0x0A	; 10
    256a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  if(data == 0)
    256e:	11 23       	and	r17, r17
    2570:	31 f4       	brne	.+12     	; 0x257e <RTC_updateTime+0x11a>
  {     
  	 transmitString_F(PSTR("Time Updated sucessfully!")); 
    2572:	83 e6       	ldi	r24, 0x63	; 99
    2574:	92 e0       	ldi	r25, 0x02	; 2
    2576:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
	 return 0;
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	9d cf       	rjmp	.-198    	; 0x24b8 <RTC_updateTime+0x54>
  }	
  else 
  { 
     transmitString_F(PSTR("Time Update Failed.."));
    257e:	8e e4       	ldi	r24, 0x4E	; 78
    2580:	92 e0       	ldi	r25, 0x02	; 2
    2582:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
	 return 1;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	97 cf       	rjmp	.-210    	; 0x24b8 <RTC_updateTime+0x54>

0000258a <RTC_updateDate>:
  
//******************************************************************
//Function to update RTC date by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateDate(void)
{
    258a:	0f 93       	push	r16
    258c:	1f 93       	push	r17
  unsigned char data;
  TX_NEWLINE;
    258e:	8d e0       	ldi	r24, 0x0D	; 13
    2590:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2594:	8a e0       	ldi	r24, 0x0A	; 10
    2596:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  transmitString_F(PSTR("Enter Date (dd/mm/yy):")); 
    259a:	87 e2       	ldi	r24, 0x27	; 39
    259c:	92 e0       	ldi	r25, 0x02	; 2
    259e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  
    data = receiveByte(); 	   				  		//receive date
    25a2:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    25a6:	18 2f       	mov	r17, r24
	transmitByte(data); 	   	  	  				
    25a8:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x33)
    25ac:	81 2f       	mov	r24, r17
    25ae:	80 53       	subi	r24, 0x30	; 48
    25b0:	84 30       	cpi	r24, 0x04	; 4
    25b2:	58 f4       	brcc	.+22     	; 0x25ca <RTC_updateDate+0x40>
	   goto DATE_ERROR;
	   
	date[0]= data;
    25b4:	10 93 c7 02 	sts	0x02C7, r17
	 
	data = receiveByte();
    25b8:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    25bc:	18 2f       	mov	r17, r24
	transmitByte(data);
    25be:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x39)
    25c2:	81 2f       	mov	r24, r17
    25c4:	80 53       	subi	r24, 0x30	; 48
    25c6:	8a 30       	cpi	r24, 0x0A	; 10
    25c8:	70 f0       	brcs	.+28     	; 0x25e6 <RTC_updateDate+0x5c>
     return 1;
  }

  DATE_ERROR:

  TX_NEWLINE;
    25ca:	8d e0       	ldi	r24, 0x0D	; 13
    25cc:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    25d0:	8a e0       	ldi	r24, 0x0A	; 10
    25d2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    25d6:	8f eb       	ldi	r24, 0xBF	; 191
    25d8:	91 e0       	ldi	r25, 0x01	; 1
    25da:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  return 1;
    25de:	81 e0       	ldi	r24, 0x01	; 1
}  
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	08 95       	ret
	data = receiveByte();
	transmitByte(data);
	if(data < 0x30 || data > 0x39)
	   goto DATE_ERROR;
	   
	date[1]= data;
    25e6:	10 93 c8 02 	sts	0x02C8, r17
	
	if(((date[1] & 0x0f) + ((date[0] & 0x03)*10)) > 31)
    25ea:	1f 70       	andi	r17, 0x0F	; 15
    25ec:	40 91 c7 02 	lds	r20, 0x02C7
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	43 70       	andi	r20, 0x03	; 3
    25f4:	50 70       	andi	r21, 0x00	; 0
    25f6:	9a 01       	movw	r18, r20
    25f8:	22 0f       	add	r18, r18
    25fa:	33 1f       	adc	r19, r19
    25fc:	44 0f       	add	r20, r20
    25fe:	55 1f       	adc	r21, r21
    2600:	44 0f       	add	r20, r20
    2602:	55 1f       	adc	r21, r21
    2604:	44 0f       	add	r20, r20
    2606:	55 1f       	adc	r21, r21
    2608:	24 0f       	add	r18, r20
    260a:	35 1f       	adc	r19, r21
    260c:	21 0f       	add	r18, r17
    260e:	31 1d       	adc	r19, r1
    2610:	20 32       	cpi	r18, 0x20	; 32
    2612:	31 05       	cpc	r19, r1
    2614:	d4 f6       	brge	.-76     	; 0x25ca <RTC_updateDate+0x40>
	   goto DATE_ERROR;
    transmitByte('/');
    2616:	8f e2       	ldi	r24, 0x2F	; 47
    2618:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	
	date[2] = '/';
    261c:	0f e2       	ldi	r16, 0x2F	; 47
    261e:	00 93 c9 02 	sts	0x02C9, r16
	   
	
	data = receiveByte();			   			  //receive month
    2622:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    2626:	18 2f       	mov	r17, r24
	transmitByte(data);
    2628:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x31)
    262c:	81 2f       	mov	r24, r17
    262e:	80 53       	subi	r24, 0x30	; 48
    2630:	82 30       	cpi	r24, 0x02	; 2
    2632:	58 f6       	brcc	.-106    	; 0x25ca <RTC_updateDate+0x40>
	  goto DATE_ERROR;
	  
	date[3]= data; 
    2634:	10 93 ca 02 	sts	0x02CA, r17
	
	data = receiveByte();
    2638:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    263c:	18 2f       	mov	r17, r24
	transmitByte(data);
    263e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x39)
    2642:	81 2f       	mov	r24, r17
    2644:	80 53       	subi	r24, 0x30	; 48
    2646:	8a 30       	cpi	r24, 0x0A	; 10
    2648:	08 f0       	brcs	.+2      	; 0x264c <RTC_updateDate+0xc2>
    264a:	bf cf       	rjmp	.-130    	; 0x25ca <RTC_updateDate+0x40>
	  goto DATE_ERROR;
	  
	date[4] = data; 
    264c:	10 93 cb 02 	sts	0x02CB, r17
	
	if(((date[4] & 0x0f) + ((date[3] & 0x03)*10)) > 12)
    2650:	1f 70       	andi	r17, 0x0F	; 15
    2652:	40 91 ca 02 	lds	r20, 0x02CA
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	43 70       	andi	r20, 0x03	; 3
    265a:	50 70       	andi	r21, 0x00	; 0
    265c:	9a 01       	movw	r18, r20
    265e:	22 0f       	add	r18, r18
    2660:	33 1f       	adc	r19, r19
    2662:	44 0f       	add	r20, r20
    2664:	55 1f       	adc	r21, r21
    2666:	44 0f       	add	r20, r20
    2668:	55 1f       	adc	r21, r21
    266a:	44 0f       	add	r20, r20
    266c:	55 1f       	adc	r21, r21
    266e:	24 0f       	add	r18, r20
    2670:	35 1f       	adc	r19, r21
    2672:	21 0f       	add	r18, r17
    2674:	31 1d       	adc	r19, r1
    2676:	2d 30       	cpi	r18, 0x0D	; 13
    2678:	31 05       	cpc	r19, r1
    267a:	0c f0       	brlt	.+2      	; 0x267e <RTC_updateDate+0xf4>
    267c:	a6 cf       	rjmp	.-180    	; 0x25ca <RTC_updateDate+0x40>
	   goto DATE_ERROR;
	transmitByte('/');
    267e:	8f e2       	ldi	r24, 0x2F	; 47
    2680:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	   
	
	date[5] = '/';
    2684:	00 93 cc 02 	sts	0x02CC, r16
	
	date[6] = '2'; 	   	   	  	  //year is 20xx
    2688:	82 e3       	ldi	r24, 0x32	; 50
    268a:	80 93 cd 02 	sts	0x02CD, r24
	date[7] = '0';
    268e:	80 e3       	ldi	r24, 0x30	; 48
    2690:	80 93 ce 02 	sts	0x02CE, r24
	
	data = receiveByte();			   			 
    2694:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    2698:	18 2f       	mov	r17, r24
	transmitByte(data);
    269a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x39)
    269e:	81 2f       	mov	r24, r17
    26a0:	80 53       	subi	r24, 0x30	; 48
    26a2:	8a 30       	cpi	r24, 0x0A	; 10
    26a4:	08 f0       	brcs	.+2      	; 0x26a8 <RTC_updateDate+0x11e>
    26a6:	91 cf       	rjmp	.-222    	; 0x25ca <RTC_updateDate+0x40>
	   goto DATE_ERROR;
	   
	date[8]= data; 
    26a8:	10 93 cf 02 	sts	0x02CF, r17
	
	data = receiveByte();
    26ac:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    26b0:	18 2f       	mov	r17, r24
	transmitByte(data);
    26b2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x39)
    26b6:	81 2f       	mov	r24, r17
    26b8:	80 53       	subi	r24, 0x30	; 48
    26ba:	8a 30       	cpi	r24, 0x0A	; 10
    26bc:	08 f0       	brcs	.+2      	; 0x26c0 <RTC_updateDate+0x136>
    26be:	85 cf       	rjmp	.-246    	; 0x25ca <RTC_updateDate+0x40>
	   goto DATE_ERROR;
	   
	date[9]= data; 
    26c0:	10 93 d0 02 	sts	0x02D0, r17
	
	TX_NEWLINE;
    26c4:	8d e0       	ldi	r24, 0x0D	; 13
    26c6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    26ca:	8a e0       	ldi	r24, 0x0A	; 10
    26cc:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    transmitString_F(PSTR("Enter Day (Sunday:0, Monday:1...) (0-6):")); 
    26d0:	8e ef       	ldi	r24, 0xFE	; 254
    26d2:	91 e0       	ldi	r25, 0x01	; 1
    26d4:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
	
	data = receiveByte();				   //receive Day of the week
    26d8:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    26dc:	18 2f       	mov	r17, r24
	transmitByte(data);
    26de:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	if(data < 0x30 || data > 0x36)
    26e2:	81 2f       	mov	r24, r17
    26e4:	80 53       	subi	r24, 0x30	; 48
    26e6:	87 30       	cpi	r24, 0x07	; 7
    26e8:	08 f0       	brcs	.+2      	; 0x26ec <RTC_updateDate+0x162>
    26ea:	6f cf       	rjmp	.-290    	; 0x25ca <RTC_updateDate+0x40>
	   goto DATE_ERROR;
	   
	date[10] = data & 0x0f;
    26ec:	1f 70       	andi	r17, 0x0F	; 15
    26ee:	10 93 d1 02 	sts	0x02D1, r17
		 	  
  RTC_updateRegisters(); 
    26f2:	0e 94 84 11 	call	0x2308	; 0x2308 <RTC_updateRegisters>
  data = RTC_writeDate();
    26f6:	0e 94 0b 12 	call	0x2416	; 0x2416 <RTC_writeDate>
    26fa:	18 2f       	mov	r17, r24

  TX_NEWLINE;
    26fc:	8d e0       	ldi	r24, 0x0D	; 13
    26fe:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2702:	8a e0       	ldi	r24, 0x0A	; 10
    2704:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  if(data == 0)
    2708:	11 23       	and	r17, r17
    270a:	31 f4       	brne	.+12     	; 0x2718 <RTC_updateDate+0x18e>
  {
     
  	 transmitString_F(PSTR("Date Updated sucessfully!")); 
    270c:	84 ee       	ldi	r24, 0xE4	; 228
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
	 return 0;
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	64 cf       	rjmp	.-312    	; 0x25e0 <RTC_updateDate+0x56>
  }	  
  else
  {
     transmitString_F(PSTR("Date Update Failed.."));
    2718:	8f ec       	ldi	r24, 0xCF	; 207
    271a:	91 e0       	ldi	r25, 0x01	; 1
    271c:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
     return 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	5e cf       	rjmp	.-324    	; 0x25e0 <RTC_updateDate+0x56>

00002724 <getDateTime_FAT>:
{
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
    2724:	0e 94 43 10 	call	0x2086	; 0x2086 <RTC_read>
   if(error) return 1;
    2728:	88 23       	and	r24, r24
    272a:	09 f0       	breq	.+2      	; 0x272e <getDateTime_FAT+0xa>
    272c:	8b c0       	rjmp	.+278    	; 0x2844 <getDateTime_FAT+0x120>

   yr = (YEAR & 0xf0) >> 4;
    272e:	80 91 86 00 	lds	r24, 0x0086
    2732:	48 2f       	mov	r20, r24
    2734:	42 95       	swap	r20
    2736:	4f 70       	andi	r20, 0x0F	; 15
    2738:	50 e0       	ldi	r21, 0x00	; 0
   yr = (yr * 10)+(YEAR & 0x0f);
    273a:	9a 01       	movw	r18, r20
    273c:	22 0f       	add	r18, r18
    273e:	33 1f       	adc	r19, r19
    2740:	44 0f       	add	r20, r20
    2742:	55 1f       	adc	r21, r21
    2744:	44 0f       	add	r20, r20
    2746:	55 1f       	adc	r21, r21
    2748:	44 0f       	add	r20, r20
    274a:	55 1f       	adc	r21, r21
    274c:	24 0f       	add	r18, r20
    274e:	35 1f       	adc	r19, r21
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	8f 70       	andi	r24, 0x0F	; 15
    2754:	90 70       	andi	r25, 0x00	; 0
   yr = yr+2000;
    2756:	44 96       	adiw	r24, 0x14	; 20
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
    2758:	e0 91 85 00 	lds	r30, 0x0085
    275c:	5e 2f       	mov	r21, r30
    275e:	52 95       	swap	r21
    2760:	5f 70       	andi	r21, 0x0F	; 15
   mth = (mth * 10)+(MONTH & 0x0f);
    2762:	55 0f       	add	r21, r21
    2764:	45 2f       	mov	r20, r21
    2766:	44 0f       	add	r20, r20
    2768:	44 0f       	add	r20, r20
    276a:	45 0f       	add	r20, r21

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
    276c:	70 91 84 00 	lds	r23, 0x0084
    2770:	57 2f       	mov	r21, r23
    2772:	52 95       	swap	r21
    2774:	5f 70       	andi	r21, 0x0F	; 15
   dt = (dt * 10)+(DATE & 0x0f);
    2776:	55 0f       	add	r21, r21
    2778:	65 2f       	mov	r22, r21
    277a:	66 0f       	add	r22, r22
    277c:	66 0f       	add	r22, r22
    277e:	65 0f       	add	r22, r21
   if(error) return 1;

   yr = (YEAR & 0xf0) >> 4;
   yr = (yr * 10)+(YEAR & 0x0f);
   yr = yr+2000;
   yr = yr - 1980;
    2780:	82 0f       	add	r24, r18
    2782:	93 1f       	adc	r25, r19
   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;
    2784:	82 95       	swap	r24
    2786:	92 95       	swap	r25
    2788:	90 7f       	andi	r25, 0xF0	; 240
    278a:	98 27       	eor	r25, r24
    278c:	80 7f       	andi	r24, 0xF0	; 240
    278e:	98 27       	eor	r25, r24
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);
    2790:	ef 70       	andi	r30, 0x0F	; 15
    2792:	4e 0f       	add	r20, r30

   dateFAT = (dateFAT << 4) | mth;
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	84 2b       	or	r24, r20
    2798:	95 2b       	or	r25, r21

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);

   dateFAT = (dateFAT << 5) | dt;
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	82 95       	swap	r24
    27a0:	92 95       	swap	r25
    27a2:	90 7f       	andi	r25, 0xF0	; 240
    27a4:	98 27       	eor	r25, r24
    27a6:	80 7f       	andi	r24, 0xF0	; 240
    27a8:	98 27       	eor	r25, r24
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);
    27aa:	7f 70       	andi	r23, 0x0F	; 15
    27ac:	67 0f       	add	r22, r23

   dateFAT = (dateFAT << 5) | dt;
    27ae:	26 2f       	mov	r18, r22
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	82 2b       	or	r24, r18
    27b4:	93 2b       	or	r25, r19
    27b6:	90 93 8c 00 	sts	0x008C, r25
    27ba:	80 93 8b 00 	sts	0x008B, r24


   hr = (HOURS & 0xf0) >> 4;
    27be:	50 91 82 00 	lds	r21, 0x0082
    27c2:	95 2f       	mov	r25, r21
    27c4:	92 95       	swap	r25
    27c6:	9f 70       	andi	r25, 0x0F	; 15
   hr = (hr * 10)+(HOURS & 0x0f);
    27c8:	99 0f       	add	r25, r25
    27ca:	89 2f       	mov	r24, r25
    27cc:	88 0f       	add	r24, r24
    27ce:	88 0f       	add	r24, r24
    27d0:	89 0f       	add	r24, r25

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
    27d2:	30 91 81 00 	lds	r19, 0x0081
    27d6:	93 2f       	mov	r25, r19
    27d8:	92 95       	swap	r25
    27da:	9f 70       	andi	r25, 0x0F	; 15
   min = (min * 10)+(MINUTES & 0x0f);
    27dc:	99 0f       	add	r25, r25
    27de:	49 2f       	mov	r20, r25
    27e0:	44 0f       	add	r20, r20
    27e2:	44 0f       	add	r20, r20
    27e4:	49 0f       	add	r20, r25

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
    27e6:	60 91 80 00 	lds	r22, 0x0080
    27ea:	96 2f       	mov	r25, r22
    27ec:	92 95       	swap	r25
    27ee:	9f 70       	andi	r25, 0x0F	; 15
   sec = (sec * 10)+(SECONDS & 0x0f);
    27f0:	99 0f       	add	r25, r25
    27f2:	29 2f       	mov	r18, r25
    27f4:	22 0f       	add	r18, r18
    27f6:	22 0f       	add	r18, r18
    27f8:	29 0f       	add	r18, r25
    27fa:	6f 70       	andi	r22, 0x0F	; 15
    27fc:	26 0f       	add	r18, r22

   dateFAT = (dateFAT << 5) | dt;


   hr = (HOURS & 0xf0) >> 4;
   hr = (hr * 10)+(HOURS & 0x0f);
    27fe:	5f 70       	andi	r21, 0x0F	; 15
    2800:	85 0f       	add	r24, r21

   timeFAT = hr;
    2802:	90 e0       	ldi	r25, 0x00	; 0

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);

   timeFAT = (timeFAT << 6) | min;
    2804:	00 24       	eor	r0, r0
    2806:	96 95       	lsr	r25
    2808:	87 95       	ror	r24
    280a:	07 94       	ror	r0
    280c:	96 95       	lsr	r25
    280e:	87 95       	ror	r24
    2810:	07 94       	ror	r0
    2812:	98 2f       	mov	r25, r24
    2814:	80 2d       	mov	r24, r0
   hr = (hr * 10)+(HOURS & 0x0f);

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);
    2816:	3f 70       	andi	r19, 0x0F	; 15
    2818:	43 0f       	add	r20, r19

   timeFAT = (timeFAT << 6) | min;
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	84 2b       	or	r24, r20
    281e:	95 2b       	or	r25, r21

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)

   timeFAT = (timeFAT << 5) | sec;
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	82 95       	swap	r24
    2826:	92 95       	swap	r25
    2828:	90 7f       	andi	r25, 0xF0	; 240
    282a:	98 27       	eor	r25, r24
    282c:	80 7f       	andi	r24, 0xF0	; 240
    282e:	98 27       	eor	r25, r24

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)
    2830:	26 95       	lsr	r18

   timeFAT = (timeFAT << 5) | sec;
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	82 2b       	or	r24, r18
    2836:	93 2b       	or	r25, r19
    2838:	90 93 a0 00 	sts	0x00A0, r25
    283c:	80 93 9f 00 	sts	0x009F, r24

   
   return 0;
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	08 95       	ret
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
   if(error) return 1;
    2844:	81 e0       	ldi	r24, 0x01	; 1

   timeFAT = (timeFAT << 5) | sec;

   
   return 0;
}
    2846:	08 95       	ret

00002848 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    2848:	df 92       	push	r13
    284a:	ef 92       	push	r14
    284c:	ff 92       	push	r15
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	d8 2e       	mov	r13, r24
    2854:	7a 01       	movw	r14, r20
    2856:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    2858:	80 91 ab 02 	lds	r24, 0x02AB
    285c:	88 23       	and	r24, r24
    285e:	69 f4       	brne	.+26     	; 0x287a <SD_sendCommand+0x32>
if(cmd == READ_SINGLE_BLOCK     ||
    2860:	8d 2d       	mov	r24, r13
    2862:	81 51       	subi	r24, 0x11	; 17
    2864:	82 30       	cpi	r24, 0x02	; 2
    2866:	c0 f1       	brcs	.+112    	; 0x28d8 <SD_sendCommand+0x90>
   cmd == READ_MULTIPLE_BLOCKS  ||
    2868:	8d 2d       	mov	r24, r13
    286a:	88 31       	cpi	r24, 0x18	; 24
    286c:	a9 f1       	breq	.+106    	; 0x28d8 <SD_sendCommand+0x90>
   cmd == WRITE_SINGLE_BLOCK    ||
    286e:	89 31       	cpi	r24, 0x19	; 25
    2870:	99 f1       	breq	.+102    	; 0x28d8 <SD_sendCommand+0x90>
   cmd == WRITE_MULTIPLE_BLOCKS ||
    2872:	80 32       	cpi	r24, 0x20	; 32
    2874:	89 f1       	breq	.+98     	; 0x28d8 <SD_sendCommand+0x90>
   cmd == ERASE_BLOCK_START_ADDR|| 
    2876:	81 32       	cpi	r24, 0x21	; 33
    2878:	79 f1       	breq	.+94     	; 0x28d8 <SD_sendCommand+0x90>
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
   }	   

SD_CS_ASSERT;
    287a:	c1 98       	cbi	0x18, 1	; 24

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    287c:	8d 2d       	mov	r24, r13
    287e:	80 64       	ori	r24, 0x40	; 64
    2880:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>
SPI_transmit(arg>>24);
    2884:	81 2f       	mov	r24, r17
    2886:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>
SPI_transmit(arg>>16);
    288a:	80 2f       	mov	r24, r16
    288c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>
SPI_transmit(arg>>8);
    2890:	8f 2d       	mov	r24, r15
    2892:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>
SPI_transmit(arg);
    2896:	8e 2d       	mov	r24, r14
    2898:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    289c:	8d 2d       	mov	r24, r13
    289e:	88 30       	cpi	r24, 0x08	; 8
    28a0:	19 f1       	breq	.+70     	; 0x28e8 <SD_sendCommand+0xa0>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
    28a2:	85 e9       	ldi	r24, 0x95	; 149
    28a4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    28a8:	ee 24       	eor	r14, r14
    28aa:	02 c0       	rjmp	.+4      	; 0x28b0 <SD_sendCommand+0x68>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
    28ac:	ea 94       	dec	r14

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    28ae:	69 f1       	breq	.+90     	; 0x290a <SD_sendCommand+0xc2>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    28b0:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
    28b4:	8f 3f       	cpi	r24, 0xFF	; 255
    28b6:	d1 f3       	breq	.-12     	; 0x28ac <SD_sendCommand+0x64>
    28b8:	18 2f       	mov	r17, r24
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    28ba:	88 23       	and	r24, r24
    28bc:	19 f4       	brne	.+6      	; 0x28c4 <SD_sendCommand+0x7c>
    28be:	8d 2d       	mov	r24, r13
    28c0:	8a 33       	cpi	r24, 0x3A	; 58
    28c2:	b1 f0       	breq	.+44     	; 0x28f0 <SD_sendCommand+0xa8>
  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
  SPI_receive(); //one can use these bytes to check power supply limits of SD
  SPI_receive(); 
}

SPI_receive(); //extra 8 CLK
    28c4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
SD_CS_DEASSERT;
    28c8:	c1 9a       	sbi	0x18, 1	; 24

return response; //return state
}
    28ca:	81 2f       	mov	r24, r17
    28cc:	1f 91       	pop	r17
    28ce:	0f 91       	pop	r16
    28d0:	ff 90       	pop	r15
    28d2:	ef 90       	pop	r14
    28d4:	df 90       	pop	r13
    28d6:	08 95       	ret
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    28d8:	89 e0       	ldi	r24, 0x09	; 9
    28da:	ee 0c       	add	r14, r14
    28dc:	ff 1c       	adc	r15, r15
    28de:	00 1f       	adc	r16, r16
    28e0:	11 1f       	adc	r17, r17
    28e2:	8a 95       	dec	r24
    28e4:	d1 f7       	brne	.-12     	; 0x28da <SD_sendCommand+0x92>
    28e6:	c9 cf       	rjmp	.-110    	; 0x287a <SD_sendCommand+0x32>
SPI_transmit(arg>>16);
SPI_transmit(arg>>8);
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    28e8:	87 e8       	ldi	r24, 0x87	; 135
    28ea:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>
    28ee:	dc cf       	rjmp	.-72     	; 0x28a8 <SD_sendCommand+0x60>
while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    28f0:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    28f4:	86 fd       	sbrc	r24, 6
    28f6:	0b c0       	rjmp	.+22     	; 0x290e <SD_sendCommand+0xc6>
  else SDHC_flag = 0;
    28f8:	10 92 ab 02 	sts	0x02AB, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    28fc:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    2900:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
  SPI_receive(); 
    2904:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
    2908:	dd cf       	rjmp	.-70     	; 0x28c4 <SD_sendCommand+0x7c>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    290a:	1f ef       	ldi	r17, 0xFF	; 255
    290c:	db cf       	rjmp	.-74     	; 0x28c4 <SD_sendCommand+0x7c>

if(response == 0x00 && cmd == 58)  //checking response of CMD58
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	80 93 ab 02 	sts	0x02AB, r24
    2914:	f3 cf       	rjmp	.-26     	; 0x28fc <SD_sendCommand+0xb4>

00002916 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	1a e0       	ldi	r17, 0x0A	; 10
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    291e:	8f ef       	ldi	r24, 0xFF	; 255
    2920:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>
    2924:	11 50       	subi	r17, 0x01	; 1
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    2926:	d9 f7       	brne	.-10     	; 0x291e <SD_init+0x8>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    2928:	c1 98       	cbi	0x18, 1	; 24
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	60 e0       	ldi	r22, 0x00	; 0
    2932:	70 e0       	ldi	r23, 0x00	; 0
    2934:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
    2938:	c0 e2       	ldi	r28, 0x20	; 32
    293a:	d0 e0       	ldi	r29, 0x00	; 0
    293c:	0a c0       	rjmp	.+20     	; 0x2952 <SD_init+0x3c>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	40 e0       	ldi	r20, 0x00	; 0
    2942:	50 e0       	ldi	r21, 0x00	; 0
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	70 e0       	ldi	r23, 0x00	; 0
    2948:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
    294c:	21 97       	sbiw	r28, 0x01	; 1
   retry++;
   if(retry>0x20) 
    294e:	09 f4       	brne	.+2      	; 0x2952 <SD_init+0x3c>
    2950:	6d c0       	rjmp	.+218    	; 0x2a2c <SD_init+0x116>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    2952:	81 30       	cpi	r24, 0x01	; 1
    2954:	a1 f7       	brne	.-24     	; 0x293e <SD_init+0x28>

SD_CS_DEASSERT;
    2956:	c1 9a       	sbi	0x18, 1	; 24
SPI_transmit (0xff);
    2958:	8f ef       	ldi	r24, 0xFF	; 255
    295a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>
SPI_transmit (0xff);
    295e:	8f ef       	ldi	r24, 0xFF	; 255
    2960:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    2964:	88 e0       	ldi	r24, 0x08	; 8
    2966:	4a ea       	ldi	r20, 0xAA	; 170
    2968:	51 e0       	ldi	r21, 0x01	; 1
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
    2972:	ce ef       	ldi	r28, 0xFE	; 254
    2974:	d0 e0       	ldi	r29, 0x00	; 0
    2976:	0a c0       	rjmp	.+20     	; 0x298c <SD_init+0x76>
    2978:	88 e0       	ldi	r24, 0x08	; 8
    297a:	4a ea       	ldi	r20, 0xAA	; 170
    297c:	51 e0       	ldi	r21, 0x01	; 1
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
    2986:	21 97       	sbiw	r28, 0x01	; 1
retry++;
if(retry>0xfe) 
    2988:	09 f4       	brne	.+2      	; 0x298c <SD_init+0x76>
    298a:	5a c0       	rjmp	.+180    	; 0x2a40 <SD_init+0x12a>
	  SD_version = 1;
	  cardType = 1;
	  break;
   } //time out

}while(response != 0x01);
    298c:	81 30       	cpi	r24, 0x01	; 1
    298e:	a1 f7       	brne	.-24     	; 0x2978 <SD_init+0x62>
SPI_transmit (0xff);
SPI_transmit (0xff);

retry = 0;

SD_version = 2; //default set to SD compliance with ver2.x; 
    2990:	12 e0       	ldi	r17, 0x02	; 2

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    2992:	87 e3       	ldi	r24, 0x37	; 55
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	70 e0       	ldi	r23, 0x00	; 0
    299c:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    29a0:	89 e2       	ldi	r24, 0x29	; 41
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	60 e0       	ldi	r22, 0x00	; 0
    29a8:	70 e4       	ldi	r23, 0x40	; 64
    29aa:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
    29ae:	ce ef       	ldi	r28, 0xFE	; 254
    29b0:	d0 e0       	ldi	r29, 0x00	; 0
    29b2:	11 c0       	rjmp	.+34     	; 0x29d6 <SD_init+0xc0>

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    29b4:	87 e3       	ldi	r24, 0x37	; 55
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	50 e0       	ldi	r21, 0x00	; 0
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    29c2:	89 e2       	ldi	r24, 0x29	; 41
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	70 e4       	ldi	r23, 0x40	; 64
    29cc:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
    29d0:	21 97       	sbiw	r28, 0x01	; 1

retry++;
if(retry>0xfe) 
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <SD_init+0xc0>
    29d4:	40 c0       	rjmp	.+128    	; 0x2a56 <SD_init+0x140>
   {
      TX_NEWLINE;
	  return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
    29d6:	88 23       	and	r24, r24
    29d8:	69 f7       	brne	.-38     	; 0x29b4 <SD_init+0x9e>


retry = 0;
SDHC_flag = 0;
    29da:	10 92 ab 02 	sts	0x02AB, r1

if (SD_version == 2)
    29de:	12 30       	cpi	r17, 0x02	; 2
    29e0:	21 f0       	breq	.+8      	; 0x29ea <SD_init+0xd4>
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	1f 91       	pop	r17
    29e8:	08 95       	ret

if (SD_version == 2)
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    29ea:	8a e3       	ldi	r24, 0x3A	; 58
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	50 e0       	ldi	r21, 0x00	; 0
    29f0:	60 e0       	ldi	r22, 0x00	; 0
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
    29f8:	ce ef       	ldi	r28, 0xFE	; 254
    29fa:	d0 e0       	ldi	r29, 0x00	; 0
    29fc:	09 c0       	rjmp	.+18     	; 0x2a10 <SD_init+0xfa>
    29fe:	8a e3       	ldi	r24, 0x3A	; 58
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	50 e0       	ldi	r21, 0x00	; 0
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
    2a0c:	21 97       	sbiw	r28, 0x01	; 1
	 retry++;
	 if(retry>0xfe) 
    2a0e:	59 f1       	breq	.+86     	; 0x2a66 <SD_init+0x150>
       TX_NEWLINE;
	   cardType = 0;
	   break;
     } //time out

   }while(response != 0x00);
    2a10:	88 23       	and	r24, r24
    2a12:	a9 f7       	brne	.-22     	; 0x29fe <SD_init+0xe8>

   if(SDHC_flag == 1) cardType = 2;
    2a14:	80 91 ab 02 	lds	r24, 0x02AB
    2a18:	81 30       	cpi	r24, 0x01	; 1
    2a1a:	69 f0       	breq	.+26     	; 0x2a36 <SD_init+0x120>
   else cardType = 3;
    2a1c:	83 e0       	ldi	r24, 0x03	; 3
    2a1e:	80 93 b6 02 	sts	0x02B6, r24

//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
    2a22:	80 e0       	ldi	r24, 0x00	; 0
}
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	1f 91       	pop	r17
    2a2a:	08 95       	ret
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
   retry++;
   if(retry>0x20) 
   	  return 1;   //time out, card not detected
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    2a2e:	df 91       	pop	r29
    2a30:	cf 91       	pop	r28
    2a32:	1f 91       	pop	r17
    2a34:	08 95       	ret
	   break;
     } //time out

   }while(response != 0x00);

   if(SDHC_flag == 1) cardType = 2;
    2a36:	82 e0       	ldi	r24, 0x02	; 2
    2a38:	80 93 b6 02 	sts	0x02B6, r24

//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	d1 cf       	rjmp	.-94     	; 0x29e2 <SD_init+0xcc>
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
retry++;
if(retry>0xfe) 
   {
	  TX_NEWLINE;
    2a40:	8d e0       	ldi	r24, 0x0D	; 13
    2a42:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2a46:	8a e0       	ldi	r24, 0x0A	; 10
    2a48:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	  SD_version = 1;
	  cardType = 1;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	80 93 b6 02 	sts	0x02B6, r24
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
retry++;
if(retry>0xfe) 
   {
	  TX_NEWLINE;
	  SD_version = 1;
    2a52:	11 e0       	ldi	r17, 0x01	; 1
	  cardType = 1;
	  break;
    2a54:	9e cf       	rjmp	.-196    	; 0x2992 <SD_init+0x7c>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41

retry++;
if(retry>0xfe) 
   {
      TX_NEWLINE;
    2a56:	8d e0       	ldi	r24, 0x0D	; 13
    2a58:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2a5c:	8a e0       	ldi	r24, 0x0A	; 10
    2a5e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	  return 2;  //time out, card initialization failed
    2a62:	82 e0       	ldi	r24, 0x02	; 2
    2a64:	be cf       	rjmp	.-132    	; 0x29e2 <SD_init+0xcc>
   {
	 response = SD_sendCommand(READ_OCR,0);
	 retry++;
	 if(retry>0xfe) 
     {
       TX_NEWLINE;
    2a66:	8d e0       	ldi	r24, 0x0D	; 13
    2a68:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2a6c:	8a e0       	ldi	r24, 0x0A	; 10
    2a6e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	   cardType = 0;
    2a72:	10 92 b6 02 	sts	0x02B6, r1
	   break;
    2a76:	ce cf       	rjmp	.-100    	; 0x2a14 <SD_init+0xfe>

00002a78 <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    2a78:	af 92       	push	r10
    2a7a:	bf 92       	push	r11
    2a7c:	cf 92       	push	r12
    2a7e:	df 92       	push	r13
    2a80:	ef 92       	push	r14
    2a82:	ff 92       	push	r15
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	7b 01       	movw	r14, r22
    2a8a:	8c 01       	movw	r16, r24
    2a8c:	59 01       	movw	r10, r18
    2a8e:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    2a90:	80 e2       	ldi	r24, 0x20	; 32
    2a92:	b8 01       	movw	r22, r16
    2a94:	a7 01       	movw	r20, r14
    2a96:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    2a9a:	88 23       	and	r24, r24
    2a9c:	49 f0       	breq	.+18     	; 0x2ab0 <SD_erase+0x38>
response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
if(response != 0x00)
  return response;

return 0; //normal return
}
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	ff 90       	pop	r15
    2aa4:	ef 90       	pop	r14
    2aa6:	df 90       	pop	r13
    2aa8:	cf 90       	pop	r12
    2aaa:	bf 90       	pop	r11
    2aac:	af 90       	pop	r10
    2aae:	08 95       	ret

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    2ab0:	b8 01       	movw	r22, r16
    2ab2:	a7 01       	movw	r20, r14
    2ab4:	41 50       	subi	r20, 0x01	; 1
    2ab6:	50 40       	sbci	r21, 0x00	; 0
    2ab8:	60 40       	sbci	r22, 0x00	; 0
    2aba:	70 40       	sbci	r23, 0x00	; 0
    2abc:	4a 0d       	add	r20, r10
    2abe:	5b 1d       	adc	r21, r11
    2ac0:	6c 1d       	adc	r22, r12
    2ac2:	7d 1d       	adc	r23, r13
    2ac4:	81 e2       	ldi	r24, 0x21	; 33
    2ac6:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
if(response != 0x00)
    2aca:	88 23       	and	r24, r24
    2acc:	41 f7       	brne	.-48     	; 0x2a9e <SD_erase+0x26>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    2ace:	86 e2       	ldi	r24, 0x26	; 38
    2ad0:	40 e0       	ldi	r20, 0x00	; 0
    2ad2:	50 e0       	ldi	r21, 0x00	; 0
    2ad4:	60 e0       	ldi	r22, 0x00	; 0
    2ad6:	70 e0       	ldi	r23, 0x00	; 0
    2ad8:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
    2adc:	e0 cf       	rjmp	.-64     	; 0x2a9e <SD_erase+0x26>

00002ade <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    2ade:	1f 93       	push	r17
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29
    2ae4:	ab 01       	movw	r20, r22
    2ae6:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    2ae8:	81 e1       	ldi	r24, 0x11	; 17
    2aea:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
    2aee:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    2af0:	88 23       	and	r24, r24
    2af2:	f9 f4       	brne	.+62     	; 0x2b32 <SD_readSingleBlock+0x54>

SD_CS_ASSERT;
    2af4:	c1 98       	cbi	0x18, 1	; 24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2af6:	cf ef       	ldi	r28, 0xFF	; 255
    2af8:	df ef       	ldi	r29, 0xFF	; 255
    2afa:	03 c0       	rjmp	.+6      	; 0x2b02 <SD_readSingleBlock+0x24>
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    2afc:	20 97       	sbiw	r28, 0x00	; 0
    2afe:	f1 f0       	breq	.+60     	; 0x2b3c <SD_readSingleBlock+0x5e>
    2b00:	21 97       	sbiw	r28, 0x01	; 1
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2b02:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
    2b06:	8e 3f       	cpi	r24, 0xFE	; 254
    2b08:	c9 f7       	brne	.-14     	; 0x2afc <SD_readSingleBlock+0x1e>
    2b0a:	c0 e0       	ldi	r28, 0x00	; 0
    2b0c:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    2b0e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
    2b12:	fe 01       	movw	r30, r28
    2b14:	eb 55       	subi	r30, 0x5B	; 91
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    2b1a:	21 96       	adiw	r28, 0x01	; 1
    2b1c:	82 e0       	ldi	r24, 0x02	; 2
    2b1e:	c0 30       	cpi	r28, 0x00	; 0
    2b20:	d8 07       	cpc	r29, r24
    2b22:	a9 f7       	brne	.-22     	; 0x2b0e <SD_readSingleBlock+0x30>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    2b24:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
SPI_receive();
    2b28:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    2b2c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
SD_CS_DEASSERT;
    2b30:	c1 9a       	sbi	0x18, 1	; 24

return 0;
}
    2b32:	81 2f       	mov	r24, r17
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	08 95       	ret

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    2b3c:	c1 9a       	sbi	0x18, 1	; 24
    2b3e:	11 e0       	ldi	r17, 0x01	; 1

SPI_receive(); //extra 8 clock pulses
SD_CS_DEASSERT;

return 0;
}
    2b40:	81 2f       	mov	r24, r17
    2b42:	df 91       	pop	r29
    2b44:	cf 91       	pop	r28
    2b46:	1f 91       	pop	r17
    2b48:	08 95       	ret

00002b4a <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	ab 01       	movw	r20, r22
    2b52:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    2b54:	88 e1       	ldi	r24, 0x18	; 24
    2b56:	0e 94 24 14 	call	0x2848	; 0x2848 <SD_sendCommand>
    2b5a:	18 2f       	mov	r17, r24
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    2b5c:	88 23       	and	r24, r24
    2b5e:	29 f0       	breq	.+10     	; 0x2b6a <SD_writeSingleBlock+0x20>
while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;

return 0;
}
    2b60:	81 2f       	mov	r24, r17
    2b62:	df 91       	pop	r29
    2b64:	cf 91       	pop	r28
    2b66:	1f 91       	pop	r17
    2b68:	08 95       	ret

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;
    2b6a:	c1 98       	cbi	0x18, 1	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    2b6c:	8e ef       	ldi	r24, 0xFE	; 254
    2b6e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    2b72:	c0 e0       	ldi	r28, 0x00	; 0
    2b74:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    2b76:	fe 01       	movw	r30, r28
    2b78:	eb 55       	subi	r30, 0x5B	; 91
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    2b82:	21 96       	adiw	r28, 0x01	; 1
    2b84:	82 e0       	ldi	r24, 0x02	; 2
    2b86:	c0 30       	cpi	r28, 0x00	; 0
    2b88:	d8 07       	cpc	r29, r24
    2b8a:	a9 f7       	brne	.-22     	; 0x2b76 <SD_writeSingleBlock+0x2c>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    2b8c:	8f ef       	ldi	r24, 0xFF	; 255
    2b8e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>
SPI_transmit(0xff);
    2b92:	8f ef       	ldi	r24, 0xFF	; 255
    2b94:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>

response = SPI_receive();
    2b98:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2b9c:	98 2f       	mov	r25, r24
    2b9e:	9f 71       	andi	r25, 0x1F	; 31
    2ba0:	95 30       	cpi	r25, 0x05	; 5
    2ba2:	39 f0       	breq	.+14     	; 0x2bb2 <SD_writeSingleBlock+0x68>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    2ba4:	c1 9a       	sbi	0x18, 1	; 24
  return response;
    2ba6:	18 2f       	mov	r17, r24
while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;

return 0;
}
    2ba8:	81 2f       	mov	r24, r17
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	1f 91       	pop	r17
    2bb0:	08 95       	ret
SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
SPI_transmit(0xff);

response = SPI_receive();

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2bb2:	c0 e0       	ldi	r28, 0x00	; 0
    2bb4:	d0 e0       	ldi	r29, 0x00	; 0
    2bb6:	05 c0       	rjmp	.+10     	; 0x2bc2 <SD_writeSingleBlock+0x78>
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2bb8:	8f ef       	ldi	r24, 0xFF	; 255
    2bba:	cf 3f       	cpi	r28, 0xFF	; 255
    2bbc:	d8 07       	cpc	r29, r24
    2bbe:	a1 f0       	breq	.+40     	; 0x2be8 <SD_writeSingleBlock+0x9e>
    2bc0:	21 96       	adiw	r28, 0x01	; 1
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2bc2:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
    2bc6:	88 23       	and	r24, r24
    2bc8:	b9 f3       	breq	.-18     	; 0x2bb8 <SD_writeSingleBlock+0x6e>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    2bca:	c1 9a       	sbi	0x18, 1	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    2bcc:	8f ef       	ldi	r24, 0xFF	; 255
    2bce:	0e 94 01 16 	call	0x2c02	; 0x2c02 <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    2bd2:	c1 98       	cbi	0x18, 1	; 24

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2bd4:	01 c0       	rjmp	.+2      	; 0x2bd8 <SD_writeSingleBlock+0x8e>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2bd6:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2bd8:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <SPI_receive>
    2bdc:	88 23       	and	r24, r24
    2bde:	59 f4       	brne	.+22     	; 0x2bf6 <SD_writeSingleBlock+0xac>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	cf 3f       	cpi	r28, 0xFF	; 255
    2be4:	d8 07       	cpc	r29, r24
    2be6:	b9 f7       	brne	.-18     	; 0x2bd6 <SD_writeSingleBlock+0x8c>
    2be8:	c1 9a       	sbi	0x18, 1	; 24
    2bea:	11 e0       	ldi	r17, 0x01	; 1
SD_CS_DEASSERT;

return 0;
}
    2bec:	81 2f       	mov	r24, r17
    2bee:	df 91       	pop	r29
    2bf0:	cf 91       	pop	r28
    2bf2:	1f 91       	pop	r17
    2bf4:	08 95       	ret
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    2bf6:	c1 9a       	sbi	0x18, 1	; 24

return 0;
    2bf8:	b3 cf       	rjmp	.-154    	; 0x2b60 <SD_writeSingleBlock+0x16>

00002bfa <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    2bfa:	82 e5       	ldi	r24, 0x52	; 82
    2bfc:	8d b9       	out	0x0d, r24	; 13
SPSR = 0x00;
    2bfe:	1e b8       	out	0x0e, r1	; 14
}
    2c00:	08 95       	ret

00002c02 <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    2c02:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    2c04:	77 9b       	sbis	0x0e, 7	; 14
    2c06:	fe cf       	rjmp	.-4      	; 0x2c04 <SPI_transmit+0x2>
data = SPDR;
    2c08:	8f b1       	in	r24, 0x0f	; 15

return(data);
}
    2c0a:	08 95       	ret

00002c0c <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    2c0c:	8f ef       	ldi	r24, 0xFF	; 255
    2c0e:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));
    2c10:	77 9b       	sbis	0x0e, 7	; 14
    2c12:	fe cf       	rjmp	.-4      	; 0x2c10 <SPI_receive+0x4>
data = SPDR;
    2c14:	8f b1       	in	r24, 0x0f	; 15

// Return data register
return data;
}
    2c16:	08 95       	ret

00002c18 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
    2c18:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
    2c1a:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (1 << URSEL) | 0x06;
    2c1c:	86 e8       	ldi	r24, 0x86	; 134
    2c1e:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x17; //set baud rate lo
    2c20:	87 e1       	ldi	r24, 0x17	; 23
    2c22:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
    2c24:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x18;
    2c26:	88 e1       	ldi	r24, 0x18	; 24
    2c28:	8a b9       	out	0x0a, r24	; 10
}
    2c2a:	08 95       	ret

00002c2c <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSRA & (1<<RXC))); 	// Wait for incomming data
    2c2c:	5f 9b       	sbis	0x0b, 7	; 11
    2c2e:	fe cf       	rjmp	.-4      	; 0x2c2c <receiveByte>
	
	status = UCSRA;
    2c30:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
    2c32:	8c b1       	in	r24, 0x0c	; 12
	
	return(data);
}
    2c34:	08 95       	ret

00002c36 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2c36:	5d 9b       	sbis	0x0b, 5	; 11
    2c38:	fe cf       	rjmp	.-4      	; 0x2c36 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2c3a:	8c b9       	out	0x0c, r24	; 12
}
    2c3c:	08 95       	ret

00002c3e <transmitHex>:
//Function to transmit hex format data
//first argument indicates type: CHAR, INT or LONG
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	2b 97       	sbiw	r28, 0x0b	; 11
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";
    2c52:	de 01       	movw	r26, r28
    2c54:	11 96       	adiw	r26, 0x01	; 1
    2c56:	e4 e7       	ldi	r30, 0x74	; 116
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	9b e0       	ldi	r25, 0x0B	; 11
    2c5c:	01 90       	ld	r0, Z+
    2c5e:	0d 92       	st	X+, r0
    2c60:	91 50       	subi	r25, 0x01	; 1
    2c62:	e1 f7       	brne	.-8      	; 0x2c5c <transmitHex+0x1e>

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	a9 f1       	breq	.+106    	; 0x2cd2 <transmitHex+0x94>
if (dataType == LONG) count = 8;
    2c68:	82 30       	cpi	r24, 0x02	; 2
    2c6a:	79 f1       	breq	.+94     	; 0x2cca <transmitHex+0x8c>
    2c6c:	82 e0       	ldi	r24, 0x02	; 2
    2c6e:	fe 01       	movw	r30, r28
    2c70:	32 96       	adiw	r30, 0x02	; 2
    2c72:	0e c0       	rjmp	.+28     	; 0x2c90 <transmitHex+0x52>

for(i=count; i>0; i--)
{
  temp = data % 16;
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
    2c74:	df 01       	movw	r26, r30
    2c76:	a8 0f       	add	r26, r24
    2c78:	b1 1d       	adc	r27, r1
    2c7a:	90 5d       	subi	r25, 0xD0	; 208
    2c7c:	9c 93       	st	X, r25

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
    2c7e:	81 50       	subi	r24, 0x01	; 1
    2c80:	91 f0       	breq	.+36     	; 0x2ca6 <transmitHex+0x68>
{
  temp = data % 16;
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
  else dataString [i+1] = (temp - 10) + 0x41;

  data = data/16;
    2c82:	94 e0       	ldi	r25, 0x04	; 4
    2c84:	76 95       	lsr	r23
    2c86:	67 95       	ror	r22
    2c88:	57 95       	ror	r21
    2c8a:	47 95       	ror	r20
    2c8c:	9a 95       	dec	r25
    2c8e:	d1 f7       	brne	.-12     	; 0x2c84 <transmitHex+0x46>
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
{
  temp = data % 16;
    2c90:	94 2f       	mov	r25, r20
    2c92:	9f 70       	andi	r25, 0x0F	; 15
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
    2c94:	9a 30       	cpi	r25, 0x0A	; 10
    2c96:	70 f3       	brcs	.-36     	; 0x2c74 <transmitHex+0x36>
  else dataString [i+1] = (temp - 10) + 0x41;
    2c98:	df 01       	movw	r26, r30
    2c9a:	a8 0f       	add	r26, r24
    2c9c:	b1 1d       	adc	r27, r1
    2c9e:	99 5c       	subi	r25, 0xC9	; 201
    2ca0:	9c 93       	st	X, r25

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
    2ca2:	81 50       	subi	r24, 0x01	; 1
    2ca4:	71 f7       	brne	.-36     	; 0x2c82 <transmitHex+0x44>
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	88 23       	and	r24, r24
    2caa:	31 f0       	breq	.+12     	; 0x2cb8 <transmitHex+0x7a>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2cac:	5d 9b       	sbis	0x0b, 5	; 11
    2cae:	fe cf       	rjmp	.-4      	; 0x2cac <transmitHex+0x6e>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2cb0:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    2cb2:	81 91       	ld	r24, Z+
    2cb4:	88 23       	and	r24, r24
    2cb6:	d1 f7       	brne	.-12     	; 0x2cac <transmitHex+0x6e>

  data = data/16;
}

transmitString (dataString);
}
    2cb8:	2b 96       	adiw	r28, 0x0b	; 11
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	cf 91       	pop	r28
    2cc6:	df 91       	pop	r29
    2cc8:	08 95       	ret
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;
    2cca:	88 e0       	ldi	r24, 0x08	; 8
    2ccc:	fe 01       	movw	r30, r28
    2cce:	32 96       	adiw	r30, 0x02	; 2
    2cd0:	df cf       	rjmp	.-66     	; 0x2c90 <transmitHex+0x52>
{
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
    2cd2:	84 e0       	ldi	r24, 0x04	; 4
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	32 96       	adiw	r30, 0x02	; 2
    2cd8:	db cf       	rjmp	.-74     	; 0x2c90 <transmitHex+0x52>

00002cda <transmitString_F>:
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    2cda:	9c 01       	movw	r18, r24
    2cdc:	fc 01       	movw	r30, r24
    2cde:	44 91       	lpm	r20, Z
    2ce0:	44 23       	and	r20, r20
    2ce2:	39 f0       	breq	.+14     	; 0x2cf2 <transmitString_F+0x18>
   transmitByte(pgm_read_byte(&(*string++)));
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	f9 01       	movw	r30, r18
    2ce8:	24 91       	lpm	r18, Z
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2cea:	5d 9b       	sbis	0x0b, 5	; 11
    2cec:	fe cf       	rjmp	.-4      	; 0x2cea <transmitString_F+0x10>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2cee:	2c b9       	out	0x0c, r18	; 12
    2cf0:	f4 cf       	rjmp	.-24     	; 0x2cda <transmitString_F>
    2cf2:	08 95       	ret

00002cf4 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    2cf4:	fc 01       	movw	r30, r24
  while (*string)
    2cf6:	80 81       	ld	r24, Z
    2cf8:	88 23       	and	r24, r24
    2cfa:	39 f0       	breq	.+14     	; 0x2d0a <transmitString+0x16>
}

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
    2cfc:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2cfe:	5d 9b       	sbis	0x0b, 5	; 11
    2d00:	fe cf       	rjmp	.-4      	; 0x2cfe <transmitString+0xa>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2d02:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    2d04:	81 91       	ld	r24, Z+
    2d06:	88 23       	and	r24, r24
    2d08:	d1 f7       	brne	.-12     	; 0x2cfe <transmitString+0xa>
    2d0a:	08 95       	ret

00002d0c <port_init>:
#include "fat32.h"


void port_init(void)
{
PORTA = 0x00;
    2d0c:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
    2d0e:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
    2d10:	8f ee       	ldi	r24, 0xEF	; 239
    2d12:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
    2d14:	8f eb       	ldi	r24, 0xBF	; 191
    2d16:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
    2d18:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
    2d1a:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
    2d1c:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
    2d1e:	8e ef       	ldi	r24, 0xFE	; 254
    2d20:	81 bb       	out	0x11, r24	; 17
}
    2d22:	08 95       	ret

00002d24 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
    2d24:	f8 94       	cli
#include "fat32.h"


void port_init(void)
{
PORTA = 0x00;
    2d26:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
    2d28:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
    2d2a:	8f ee       	ldi	r24, 0xEF	; 239
    2d2c:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
    2d2e:	8f eb       	ldi	r24, 0xBF	; 191
    2d30:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
    2d32:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
    2d34:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
    2d36:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
    2d38:	8e ef       	ldi	r24, 0xFE	; 254
    2d3a:	81 bb       	out	0x11, r24	; 17
//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
 port_init();
 spi_init();
    2d3c:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <spi_init>
 uart0_init();
    2d40:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <uart0_init>

 MCUCR = 0x00;
    2d44:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
    2d46:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x00; //timer interrupt sources
    2d48:	19 be       	out	0x39, r1	; 57
 //all peripherals are now initialized
}
    2d4a:	08 95       	ret

00002d4c <main>:

//*************************** MAIN *******************************//
int main(void)
{
    2d4c:	2f 92       	push	r2
    2d4e:	3f 92       	push	r3
    2d50:	4f 92       	push	r4
    2d52:	5f 92       	push	r5
    2d54:	6f 92       	push	r6
    2d56:	7f 92       	push	r7
    2d58:	8f 92       	push	r8
    2d5a:	9f 92       	push	r9
    2d5c:	af 92       	push	r10
    2d5e:	bf 92       	push	r11
    2d60:	cf 92       	push	r12
    2d62:	df 92       	push	r13
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	2e 97       	sbiw	r28, 0x0e	; 14
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	88 ee       	ldi	r24, 0xE8	; 232
    2d82:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d84:	28 eb       	ldi	r18, 0xB8	; 184
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	f9 01       	movw	r30, r18
    2d8a:	31 97       	sbiw	r30, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <main+0x3e>
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d90:	d9 f7       	brne	.-10     	; 0x2d88 <main+0x3c>
unsigned int i;
unsigned char fileName[13];

_delay_ms(100);  //delay for VCC stabilization

init_devices();
    2d92:	0e 94 92 16 	call	0x2d24	; 0x2d24 <init_devices>

PORTD |= 0x04; //switching ON the LED (for testing purpose only)
    2d96:	92 9a       	sbi	0x12, 2	; 18

TX_NEWLINE;
    2d98:	8d e0       	ldi	r24, 0x0D	; 13
    2d9a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2d9e:	8a e0       	ldi	r24, 0x0A	; 10
    2da0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
TX_NEWLINE;
    2da4:	8d e0       	ldi	r24, 0x0D	; 13
    2da6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2daa:	8a e0       	ldi	r24, 0x0A	; 10
    2dac:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F (PSTR("****************************************************"));
    2db0:	88 e4       	ldi	r24, 0x48	; 72
    2db2:	96 e0       	ldi	r25, 0x06	; 6
    2db4:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
TX_NEWLINE;
    2db8:	8d e0       	ldi	r24, 0x0D	; 13
    2dba:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2dbe:	8a e0       	ldi	r24, 0x0A	; 10
    2dc0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
    2dc4:	80 e2       	ldi	r24, 0x20	; 32
    2dc6:	96 e0       	ldi	r25, 0x06	; 6
    2dc8:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
TX_NEWLINE;
    2dcc:	8d e0       	ldi	r24, 0x0D	; 13
    2dce:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2dd2:	8a e0       	ldi	r24, 0x0A	; 10
    2dd4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F (PSTR("****************************************************"));
    2dd8:	8b ee       	ldi	r24, 0xEB	; 235
    2dda:	95 e0       	ldi	r25, 0x05	; 5
    2ddc:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
TX_NEWLINE;
    2de0:	8d e0       	ldi	r24, 0x0D	; 13
    2de2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2de6:	8a e0       	ldi	r24, 0x0A	; 10
    2de8:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>

cardType = 0;
    2dec:	10 92 b6 02 	sts	0x02B6, r1

for (i=0; i<10; i++)
    2df0:	00 e0       	ldi	r16, 0x00	; 0
    2df2:	10 e0       	ldi	r17, 0x00	; 0
{
  error = SD_init();
    2df4:	0e 94 8b 14 	call	0x2916	; 0x2916 <SD_init>
  if(!error) break;
    2df8:	88 23       	and	r24, r24
    2dfa:	61 f0       	breq	.+24     	; 0x2e14 <main+0xc8>
transmitString_F (PSTR("****************************************************"));
TX_NEWLINE;

cardType = 0;

for (i=0; i<10; i++)
    2dfc:	0f 5f       	subi	r16, 0xFF	; 255
    2dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2e00:	0a 30       	cpi	r16, 0x0A	; 10
    2e02:	11 05       	cpc	r17, r1
    2e04:	b9 f7       	brne	.-18     	; 0x2df4 <main+0xa8>
  if(!error) break;
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    2e06:	81 30       	cpi	r24, 0x01	; 1
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <main+0xc0>
    2e0a:	16 c3       	rjmp	.+1580   	; 0x3438 <main+0x6ec>
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    2e0c:	82 30       	cpi	r24, 0x02	; 2
    2e0e:	09 f4       	brne	.+2      	; 0x2e12 <main+0xc6>
    2e10:	0e c3       	rjmp	.+1564   	; 0x342e <main+0x6e2>
    2e12:	ff cf       	rjmp	.-2      	; 0x2e12 <main+0xc6>

  while(1);  //wait here forever if error in SD init 
}

switch (cardType)
    2e14:	80 91 b6 02 	lds	r24, 0x02B6
    2e18:	82 30       	cpi	r24, 0x02	; 2
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <main+0xd2>
    2e1c:	03 c3       	rjmp	.+1542   	; 0x3424 <main+0x6d8>
    2e1e:	83 30       	cpi	r24, 0x03	; 3
    2e20:	09 f4       	brne	.+2      	; 0x2e24 <main+0xd8>
    2e22:	e8 c2       	rjmp	.+1488   	; 0x33f4 <main+0x6a8>
    2e24:	81 30       	cpi	r24, 0x01	; 1
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <main+0xde>
    2e28:	e0 c2       	rjmp	.+1472   	; 0x33ea <main+0x69e>
  		 break;
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
  		 break;
  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
  		 break;
  default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    2e2a:	8a e2       	ldi	r24, 0x2A	; 42
    2e2c:	95 e0       	ldi	r25, 0x05	; 5
    2e2e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  		 break; 
}


SPI_HIGH_SPEED;	//SCK - 4 MHz
    2e32:	80 e5       	ldi	r24, 0x50	; 80
    2e34:	8d b9       	out	0x0d, r24	; 13
    2e36:	70 9a       	sbi	0x0e, 0	; 14
    2e38:	83 e3       	ldi	r24, 0x33	; 51
    2e3a:	97 e0       	ldi	r25, 0x07	; 7
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <main+0xf0>
_delay_ms(1);   //some delay


FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    2e40:	0e 94 8f 04 	call	0x91e	; 0x91e <getBootSectorData>
if(error) 	
    2e44:	88 23       	and	r24, r24
    2e46:	09 f0       	breq	.+2      	; 0x2e4a <main+0xfe>
    2e48:	da c2       	rjmp	.+1460   	; 0x33fe <main+0x6b2>

SPI_HIGH_SPEED;	//SCK - 4 MHz
_delay_ms(1);   //some delay


FAT32_active = 1;
    2e4a:	cc 24       	eor	r12, r12
    2e4c:	c3 94       	inc	r12
    2e4e:	3e 01       	movw	r6, r28
    2e50:	08 94       	sec
    2e52:	61 1c       	adc	r6, r1
    2e54:	71 1c       	adc	r7, r1
    2e56:	8e 01       	movw	r16, r28
    2e58:	02 5f       	subi	r16, 0xF2	; 242
    2e5a:	1f 4f       	sbci	r17, 0xFF	; 255
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f);
TX_NEWLINE;
}

totalBlocks = 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	88 2e       	mov	r8, r24
    2e60:	91 2c       	mov	r9, r1
    2e62:	a1 2c       	mov	r10, r1
    2e64:	b1 2c       	mov	r11, r1
{
TX_NEWLINE;
TX_NEWLINE;
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
data = receiveByte(); transmitByte(data);
startBlock = (data & 0x0f) * 1000;
    2e66:	b8 ee       	ldi	r27, 0xE8	; 232
    2e68:	4b 2e       	mov	r4, r27
    2e6a:	b3 e0       	ldi	r27, 0x03	; 3
    2e6c:	5b 2e       	mov	r5, r27
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f) * 100;
    2e6e:	a4 e6       	ldi	r26, 0x64	; 100
    2e70:	2a 2e       	mov	r2, r26
    2e72:	31 2c       	mov	r3, r1
    2e74:	28 c0       	rjmp	.+80     	; 0x2ec6 <main+0x17a>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    2e76:	82 33       	cpi	r24, 0x32	; 50
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <main+0x130>
    2e7a:	ee c1       	rjmp	.+988    	; 0x3258 <main+0x50c>
    2e7c:	83 33       	cpi	r24, 0x33	; 51
    2e7e:	08 f0       	brcs	.+2      	; 0x2e82 <main+0x136>
    2e80:	77 c1       	rjmp	.+750    	; 0x3170 <main+0x424>
    2e82:	80 33       	cpi	r24, 0x30	; 48
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <main+0x13c>
    2e86:	73 c2       	rjmp	.+1254   	; 0x336e <main+0x622>
    2e88:	81 33       	cpi	r24, 0x31	; 49
    2e8a:	09 f4       	brne	.+2      	; 0x2e8e <main+0x142>
    2e8c:	1e c2       	rjmp	.+1084   	; 0x32ca <main+0x57e>
		  break;
case 'c': 
case 'C': RTC_updateTime();
	      break;

default: TX_NEWLINE;
    2e8e:	8d e0       	ldi	r24, 0x0D	; 13
    2e90:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2e94:	8a e0       	ldi	r24, 0x0A	; 10
    2e96:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
         TX_NEWLINE;
    2e9a:	8d e0       	ldi	r24, 0x0D	; 13
    2e9c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2ea0:	8a e0       	ldi	r24, 0x0A	; 10
    2ea2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
         transmitString_F(PSTR(" Invalid option!"));
    2ea6:	88 ef       	ldi	r24, 0xF8	; 248
    2ea8:	92 e0       	ldi	r25, 0x02	; 2
    2eaa:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
         TX_NEWLINE;
    2eae:	8d e0       	ldi	r24, 0x0D	; 13
    2eb0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2eb4:	8a e0       	ldi	r24, 0x0A	; 10
    2eb6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
}

TX_NEWLINE;
    2eba:	8d e0       	ldi	r24, 0x0D	; 13
    2ebc:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2ec0:	8a e0       	ldi	r24, 0x0A	; 10
    2ec2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  FAT32_active = 0;
}

while(1)
{
TX_NEWLINE;
    2ec6:	8d e0       	ldi	r24, 0x0D	; 13
    2ec8:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2ecc:	8a e0       	ldi	r24, 0x0A	; 10
    2ece:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F(PSTR("Press any key..."));
    2ed2:	88 e0       	ldi	r24, 0x08	; 8
    2ed4:	95 e0       	ldi	r25, 0x05	; 5
    2ed6:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
TX_NEWLINE;
    2eda:	8d e0       	ldi	r24, 0x0D	; 13
    2edc:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2ee0:	8a e0       	ldi	r24, 0x0A	; 10
    2ee2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
option = receiveByte();
    2ee6:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
TX_NEWLINE;
    2eea:	8d e0       	ldi	r24, 0x0D	; 13
    2eec:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2ef0:	8a e0       	ldi	r24, 0x0A	; 10
    2ef2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F(PSTR("> 0: Erase Blocks "));
    2ef6:	85 ef       	ldi	r24, 0xF5	; 245
    2ef8:	94 e0       	ldi	r25, 0x04	; 4
    2efa:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
TX_NEWLINE;
    2efe:	8d e0       	ldi	r24, 0x0D	; 13
    2f00:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2f04:	8a e0       	ldi	r24, 0x0A	; 10
    2f06:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F(PSTR("> 1: Write single Block          2: Read single Block"));
    2f0a:	8f eb       	ldi	r24, 0xBF	; 191
    2f0c:	94 e0       	ldi	r25, 0x04	; 4
    2f0e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
#ifndef FAT_TESTING_ONLY
TX_NEWLINE;
transmitString_F(PSTR("> 3: Write multiple Blocks       4: Read multiple Blocks"));
#endif

TX_NEWLINE;
    2f12:	8d e0       	ldi	r24, 0x0D	; 13
    2f14:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2f18:	8a e0       	ldi	r24, 0x0A	; 10
    2f1a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F(PSTR("> 5: Get file list               6: Read File"));
    2f1e:	81 e9       	ldi	r24, 0x91	; 145
    2f20:	94 e0       	ldi	r25, 0x04	; 4
    2f22:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
TX_NEWLINE;
    2f26:	8d e0       	ldi	r24, 0x0D	; 13
    2f28:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2f2c:	8a e0       	ldi	r24, 0x0A	; 10
    2f2e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F(PSTR("> 7: Write File                  8: Delete File"));
    2f32:	81 e6       	ldi	r24, 0x61	; 97
    2f34:	94 e0       	ldi	r25, 0x04	; 4
    2f36:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
TX_NEWLINE;
    2f3a:	8d e0       	ldi	r24, 0x0D	; 13
    2f3c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2f40:	8a e0       	ldi	r24, 0x0A	; 10
    2f42:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F(PSTR("> 9: Read SD Memory Capacity     a: Show Date & Time"));
    2f46:	8c e2       	ldi	r24, 0x2C	; 44
    2f48:	94 e0       	ldi	r25, 0x04	; 4
    2f4a:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>

TX_NEWLINE;
    2f4e:	8d e0       	ldi	r24, 0x0D	; 13
    2f50:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2f54:	8a e0       	ldi	r24, 0x0A	; 10
    2f56:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F(PSTR("> b: Update Date                 c: Update Time"));
    2f5a:	8c ef       	ldi	r24, 0xFC	; 252
    2f5c:	93 e0       	ldi	r25, 0x03	; 3
    2f5e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
TX_NEWLINE;
    2f62:	8d e0       	ldi	r24, 0x0D	; 13
    2f64:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2f68:	8a e0       	ldi	r24, 0x0A	; 10
    2f6a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>

TX_NEWLINE;
    2f6e:	8d e0       	ldi	r24, 0x0D	; 13
    2f70:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2f74:	8a e0       	ldi	r24, 0x0A	; 10
    2f76:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
TX_NEWLINE;
    2f7a:	8d e0       	ldi	r24, 0x0D	; 13
    2f7c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2f80:	8a e0       	ldi	r24, 0x0A	; 10
    2f82:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F(PSTR("> Select Option (0-9/a/b/c): "));
    2f86:	8e ed       	ldi	r24, 0xDE	; 222
    2f88:	93 e0       	ldi	r25, 0x03	; 3
    2f8a:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>

/*WARNING: If option 0, 1 or 3 is selected, the card data may not be detected by PC/Laptop again,
as it may disturb the FAT format. In such a case you will need to format the card again with FAT32.
This options are given for learnig the raw data transfer to & from the SD Card*/

option = receiveByte();
    2f8e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    2f92:	d8 2e       	mov	r13, r24
transmitByte(option);
    2f94:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    2f98:	8d 2d       	mov	r24, r13
    2f9a:	85 53       	subi	r24, 0x35	; 53
    2f9c:	85 30       	cpi	r24, 0x05	; 5
    2f9e:	18 f4       	brcc	.+6      	; 0x2fa6 <main+0x25a>
{
  if(!FAT32_active) 
    2fa0:	cc 20       	and	r12, r12
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <main+0x25a>
    2fa4:	c5 c0       	rjmp	.+394    	; 0x3130 <main+0x3e4>
	continue;
  } 
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    2fa6:	8d 2d       	mov	r24, r13
    2fa8:	80 53       	subi	r24, 0x30	; 48
    2faa:	85 30       	cpi	r24, 0x05	; 5
    2fac:	f8 f0       	brcs	.+62     	; 0x2fec <main+0x2a0>
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f);
TX_NEWLINE;
}

totalBlocks = 1;
    2fae:	80 92 ac 02 	sts	0x02AC, r8
    2fb2:	90 92 ad 02 	sts	0x02AD, r9
    2fb6:	a0 92 ae 02 	sts	0x02AE, r10
    2fba:	b0 92 af 02 	sts	0x02AF, r11
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    2fbe:	8d 2d       	mov	r24, r13
    2fc0:	89 33       	cpi	r24, 0x39	; 57
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <main+0x27a>
    2fc4:	f7 c1       	rjmp	.+1006   	; 0x33b4 <main+0x668>
    2fc6:	8a 33       	cpi	r24, 0x3A	; 58
    2fc8:	08 f4       	brcc	.+2      	; 0x2fcc <main+0x280>
    2fca:	55 cf       	rjmp	.-342    	; 0x2e76 <main+0x12a>
    2fcc:	8d 2d       	mov	r24, r13
    2fce:	83 34       	cpi	r24, 0x43	; 67
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <main+0x288>
    2fd2:	ed c1       	rjmp	.+986    	; 0x33ae <main+0x662>
    2fd4:	84 34       	cpi	r24, 0x44	; 68
    2fd6:	08 f0       	brcs	.+2      	; 0x2fda <main+0x28e>
    2fd8:	bc c0       	rjmp	.+376    	; 0x3152 <main+0x406>
    2fda:	81 34       	cpi	r24, 0x41	; 65
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <main+0x294>
    2fde:	c3 c0       	rjmp	.+390    	; 0x3166 <main+0x41a>
    2fe0:	82 34       	cpi	r24, 0x42	; 66
    2fe2:	09 f0       	breq	.+2      	; 0x2fe6 <main+0x29a>
    2fe4:	54 cf       	rjmp	.-344    	; 0x2e8e <main+0x142>
case 'a': 
case 'A': RTC_displayDate();
		  RTC_displayTime();
		  break;
case 'b': 
case 'B': RTC_updateDate();
    2fe6:	0e 94 c5 12 	call	0x258a	; 0x258a <RTC_updateDate>
		  break;
    2fea:	67 cf       	rjmp	.-306    	; 0x2eba <main+0x16e>
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
{
TX_NEWLINE;
    2fec:	8d e0       	ldi	r24, 0x0D	; 13
    2fee:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2ff2:	8a e0       	ldi	r24, 0x0A	; 10
    2ff4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
TX_NEWLINE;
    2ff8:	8d e0       	ldi	r24, 0x0D	; 13
    2ffa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    2ffe:	8a e0       	ldi	r24, 0x0A	; 10
    3000:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    3004:	82 ea       	ldi	r24, 0xA2	; 162
    3006:	93 e0       	ldi	r25, 0x03	; 3
    3008:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
data = receiveByte(); transmitByte(data);
    300c:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    3010:	e8 2e       	mov	r14, r24
    3012:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
startBlock = (data & 0x0f) * 1000;
    3016:	2e 2d       	mov	r18, r14
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	2f 70       	andi	r18, 0x0F	; 15
    301c:	30 70       	andi	r19, 0x00	; 0
    301e:	24 9d       	mul	r18, r4
    3020:	c0 01       	movw	r24, r0
    3022:	25 9d       	mul	r18, r5
    3024:	90 0d       	add	r25, r0
    3026:	34 9d       	mul	r19, r4
    3028:	90 0d       	add	r25, r0
    302a:	11 24       	eor	r1, r1
    302c:	aa 27       	eor	r26, r26
    302e:	97 fd       	sbrc	r25, 7
    3030:	a0 95       	com	r26
    3032:	ba 2f       	mov	r27, r26
    3034:	80 93 a1 00 	sts	0x00A1, r24
    3038:	90 93 a2 00 	sts	0x00A2, r25
    303c:	a0 93 a3 00 	sts	0x00A3, r26
    3040:	b0 93 a4 00 	sts	0x00A4, r27
data = receiveByte(); transmitByte(data);
    3044:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    3048:	e8 2e       	mov	r14, r24
    304a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
startBlock += (data & 0x0f) * 100;
    304e:	60 91 a1 00 	lds	r22, 0x00A1
    3052:	70 91 a2 00 	lds	r23, 0x00A2
    3056:	80 91 a3 00 	lds	r24, 0x00A3
    305a:	90 91 a4 00 	lds	r25, 0x00A4
    305e:	4e 2d       	mov	r20, r14
    3060:	50 e0       	ldi	r21, 0x00	; 0
    3062:	4f 70       	andi	r20, 0x0F	; 15
    3064:	50 70       	andi	r21, 0x00	; 0
    3066:	42 9d       	mul	r20, r2
    3068:	90 01       	movw	r18, r0
    306a:	43 9d       	mul	r20, r3
    306c:	30 0d       	add	r19, r0
    306e:	52 9d       	mul	r21, r2
    3070:	30 0d       	add	r19, r0
    3072:	11 24       	eor	r1, r1
    3074:	44 27       	eor	r20, r20
    3076:	37 fd       	sbrc	r19, 7
    3078:	40 95       	com	r20
    307a:	54 2f       	mov	r21, r20
    307c:	26 0f       	add	r18, r22
    307e:	37 1f       	adc	r19, r23
    3080:	48 1f       	adc	r20, r24
    3082:	59 1f       	adc	r21, r25
    3084:	20 93 a1 00 	sts	0x00A1, r18
    3088:	30 93 a2 00 	sts	0x00A2, r19
    308c:	40 93 a3 00 	sts	0x00A3, r20
    3090:	50 93 a4 00 	sts	0x00A4, r21
data = receiveByte(); transmitByte(data);
    3094:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    3098:	e8 2e       	mov	r14, r24
    309a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
startBlock += (data & 0x0f) * 10;
    309e:	60 91 a1 00 	lds	r22, 0x00A1
    30a2:	70 91 a2 00 	lds	r23, 0x00A2
    30a6:	80 91 a3 00 	lds	r24, 0x00A3
    30aa:	90 91 a4 00 	lds	r25, 0x00A4
    30ae:	4e 2d       	mov	r20, r14
    30b0:	50 e0       	ldi	r21, 0x00	; 0
    30b2:	4f 70       	andi	r20, 0x0F	; 15
    30b4:	50 70       	andi	r21, 0x00	; 0
    30b6:	9a 01       	movw	r18, r20
    30b8:	22 0f       	add	r18, r18
    30ba:	33 1f       	adc	r19, r19
    30bc:	44 0f       	add	r20, r20
    30be:	55 1f       	adc	r21, r21
    30c0:	44 0f       	add	r20, r20
    30c2:	55 1f       	adc	r21, r21
    30c4:	44 0f       	add	r20, r20
    30c6:	55 1f       	adc	r21, r21
    30c8:	24 0f       	add	r18, r20
    30ca:	35 1f       	adc	r19, r21
    30cc:	44 27       	eor	r20, r20
    30ce:	37 fd       	sbrc	r19, 7
    30d0:	40 95       	com	r20
    30d2:	54 2f       	mov	r21, r20
    30d4:	26 0f       	add	r18, r22
    30d6:	37 1f       	adc	r19, r23
    30d8:	48 1f       	adc	r20, r24
    30da:	59 1f       	adc	r21, r25
    30dc:	20 93 a1 00 	sts	0x00A1, r18
    30e0:	30 93 a2 00 	sts	0x00A2, r19
    30e4:	40 93 a3 00 	sts	0x00A3, r20
    30e8:	50 93 a4 00 	sts	0x00A4, r21
data = receiveByte(); transmitByte(data);
    30ec:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    30f0:	e8 2e       	mov	r14, r24
    30f2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
startBlock += (data & 0x0f);
    30f6:	20 91 a1 00 	lds	r18, 0x00A1
    30fa:	30 91 a2 00 	lds	r19, 0x00A2
    30fe:	40 91 a3 00 	lds	r20, 0x00A3
    3102:	50 91 a4 00 	lds	r21, 0x00A4
    3106:	8e 2d       	mov	r24, r14
    3108:	8f 70       	andi	r24, 0x0F	; 15
    310a:	28 0f       	add	r18, r24
    310c:	31 1d       	adc	r19, r1
    310e:	41 1d       	adc	r20, r1
    3110:	51 1d       	adc	r21, r1
    3112:	20 93 a1 00 	sts	0x00A1, r18
    3116:	30 93 a2 00 	sts	0x00A2, r19
    311a:	40 93 a3 00 	sts	0x00A3, r20
    311e:	50 93 a4 00 	sts	0x00A4, r21
TX_NEWLINE;
    3122:	8d e0       	ldi	r24, 0x0D	; 13
    3124:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    3128:	8a e0       	ldi	r24, 0x0A	; 10
    312a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    312e:	3f cf       	rjmp	.-386    	; 0x2fae <main+0x262>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
{
  if(!FAT32_active) 
  {
    TX_NEWLINE;
    3130:	8d e0       	ldi	r24, 0x0D	; 13
    3132:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    3136:	8a e0       	ldi	r24, 0x0A	; 10
    3138:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    TX_NEWLINE;
    313c:	8d e0       	ldi	r24, 0x0D	; 13
    313e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    3142:	8a e0       	ldi	r24, 0x0A	; 10
    3144:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	transmitString_F(PSTR("FAT32 options disabled!"));
    3148:	86 ec       	ldi	r24, 0xC6	; 198
    314a:	93 e0       	ldi	r25, 0x03	; 3
    314c:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
	continue;
    3150:	ba ce       	rjmp	.-652    	; 0x2ec6 <main+0x17a>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    3152:	8d 2d       	mov	r24, r13
    3154:	82 36       	cpi	r24, 0x62	; 98
    3156:	09 f4       	brne	.+2      	; 0x315a <main+0x40e>
    3158:	46 cf       	rjmp	.-372    	; 0x2fe6 <main+0x29a>
    315a:	83 36       	cpi	r24, 0x63	; 99
    315c:	09 f4       	brne	.+2      	; 0x3160 <main+0x414>
    315e:	27 c1       	rjmp	.+590    	; 0x33ae <main+0x662>
    3160:	81 36       	cpi	r24, 0x61	; 97
    3162:	09 f0       	breq	.+2      	; 0x3166 <main+0x41a>
    3164:	94 ce       	rjmp	.-728    	; 0x2e8e <main+0x142>

case '9': memoryStatistics();
          break;

case 'a': 
case 'A': RTC_displayDate();
    3166:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <RTC_displayDate>
		  RTC_displayTime();
    316a:	0e 94 1a 11 	call	0x2234	; 0x2234 <RTC_displayTime>
		  break;
    316e:	a5 ce       	rjmp	.-694    	; 0x2eba <main+0x16e>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    3170:	8d 2d       	mov	r24, r13
    3172:	85 33       	cpi	r24, 0x35	; 53
    3174:	09 f4       	brne	.+2      	; 0x3178 <main+0x42c>
    3176:	64 c0       	rjmp	.+200    	; 0x3240 <main+0x4f4>
    3178:	85 33       	cpi	r24, 0x35	; 53
    317a:	08 f4       	brcc	.+2      	; 0x317e <main+0x432>
    317c:	88 ce       	rjmp	.-752    	; 0x2e8e <main+0x142>
  		  findFiles(GET_LIST,0);
          break;

case '6': 
case '7': 
case '8': TX_NEWLINE;
    317e:	8d e0       	ldi	r24, 0x0D	; 13
    3180:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    3184:	8a e0       	ldi	r24, 0x0A	; 10
    3186:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
		  TX_NEWLINE;
    318a:	8d e0       	ldi	r24, 0x0D	; 13
    318c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    3190:	8a e0       	ldi	r24, 0x0A	; 10
    3192:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
          transmitString_F(PSTR("Enter file name: "));
    3196:	8f e1       	ldi	r24, 0x1F	; 31
    3198:	93 e0       	ldi	r25, 0x03	; 3
    319a:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    319e:	f3 01       	movw	r30, r6
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
    31a0:	11 92       	st	Z+, r1
case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
    31a2:	e0 17       	cp	r30, r16
    31a4:	f1 07       	cpc	r31, r17
    31a6:	e1 f7       	brne	.-8      	; 0x31a0 <main+0x454>
    31a8:	ee 24       	eor	r14, r14
    31aa:	ff 24       	eor	r15, r15
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    31ac:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    31b0:	98 2f       	mov	r25, r24
            if(data == 0x0d) break;  //'ENTER' key pressed
    31b2:	8d 30       	cpi	r24, 0x0D	; 13
    31b4:	71 f1       	breq	.+92     	; 0x3212 <main+0x4c6>
			if(data == 0x08)	//'Back Space' key pressed
    31b6:	88 30       	cpi	r24, 0x08	; 8
    31b8:	c1 f0       	breq	.+48     	; 0x31ea <main+0x49e>
	     			transmitByte(data); 
	     			i--; 
	   			} 
	   			continue;     
	 		}
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    31ba:	80 52       	subi	r24, 0x20	; 32
    31bc:	8f 35       	cpi	r24, 0x5F	; 95
    31be:	b0 f7       	brcc	.-20     	; 0x31ac <main+0x460>
			transmitByte(data);
    31c0:	89 2f       	mov	r24, r25
    31c2:	9e 87       	std	Y+14, r25	; 0x0e
    31c4:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
            fileName[i++] = data;
    31c8:	f3 01       	movw	r30, r6
    31ca:	ee 0d       	add	r30, r14
    31cc:	ff 1d       	adc	r31, r15
    31ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d0:	90 83       	st	Z, r25
    31d2:	08 94       	sec
    31d4:	e1 1c       	adc	r14, r1
    31d6:	f1 1c       	adc	r15, r1
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    31d8:	8d e0       	ldi	r24, 0x0D	; 13
    31da:	e8 16       	cp	r14, r24
    31dc:	f1 04       	cpc	r15, r1
    31de:	31 f7       	brne	.-52     	; 0x31ac <main+0x460>
    31e0:	89 e0       	ldi	r24, 0x09	; 9
    31e2:	93 e0       	ldi	r25, 0x03	; 3
    31e4:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    31e8:	68 ce       	rjmp	.-816    	; 0x2eba <main+0x16e>
          {
            data = receiveByte();
            if(data == 0x0d) break;  //'ENTER' key pressed
			if(data == 0x08)	//'Back Space' key pressed
	 		{ 
	   			if(i != 0)
    31ea:	e1 14       	cp	r14, r1
    31ec:	f1 04       	cpc	r15, r1
    31ee:	f1 f2       	breq	.-68     	; 0x31ac <main+0x460>
	   			{ 
	     			transmitByte(data);
    31f0:	88 e0       	ldi	r24, 0x08	; 8
    31f2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
					transmitByte(' '); 
    31f6:	80 e2       	ldi	r24, 0x20	; 32
    31f8:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	     			transmitByte(data); 
    31fc:	88 e0       	ldi	r24, 0x08	; 8
    31fe:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
	     			i--; 
    3202:	08 94       	sec
    3204:	e1 08       	sbc	r14, r1
    3206:	f1 08       	sbc	r15, r1
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    3208:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    320c:	98 2f       	mov	r25, r24
            if(data == 0x0d) break;  //'ENTER' key pressed
    320e:	8d 30       	cpi	r24, 0x0D	; 13
    3210:	91 f6       	brne	.-92     	; 0x31b6 <main+0x46a>
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
			transmitByte(data);
            fileName[i++] = data;
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
          }
          if(i>12) break;
    3212:	8d e0       	ldi	r24, 0x0D	; 13
    3214:	e8 16       	cp	r14, r24
    3216:	f1 04       	cpc	r15, r1
    3218:	08 f0       	brcs	.+2      	; 0x321c <main+0x4d0>
    321a:	4f ce       	rjmp	.-866    	; 0x2eba <main+0x16e>
       
	      TX_NEWLINE;
    321c:	8d e0       	ldi	r24, 0x0D	; 13
    321e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    3222:	8a e0       	ldi	r24, 0x0A	; 10
    3224:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
		  if(option == '6')
    3228:	8d 2d       	mov	r24, r13
    322a:	86 33       	cpi	r24, 0x36	; 54
    322c:	09 f4       	brne	.+2      	; 0x3230 <main+0x4e4>
    322e:	d8 c0       	rjmp	.+432    	; 0x33e0 <main+0x694>
		     readFile( READ, fileName);
		  if(option == '7')
    3230:	8d 2d       	mov	r24, r13
    3232:	87 33       	cpi	r24, 0x37	; 55
    3234:	09 f4       	brne	.+2      	; 0x3238 <main+0x4ec>
    3236:	d0 c0       	rjmp	.+416    	; 0x33d8 <main+0x68c>
		  	 writeFile(fileName);
 		  if(option == '8')
		     deleteFile(fileName);
    3238:	c3 01       	movw	r24, r6
    323a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <deleteFile>
    323e:	3d ce       	rjmp	.-902    	; 0x2eba <main+0x16e>
          else
            transmitString_F(PSTR("Read successful!"));
          break;
#endif

case '5': TX_NEWLINE;
    3240:	8d e0       	ldi	r24, 0x0D	; 13
    3242:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    3246:	8a e0       	ldi	r24, 0x0A	; 10
    3248:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  		  findFiles(GET_LIST,0);
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	70 e0       	ldi	r23, 0x00	; 0
    3252:	0e 94 9b 08 	call	0x1136	; 0x1136 <findFiles>
          break;
    3256:	31 ce       	rjmp	.-926    	; 0x2eba <main+0x16e>
                transmitString_F(PSTR("Write failed.."));
            else
                transmitString_F(PSTR("Write successful!"));
            break;

case '2': error = SD_readSingleBlock (startBlock);
    3258:	60 91 a1 00 	lds	r22, 0x00A1
    325c:	70 91 a2 00 	lds	r23, 0x00A2
    3260:	80 91 a3 00 	lds	r24, 0x00A3
    3264:	90 91 a4 00 	lds	r25, 0x00A4
    3268:	0e 94 6f 15 	call	0x2ade	; 0x2ade <SD_readSingleBlock>
    326c:	e8 2e       	mov	r14, r24
          TX_NEWLINE;
    326e:	8d e0       	ldi	r24, 0x0D	; 13
    3270:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    3274:	8a e0       	ldi	r24, 0x0A	; 10
    3276:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
          if(error)
    327a:	ee 20       	and	r14, r14
    327c:	09 f0       	breq	.+2      	; 0x3280 <main+0x534>
    327e:	a7 c0       	rjmp	.+334    	; 0x33ce <main+0x682>
    3280:	ee 24       	eor	r14, r14
    3282:	ff 24       	eor	r15, r15
    3284:	0b c0       	rjmp	.+22     	; 0x329c <main+0x550>
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
                transmitByte(buffer[i]);
    3286:	80 81       	ld	r24, Z
    3288:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
    328c:	08 94       	sec
    328e:	e1 1c       	adc	r14, r1
    3290:	f1 1c       	adc	r15, r1
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	e8 16       	cp	r14, r24
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	f8 06       	cpc	r15, r24
    329a:	31 f0       	breq	.+12     	; 0x32a8 <main+0x55c>
            {
                if(buffer[i] == '~') break;
    329c:	f7 01       	movw	r30, r14
    329e:	eb 55       	subi	r30, 0x5B	; 91
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	80 81       	ld	r24, Z
    32a4:	8e 37       	cpi	r24, 0x7E	; 126
    32a6:	79 f7       	brne	.-34     	; 0x3286 <main+0x53a>
                transmitByte(buffer[i]);
            }
            TX_NEWLINE;
    32a8:	8d e0       	ldi	r24, 0x0D	; 13
    32aa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    32ae:	8a e0       	ldi	r24, 0x0A	; 10
    32b0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
            TX_NEWLINE;
    32b4:	8d e0       	ldi	r24, 0x0D	; 13
    32b6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    32ba:	8a e0       	ldi	r24, 0x0A	; 10
    32bc:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
            transmitString_F(PSTR("Read successful!"));
    32c0:	81 e3       	ldi	r24, 0x31	; 49
    32c2:	93 e0       	ldi	r25, 0x03	; 3
    32c4:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    32c8:	f8 cd       	rjmp	.-1040   	; 0x2eba <main+0x16e>
              transmitString_F(PSTR("Erase failed.."));
          else
              transmitString_F(PSTR("Erased!"));
          break;

case '1': TX_NEWLINE;
    32ca:	8d e0       	ldi	r24, 0x0D	; 13
    32cc:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    32d0:	8a e0       	ldi	r24, 0x0A	; 10
    32d2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
          transmitString_F(PSTR(" Enter text (End with ~):"));
    32d6:	81 e7       	ldi	r24, 0x71	; 113
    32d8:	93 e0       	ldi	r25, 0x03	; 3
    32da:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
          i=0;
    32de:	ee 24       	eor	r14, r14
    32e0:	ff 24       	eor	r15, r15
    32e2:	08 c0       	rjmp	.+16     	; 0x32f4 <main+0x5a8>
                if(data == 0x0d)
                {
                    transmitByte(0x0a);
                    buffer[i++] = 0x0a;
                }
                if(i == 512) break;
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	e8 16       	cp	r14, r24
    32e8:	82 e0       	ldi	r24, 0x02	; 2
    32ea:	f8 06       	cpc	r15, r24
    32ec:	11 f1       	breq	.+68     	; 0x3332 <main+0x5e6>
            }while (data != '~');
    32ee:	8d 2d       	mov	r24, r13
    32f0:	8e 37       	cpi	r24, 0x7E	; 126
    32f2:	f9 f0       	breq	.+62     	; 0x3332 <main+0x5e6>
case '1': TX_NEWLINE;
          transmitString_F(PSTR(" Enter text (End with ~):"));
          i=0;
            do
            {
                data = receiveByte();
    32f4:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <receiveByte>
    32f8:	d8 2e       	mov	r13, r24
                transmitByte(data);
    32fa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
                buffer[i++] = data;
    32fe:	f7 01       	movw	r30, r14
    3300:	eb 55       	subi	r30, 0x5B	; 91
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	d0 82       	st	Z, r13
    3306:	08 94       	sec
    3308:	e1 1c       	adc	r14, r1
    330a:	f1 1c       	adc	r15, r1
                if(data == 0x0d)
    330c:	8d 2d       	mov	r24, r13
    330e:	8d 30       	cpi	r24, 0x0D	; 13
    3310:	49 f7       	brne	.-46     	; 0x32e4 <main+0x598>
                {
                    transmitByte(0x0a);
    3312:	8a e0       	ldi	r24, 0x0A	; 10
    3314:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
                    buffer[i++] = 0x0a;
    3318:	f7 01       	movw	r30, r14
    331a:	eb 55       	subi	r30, 0x5B	; 91
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	8a e0       	ldi	r24, 0x0A	; 10
    3320:	80 83       	st	Z, r24
    3322:	08 94       	sec
    3324:	e1 1c       	adc	r14, r1
    3326:	f1 1c       	adc	r15, r1
                }
                if(i == 512) break;
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	e8 16       	cp	r14, r24
    332c:	82 e0       	ldi	r24, 0x02	; 2
    332e:	f8 06       	cpc	r15, r24
    3330:	f1 f6       	brne	.-68     	; 0x32ee <main+0x5a2>
            }while (data != '~');

            error = SD_writeSingleBlock (startBlock);
    3332:	60 91 a1 00 	lds	r22, 0x00A1
    3336:	70 91 a2 00 	lds	r23, 0x00A2
    333a:	80 91 a3 00 	lds	r24, 0x00A3
    333e:	90 91 a4 00 	lds	r25, 0x00A4
    3342:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <SD_writeSingleBlock>
    3346:	e8 2e       	mov	r14, r24
            TX_NEWLINE;
    3348:	8d e0       	ldi	r24, 0x0D	; 13
    334a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    334e:	8a e0       	ldi	r24, 0x0A	; 10
    3350:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
            TX_NEWLINE;
    3354:	8d e0       	ldi	r24, 0x0D	; 13
    3356:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    335a:	8a e0       	ldi	r24, 0x0A	; 10
    335c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
            if(error)
    3360:	ee 20       	and	r14, r14
    3362:	81 f1       	breq	.+96     	; 0x33c4 <main+0x678>
                transmitString_F(PSTR("Write failed.."));
    3364:	82 e6       	ldi	r24, 0x62	; 98
    3366:	93 e0       	ldi	r25, 0x03	; 3
    3368:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    336c:	a6 cd       	rjmp	.-1204   	; 0x2eba <main+0x16e>
#endif

switch (option)
{
case '0': //error = SD_erase (block, totalBlocks);
          error = SD_erase (startBlock, totalBlocks);
    336e:	60 91 a1 00 	lds	r22, 0x00A1
    3372:	70 91 a2 00 	lds	r23, 0x00A2
    3376:	80 91 a3 00 	lds	r24, 0x00A3
    337a:	90 91 a4 00 	lds	r25, 0x00A4
    337e:	20 91 ac 02 	lds	r18, 0x02AC
    3382:	30 91 ad 02 	lds	r19, 0x02AD
    3386:	40 91 ae 02 	lds	r20, 0x02AE
    338a:	50 91 af 02 	lds	r21, 0x02AF
    338e:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <SD_erase>
    3392:	e8 2e       	mov	r14, r24
          TX_NEWLINE;
    3394:	8d e0       	ldi	r24, 0x0D	; 13
    3396:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    339a:	8a e0       	ldi	r24, 0x0A	; 10
    339c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
          if(error)
    33a0:	ee 20       	and	r14, r14
    33a2:	59 f0       	breq	.+22     	; 0x33ba <main+0x66e>
              transmitString_F(PSTR("Erase failed.."));
    33a4:	83 e9       	ldi	r24, 0x93	; 147
    33a6:	93 e0       	ldi	r25, 0x03	; 3
    33a8:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    33ac:	86 cd       	rjmp	.-1268   	; 0x2eba <main+0x16e>
		  break;
case 'b': 
case 'B': RTC_updateDate();
		  break;
case 'c': 
case 'C': RTC_updateTime();
    33ae:	0e 94 32 12 	call	0x2464	; 0x2464 <RTC_updateTime>
	      break;
    33b2:	83 cd       	rjmp	.-1274   	; 0x2eba <main+0x16e>
		  	 writeFile(fileName);
 		  if(option == '8')
		     deleteFile(fileName);
          break;

case '9': memoryStatistics();
    33b4:	0e 94 02 07 	call	0xe04	; 0xe04 <memoryStatistics>
          break;
    33b8:	80 cd       	rjmp	.-1280   	; 0x2eba <main+0x16e>
          error = SD_erase (startBlock, totalBlocks);
          TX_NEWLINE;
          if(error)
              transmitString_F(PSTR("Erase failed.."));
          else
              transmitString_F(PSTR("Erased!"));
    33ba:	8b e8       	ldi	r24, 0x8B	; 139
    33bc:	93 e0       	ldi	r25, 0x03	; 3
    33be:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    33c2:	7b cd       	rjmp	.-1290   	; 0x2eba <main+0x16e>
            TX_NEWLINE;
            TX_NEWLINE;
            if(error)
                transmitString_F(PSTR("Write failed.."));
            else
                transmitString_F(PSTR("Write successful!"));
    33c4:	80 e5       	ldi	r24, 0x50	; 80
    33c6:	93 e0       	ldi	r25, 0x03	; 3
    33c8:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    33cc:	76 cd       	rjmp	.-1300   	; 0x2eba <main+0x16e>
            break;

case '2': error = SD_readSingleBlock (startBlock);
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
    33ce:	82 e4       	ldi	r24, 0x42	; 66
    33d0:	93 e0       	ldi	r25, 0x03	; 3
    33d2:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    33d6:	71 cd       	rjmp	.-1310   	; 0x2eba <main+0x16e>
       
	      TX_NEWLINE;
		  if(option == '6')
		     readFile( READ, fileName);
		  if(option == '7')
		  	 writeFile(fileName);
    33d8:	c3 01       	movw	r24, r6
    33da:	0e 94 a8 0b 	call	0x1750	; 0x1750 <writeFile>
    33de:	6d cd       	rjmp	.-1318   	; 0x2eba <main+0x16e>
          }
          if(i>12) break;
       
	      TX_NEWLINE;
		  if(option == '6')
		     readFile( READ, fileName);
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	b3 01       	movw	r22, r6
    33e4:	0e 94 b2 0a 	call	0x1564	; 0x1564 <readFile>
    33e8:	68 cd       	rjmp	.-1328   	; 0x2eba <main+0x16e>
  while(1);  //wait here forever if error in SD init 
}

switch (cardType)
{
  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    33ea:	8c e8       	ldi	r24, 0x8C	; 140
    33ec:	95 e0       	ldi	r25, 0x05	; 5
    33ee:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  		 break;
    33f2:	1f cd       	rjmp	.-1474   	; 0x2e32 <main+0xe6>
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
  		 break;
  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    33f4:	84 e4       	ldi	r24, 0x44	; 68
    33f6:	95 e0       	ldi	r25, 0x05	; 5
    33f8:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  		 break;
    33fc:	1a cd       	rjmp	.-1484   	; 0x2e32 <main+0xe6>

FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
if(error) 	
{
  TX_NEWLINE;
    33fe:	8d e0       	ldi	r24, 0x0D	; 13
    3400:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
    3404:	8a e0       	ldi	r24, 0x0A	; 10
    3406:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <transmitByte>
  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    340a:	89 e1       	ldi	r24, 0x19	; 25
    340c:	95 e0       	ldi	r25, 0x05	; 5
    340e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  FAT32_active = 0;
    3412:	cc 24       	eor	r12, r12
    3414:	3e 01       	movw	r6, r28
    3416:	08 94       	sec
    3418:	61 1c       	adc	r6, r1
    341a:	71 1c       	adc	r7, r1
    341c:	8e 01       	movw	r16, r28
    341e:	02 5f       	subi	r16, 0xF2	; 242
    3420:	1f 4f       	sbci	r17, 0xFF	; 255
    3422:	1c cd       	rjmp	.-1480   	; 0x2e5c <main+0x110>

switch (cardType)
{
  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
  		 break;
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    3424:	8f e6       	ldi	r24, 0x6F	; 111
    3426:	95 e0       	ldi	r25, 0x05	; 5
    3428:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
  		 break;
    342c:	02 cd       	rjmp	.-1532   	; 0x2e32 <main+0xe6>
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    342e:	87 eb       	ldi	r24, 0xB7	; 183
    3430:	95 e0       	ldi	r25, 0x05	; 5
    3432:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    3436:	ed cc       	rjmp	.-1574   	; 0x2e12 <main+0xc6>
  if(!error) break;
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    3438:	84 ed       	ldi	r24, 0xD4	; 212
    343a:	95 e0       	ldi	r25, 0x05	; 5
    343c:	0e 94 6d 16 	call	0x2cda	; 0x2cda <transmitString_F>
    3440:	e8 cc       	rjmp	.-1584   	; 0x2e12 <main+0xc6>

00003442 <__mulsi3>:
    3442:	62 9f       	mul	r22, r18
    3444:	d0 01       	movw	r26, r0
    3446:	73 9f       	mul	r23, r19
    3448:	f0 01       	movw	r30, r0
    344a:	82 9f       	mul	r24, r18
    344c:	e0 0d       	add	r30, r0
    344e:	f1 1d       	adc	r31, r1
    3450:	64 9f       	mul	r22, r20
    3452:	e0 0d       	add	r30, r0
    3454:	f1 1d       	adc	r31, r1
    3456:	92 9f       	mul	r25, r18
    3458:	f0 0d       	add	r31, r0
    345a:	83 9f       	mul	r24, r19
    345c:	f0 0d       	add	r31, r0
    345e:	74 9f       	mul	r23, r20
    3460:	f0 0d       	add	r31, r0
    3462:	65 9f       	mul	r22, r21
    3464:	f0 0d       	add	r31, r0
    3466:	99 27       	eor	r25, r25
    3468:	72 9f       	mul	r23, r18
    346a:	b0 0d       	add	r27, r0
    346c:	e1 1d       	adc	r30, r1
    346e:	f9 1f       	adc	r31, r25
    3470:	63 9f       	mul	r22, r19
    3472:	b0 0d       	add	r27, r0
    3474:	e1 1d       	adc	r30, r1
    3476:	f9 1f       	adc	r31, r25
    3478:	bd 01       	movw	r22, r26
    347a:	cf 01       	movw	r24, r30
    347c:	11 24       	eor	r1, r1
    347e:	08 95       	ret

00003480 <__udivmodsi4>:
    3480:	a1 e2       	ldi	r26, 0x21	; 33
    3482:	1a 2e       	mov	r1, r26
    3484:	aa 1b       	sub	r26, r26
    3486:	bb 1b       	sub	r27, r27
    3488:	fd 01       	movw	r30, r26
    348a:	0d c0       	rjmp	.+26     	; 0x34a6 <__udivmodsi4_ep>

0000348c <__udivmodsi4_loop>:
    348c:	aa 1f       	adc	r26, r26
    348e:	bb 1f       	adc	r27, r27
    3490:	ee 1f       	adc	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	a2 17       	cp	r26, r18
    3496:	b3 07       	cpc	r27, r19
    3498:	e4 07       	cpc	r30, r20
    349a:	f5 07       	cpc	r31, r21
    349c:	20 f0       	brcs	.+8      	; 0x34a6 <__udivmodsi4_ep>
    349e:	a2 1b       	sub	r26, r18
    34a0:	b3 0b       	sbc	r27, r19
    34a2:	e4 0b       	sbc	r30, r20
    34a4:	f5 0b       	sbc	r31, r21

000034a6 <__udivmodsi4_ep>:
    34a6:	66 1f       	adc	r22, r22
    34a8:	77 1f       	adc	r23, r23
    34aa:	88 1f       	adc	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	1a 94       	dec	r1
    34b0:	69 f7       	brne	.-38     	; 0x348c <__udivmodsi4_loop>
    34b2:	60 95       	com	r22
    34b4:	70 95       	com	r23
    34b6:	80 95       	com	r24
    34b8:	90 95       	com	r25
    34ba:	9b 01       	movw	r18, r22
    34bc:	ac 01       	movw	r20, r24
    34be:	bd 01       	movw	r22, r26
    34c0:	cf 01       	movw	r24, r30
    34c2:	08 95       	ret

000034c4 <_exit>:
    34c4:	f8 94       	cli

000034c6 <__stop_program>:
    34c6:	ff cf       	rjmp	.-2      	; 0x34c6 <__stop_program>
