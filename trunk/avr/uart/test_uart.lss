
test_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000033a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800118  00800118  000003e6  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000b4  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000095  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003a2  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001aa  00000000  00000000  00001267  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002f7  00000000  00000000  00001411  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  00001708  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000174  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000240  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000003d  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	5f c0       	rjmp	.+190    	; 0xc2 <__bad_interrupt>
   4:	5e c0       	rjmp	.+188    	; 0xc2 <__bad_interrupt>
   6:	5d c0       	rjmp	.+186    	; 0xc2 <__bad_interrupt>
   8:	5c c0       	rjmp	.+184    	; 0xc2 <__bad_interrupt>
   a:	5b c0       	rjmp	.+182    	; 0xc2 <__bad_interrupt>
   c:	5a c0       	rjmp	.+180    	; 0xc2 <__bad_interrupt>
   e:	59 c0       	rjmp	.+178    	; 0xc2 <__bad_interrupt>
  10:	58 c0       	rjmp	.+176    	; 0xc2 <__bad_interrupt>
  12:	57 c0       	rjmp	.+174    	; 0xc2 <__bad_interrupt>
  14:	56 c0       	rjmp	.+172    	; 0xc2 <__bad_interrupt>
  16:	55 c0       	rjmp	.+170    	; 0xc2 <__bad_interrupt>
  18:	54 c0       	rjmp	.+168    	; 0xc2 <__bad_interrupt>
  1a:	53 c0       	rjmp	.+166    	; 0xc2 <__bad_interrupt>
  1c:	52 c0       	rjmp	.+164    	; 0xc2 <__bad_interrupt>
  1e:	51 c0       	rjmp	.+162    	; 0xc2 <__bad_interrupt>
  20:	50 c0       	rjmp	.+160    	; 0xc2 <__bad_interrupt>
  22:	4f c0       	rjmp	.+158    	; 0xc2 <__bad_interrupt>
  24:	87 c0       	rjmp	.+270    	; 0x134 <__vector_18>
  26:	4d c0       	rjmp	.+154    	; 0xc2 <__bad_interrupt>
  28:	b0 c0       	rjmp	.+352    	; 0x18a <__vector_20>
  2a:	4b c0       	rjmp	.+150    	; 0xc2 <__bad_interrupt>
  2c:	4a c0       	rjmp	.+148    	; 0xc2 <__bad_interrupt>
  2e:	49 c0       	rjmp	.+146    	; 0xc2 <__bad_interrupt>
  30:	48 c0       	rjmp	.+144    	; 0xc2 <__bad_interrupt>
  32:	47 c0       	rjmp	.+142    	; 0xc2 <__bad_interrupt>

00000034 <__c.1532>:
  34:	42 75 66 66 65 72 20 6f 76 65 72 66 6c 6f 77 20     Buffer overflow 
  44:	65 72 72 6f 72 3a 20 00                             error: .

0000004c <__c.1530>:
  4c:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  5c:	6f 72 3a 20 00                                      or: .

00000061 <__c.1528>:
  61:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  71:	3a 20 00                                            : .

00000074 <__c.1526>:
  74:	53 74 72 69 6e 67 20 73 74 6f 72 65 64 20 69 6e     String stored in
  84:	20 46 4c 41 53 48 0a 00                              FLASH..

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d4 e0       	ldi	r29, 0x04	; 4
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a8 31       	cpi	r26, 0x18	; 24
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a8 e1       	ldi	r26, 0x18	; 24
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	ad 35       	cpi	r26, 0x5D	; 93
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	02 d0       	rcall	.+4      	; 0xc4 <main>
  c0:	3a c1       	rjmp	.+628    	; 0x336 <_exit>

000000c2 <__bad_interrupt>:
  c2:	9e cf       	rjmp	.-196    	; 0x0 <__vectors>

000000c4 <main>:
/* 9600 baud */
#define UART_BAUD_RATE      9600      


int main(void)
{
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	27 97       	sbiw	r28, 0x07	; 7
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
  dc:	89 e1       	ldi	r24, 0x19	; 25
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	7e d0       	rcall	.+252    	; 0x1de <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
  e2:	78 94       	sei
     *  The string is buffered by the uart library in a circular buffer
     *  and one character at a time is transmitted to the UART using interrupts.
     *  uart_puts() blocks if it can not write the whole string to the circular 
     *  buffer
     */
    uart_puts("String stored in SRAM\n");
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	c3 d0       	rcall	.+390    	; 0x270 <uart_puts>
    
    /*
     * Transmit string from program memory to UART
     */
    uart_puts_P("String stored in FLASH\n");
  ea:	84 e7       	ldi	r24, 0x74	; 116
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	d3 d0       	rcall	.+422    	; 0x296 <uart_puts_p>
        
    /* 
     * Use standard avr-libc functions to convert numbers into string
     * before transmitting via UART
     */     
    itoa( num, buffer, 10);   // convert interger into string (decimal format)         
  f0:	86 e8       	ldi	r24, 0x86	; 134
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	8e 01       	movw	r16, r28
  f6:	0f 5f       	subi	r16, 0xFF	; 255
  f8:	1f 4f       	sbci	r17, 0xFF	; 255
  fa:	b8 01       	movw	r22, r16
  fc:	4a e0       	ldi	r20, 0x0A	; 10
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	d7 d0       	rcall	.+430    	; 0x2b0 <itoa>
    uart_puts(buffer);        // and transmit string to UART
 102:	c8 01       	movw	r24, r16
 104:	b5 d0       	rcall	.+362    	; 0x270 <uart_puts>

    
    /*
     * Transmit single character to UART
     */
    uart_putc('\r');
 106:	8d e0       	ldi	r24, 0x0D	; 13
 108:	9e d0       	rcall	.+316    	; 0x246 <uart_putc>
         * uart_getc() returns in the lower byte the received character and 
         * in the higher byte (bitmask) the last receive error
         * UART_NO_DATA is returned when no data is available.
         *
         */
        c = uart_getc();
 10a:	82 d0       	rcall	.+260    	; 0x210 <uart_getc>
 10c:	8c 01       	movw	r16, r24
        if ( c & UART_NO_DATA )
 10e:	90 fd       	sbrc	r25, 0
 110:	fc cf       	rjmp	.-8      	; 0x10a <main+0x46>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 112:	93 ff       	sbrs	r25, 3
 114:	03 c0       	rjmp	.+6      	; 0x11c <main+0x58>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 116:	81 e6       	ldi	r24, 0x61	; 97
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	bd d0       	rcall	.+378    	; 0x296 <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 11c:	12 ff       	sbrs	r17, 2
 11e:	03 c0       	rjmp	.+6      	; 0x126 <main+0x62>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 120:	8c e4       	ldi	r24, 0x4C	; 76
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	b8 d0       	rcall	.+368    	; 0x296 <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 126:	11 ff       	sbrs	r17, 1
 128:	03 c0       	rjmp	.+6      	; 0x130 <main+0x6c>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 12a:	84 e3       	ldi	r24, 0x34	; 52
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	b3 d0       	rcall	.+358    	; 0x296 <uart_puts_p>
            }
            /* 
             * send received character back
             */
            uart_putc( (unsigned char)c );
 130:	80 2f       	mov	r24, r16
 132:	ea cf       	rjmp	.-44     	; 0x108 <main+0x44>

00000134 <__vector_18>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 148:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
 14c:	90 91 c6 00 	lds	r25, 0x00C6
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 150:	e0 91 3a 01 	lds	r30, 0x013A
 154:	ef 5f       	subi	r30, 0xFF	; 255
 156:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 158:	20 91 3b 01 	lds	r18, 0x013B
 15c:	e2 17       	cp	r30, r18
 15e:	41 f0       	breq	.+16     	; 0x170 <__vector_18+0x3c>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 160:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 162:	e0 93 3a 01 	sts	0x013A, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	e4 5c       	subi	r30, 0xC4	; 196
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	90 83       	st	Z, r25
 16e:	01 c0       	rjmp	.+2      	; 0x172 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 170:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
 172:	80 93 5c 01 	sts	0x015C, r24
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <__vector_20>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 19c:	90 91 18 01 	lds	r25, 0x0118
 1a0:	80 91 19 01 	lds	r24, 0x0119
 1a4:	98 17       	cp	r25, r24
 1a6:	69 f0       	breq	.+26     	; 0x1c2 <__vector_20+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 1a8:	e0 91 19 01 	lds	r30, 0x0119
 1ac:	ef 5f       	subi	r30, 0xFF	; 255
 1ae:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 1b0:	e0 93 19 01 	sts	0x0119, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	e6 5e       	subi	r30, 0xE6	; 230
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	80 81       	ld	r24, Z
 1bc:	80 93 c6 00 	sts	0x00C6, r24
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <__vector_20+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 1c2:	80 91 c1 00 	lds	r24, 0x00C1
 1c6:	8f 7d       	andi	r24, 0xDF	; 223
 1c8:	80 93 c1 00 	sts	0x00C1, r24
    }
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 1de:	10 92 18 01 	sts	0x0118, r1
    UART_TxTail = 0;
 1e2:	10 92 19 01 	sts	0x0119, r1
    UART_RxHead = 0;
 1e6:	10 92 3a 01 	sts	0x013A, r1
    UART_RxTail = 0;
 1ea:	10 92 3b 01 	sts	0x013B, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 1ee:	97 ff       	sbrs	r25, 7
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 1f2:	22 e0       	ldi	r18, 0x02	; 2
 1f4:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
 1f8:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
 1fa:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
 1fe:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 202:	88 e9       	ldi	r24, 0x98	; 152
 204:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	80 93 c2 00 	sts	0x00C2, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 20e:	08 95       	ret

00000210 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 210:	90 91 3a 01 	lds	r25, 0x013A
 214:	80 91 3b 01 	lds	r24, 0x013B
 218:	98 17       	cp	r25, r24
 21a:	89 f0       	breq	.+34     	; 0x23e <uart_getc+0x2e>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 21c:	e0 91 3b 01 	lds	r30, 0x013B
 220:	ef 5f       	subi	r30, 0xFF	; 255
 222:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 224:	e0 93 3b 01 	sts	0x013B, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	e4 5c       	subi	r30, 0xC4	; 196
 22c:	fe 4f       	sbci	r31, 0xFE	; 254
 22e:	80 81       	ld	r24, Z
    
    return (UART_LastRxError << 8) + data;
 230:	90 91 5c 01 	lds	r25, 0x015C
 234:	39 2f       	mov	r19, r25
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	28 0f       	add	r18, r24
 23a:	31 1d       	adc	r19, r1
 23c:	02 c0       	rjmp	.+4      	; 0x242 <uart_getc+0x32>
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	31 e0       	ldi	r19, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
 242:	c9 01       	movw	r24, r18
 244:	08 95       	ret

00000246 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 246:	90 91 18 01 	lds	r25, 0x0118
 24a:	9f 5f       	subi	r25, 0xFF	; 255
 24c:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 24e:	20 91 19 01 	lds	r18, 0x0119
 252:	92 17       	cp	r25, r18
 254:	e1 f3       	breq	.-8      	; 0x24e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 256:	e9 2f       	mov	r30, r25
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	e6 5e       	subi	r30, 0xE6	; 230
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 260:	90 93 18 01 	sts	0x0118, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 264:	80 91 c1 00 	lds	r24, 0x00C1
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	80 93 c1 00 	sts	0x00C1, r24

}/* uart_putc */
 26e:	08 95       	ret

00000270 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 270:	ef 92       	push	r14
 272:	ff 92       	push	r15
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	e8 2e       	mov	r14, r24
 27a:	e7 01       	movw	r28, r14
 27c:	7e 01       	movw	r14, r28
 27e:	f9 2e       	mov	r15, r25
 280:	e7 01       	movw	r28, r14
    while (*s) 
 282:	01 c0       	rjmp	.+2      	; 0x286 <uart_puts+0x16>
      uart_putc(*s++);
 284:	e0 df       	rcall	.-64     	; 0x246 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 286:	89 91       	ld	r24, Y+
 288:	88 23       	and	r24, r24
 28a:	e1 f7       	brne	.-8      	; 0x284 <uart_puts+0x14>
      uart_putc(*s++);

}/* uart_puts */
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	08 95       	ret

00000296 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <uart_puts_p+0xa>
      uart_putc(c);
 29e:	d3 df       	rcall	.-90     	; 0x246 <uart_putc>
 2a0:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 2a2:	21 96       	adiw	r28, 0x01	; 1
 2a4:	84 91       	lpm	r24, Z
 2a6:	88 23       	and	r24, r24
 2a8:	d1 f7       	brne	.-12     	; 0x29e <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <itoa>:
 2b0:	fb 01       	movw	r30, r22
 2b2:	9f 01       	movw	r18, r30
 2b4:	e8 94       	clt
 2b6:	42 30       	cpi	r20, 0x02	; 2
 2b8:	bc f0       	brlt	.+46     	; 0x2e8 <itoa+0x38>
 2ba:	45 32       	cpi	r20, 0x25	; 37
 2bc:	ac f4       	brge	.+42     	; 0x2e8 <itoa+0x38>
 2be:	4a 30       	cpi	r20, 0x0A	; 10
 2c0:	29 f4       	brne	.+10     	; 0x2cc <itoa+0x1c>
 2c2:	97 fb       	bst	r25, 7
 2c4:	1e f4       	brtc	.+6      	; 0x2cc <itoa+0x1c>
 2c6:	90 95       	com	r25
 2c8:	81 95       	neg	r24
 2ca:	9f 4f       	sbci	r25, 0xFF	; 255
 2cc:	64 2f       	mov	r22, r20
 2ce:	77 27       	eor	r23, r23
 2d0:	1e d0       	rcall	.+60     	; 0x30e <__udivmodhi4>
 2d2:	80 5d       	subi	r24, 0xD0	; 208
 2d4:	8a 33       	cpi	r24, 0x3A	; 58
 2d6:	0c f0       	brlt	.+2      	; 0x2da <itoa+0x2a>
 2d8:	89 5d       	subi	r24, 0xD9	; 217
 2da:	81 93       	st	Z+, r24
 2dc:	cb 01       	movw	r24, r22
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	a9 f7       	brne	.-22     	; 0x2cc <itoa+0x1c>
 2e2:	16 f4       	brtc	.+4      	; 0x2e8 <itoa+0x38>
 2e4:	5d e2       	ldi	r21, 0x2D	; 45
 2e6:	51 93       	st	Z+, r21
 2e8:	10 82       	st	Z, r1
 2ea:	c9 01       	movw	r24, r18
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <strrev>

000002ee <strrev>:
 2ee:	dc 01       	movw	r26, r24
 2f0:	fc 01       	movw	r30, r24
 2f2:	67 2f       	mov	r22, r23
 2f4:	71 91       	ld	r23, Z+
 2f6:	77 23       	and	r23, r23
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <strrev+0x4>
 2fa:	32 97       	sbiw	r30, 0x02	; 2
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <strrev+0x18>
 2fe:	7c 91       	ld	r23, X
 300:	6d 93       	st	X+, r22
 302:	70 83       	st	Z, r23
 304:	62 91       	ld	r22, -Z
 306:	ae 17       	cp	r26, r30
 308:	bf 07       	cpc	r27, r31
 30a:	c8 f3       	brcs	.-14     	; 0x2fe <strrev+0x10>
 30c:	08 95       	ret

0000030e <__udivmodhi4>:
 30e:	aa 1b       	sub	r26, r26
 310:	bb 1b       	sub	r27, r27
 312:	51 e1       	ldi	r21, 0x11	; 17
 314:	07 c0       	rjmp	.+14     	; 0x324 <__udivmodhi4_ep>

00000316 <__udivmodhi4_loop>:
 316:	aa 1f       	adc	r26, r26
 318:	bb 1f       	adc	r27, r27
 31a:	a6 17       	cp	r26, r22
 31c:	b7 07       	cpc	r27, r23
 31e:	10 f0       	brcs	.+4      	; 0x324 <__udivmodhi4_ep>
 320:	a6 1b       	sub	r26, r22
 322:	b7 0b       	sbc	r27, r23

00000324 <__udivmodhi4_ep>:
 324:	88 1f       	adc	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	5a 95       	dec	r21
 32a:	a9 f7       	brne	.-22     	; 0x316 <__udivmodhi4_loop>
 32c:	80 95       	com	r24
 32e:	90 95       	com	r25
 330:	bc 01       	movw	r22, r24
 332:	cd 01       	movw	r24, r26
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
