Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm88p.o (exit)
/usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
                              adc.o (__do_clear_bss)

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00002000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm88p.o
LOAD main.o
LOAD adc.o
LOAD timers.o
LOAD uart.o
LOAD /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000      0x352
 *(.vectors)
 .vectors       0x00000000       0x34 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm88p.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00000034                . = ALIGN (0x2)
                0x00000034                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000034        0x0 linker stubs
 *(.trampolines*)
                0x00000034                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000034                __ctors_start = .
 *(.ctors)
                0x00000034                __ctors_end = .
                0x00000034                __dtors_start = .
 *(.dtors)
                0x00000034                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000034        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm88p.o
                0x00000034                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000034        0xc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm88p.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000040       0x10 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
                0x00000040                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000050        0x4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm88p.o
 *(.init9)
 *(.text)
 .text          0x00000054        0x2 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm88p.o
                0x00000054                __vector_22
                0x00000054                __vector_1
                0x00000054                __vector_24
                0x00000054                __vector_12
                0x00000054                __bad_interrupt
                0x00000054                __vector_6
                0x00000054                __vector_3
                0x00000054                __vector_23
                0x00000054                __vector_25
                0x00000054                __vector_11
                0x00000054                __vector_13
                0x00000054                __vector_17
                0x00000054                __vector_19
                0x00000054                __vector_7
                0x00000054                __vector_5
                0x00000054                __vector_4
                0x00000054                __vector_9
                0x00000054                __vector_2
                0x00000054                __vector_15
                0x00000054                __vector_8
                0x00000054                __vector_14
                0x00000054                __vector_10
 .text          0x00000056       0x24 main.o
                0x00000056                main
 .text          0x0000007a       0xd6 adc.o
                0x0000007a                __vector_21
                0x000000fc                startAdcSequence
                0x00000128                adcInit
 .text          0x00000150       0x80 timers.o
                0x00000150                __vector_16
                0x000001ba                timersInit
 .text          0x000001d0      0x17e uart.o
                0x000001d0                __vector_18
                0x00000228                __vector_20
                0x0000027c                uart_init
                0x000002ae                uart_getc
                0x000002e6                uart_putc
                0x00000310                uart_puts
                0x0000032c                uart_puts_p
 .text          0x0000034e        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .text          0x0000034e        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
                0x0000034e                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x0000034e        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x0000034e        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
                0x0000034e                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000034e        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
                0x0000034e                exit
                0x0000034e                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000034e        0x4 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x00000352                _etext = .

.data           0x00800100        0x0 load address 0x00000352
                0x00800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm88p.o
 .data          0x00800100        0x0 main.o
 .data          0x00800100        0x0 adc.o
 .data          0x00800100        0x0 timers.o
 .data          0x00800100        0x0 uart.o
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800100                . = ALIGN (0x2)
                0x00800100                _edata = .
                0x00800100                PROVIDE (__data_end, .)

.bss            0x00800100       0x52
                0x00800100                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800100        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm88p.o
 .bss           0x00800100        0x0 main.o
 .bss           0x00800100        0x9 adc.o
                0x00800100                adcValues
                0x00800108                adcChan
 .bss           0x00800109        0x4 timers.o
                0x00800109                ticker
                0x0080010b                tocker
 .bss           0x0080010d       0x45 uart.o
 .bss           0x00800152        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_exit.o)
 .bss           0x00800152        0x0 /usr/lib/gcc/avr/4.5.3/avr4/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
                0x00800152                PROVIDE (__bss_end, .)
                0x00000352                __data_load_start = LOADADDR (.data)
                0x00000352                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00800152        0x0
                0x00800152                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800152                PROVIDE (__noinit_end, .)
                0x00800152                _end = .
                0x00800152                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0xe
 *(.eeprom*)
 .eeprom        0x00810000        0xe main.o
                0x00810000                test
                0x0081000e                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000     0x180c
 *(.stab)
 .stab          0x00000000      0x6cc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm88p.o
 .stab          0x000006cc      0x474 main.o
                                0x480 (size before relaxing)
 .stab          0x00000b40      0x348 adc.o
                                0x5dc (size before relaxing)
 .stab          0x00000e88      0x27c timers.o
                                0x510 (size before relaxing)
 .stab          0x00001104      0x708 uart.o
                                0x96c (size before relaxing)

.stabstr        0x00000000      0xd2d
 *(.stabstr)
 .stabstr       0x00000000      0xd2d /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr4/crtm88p.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(avr88Logger.elf elf32-avr)
LOAD linker stubs
