
avr88Logger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000052  00800100  00800100  000003e6  2**0
                  ALLOC
  2 .eeprom       0000000e  00810000  00810000  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         0000180c  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d2d  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	97 c0       	rjmp	.+302    	; 0x150 <__vector_16>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	d5 c0       	rjmp	.+426    	; 0x1d0 <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	ff c0       	rjmp	.+510    	; 0x228 <__vector_20>
  2a:	27 c0       	rjmp	.+78     	; 0x7a <__vector_21>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 35       	cpi	r26, 0x52	; 82
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	7d c1       	rjmp	.+762    	; 0x34e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:

	//
	// init IO ports
	//

	DDRD=0xfc;
  56:	8c ef       	ldi	r24, 0xFC	; 252
  58:	8a b9       	out	0x0a, r24	; 10

    	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU)); 
  5a:	87 e7       	ldi	r24, 0x77	; 119
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	0e d1       	rcall	.+540    	; 0x27c <uart_init>

	adcInit(); 		// initialise ADC
  60:	63 d0       	rcall	.+198    	; 0x128 <adcInit>
	sei();			// enable interrupts
  62:	78 94       	sei
	timersInit();		// initialise Timer Interrupts
  64:	aa d0       	rcall	.+340    	; 0x1ba <timersInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	9f e3       	ldi	r25, 0x3F	; 63
  6a:	ab e0       	ldi	r26, 0x0B	; 11
  6c:	81 50       	subi	r24, 0x01	; 1
  6e:	90 40       	sbci	r25, 0x00	; 0
  70:	a0 40       	sbci	r26, 0x00	; 0
  72:	e1 f7       	brne	.-8      	; 0x6c <main+0x16>
  74:	00 c0       	rjmp	.+0      	; 0x76 <main+0x20>
  76:	00 00       	nop
  78:	f6 cf       	rjmp	.-20     	; 0x66 <main+0x10>

0000007a <__vector_21>:

volatile uint8_t adcValues[8]={0,0,0,0,0,0,0,0};
volatile uint8_t adcChan=0;

ISR(ADC_vect)
{
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1
  84:	8f 93       	push	r24
  86:	9f 93       	push	r25
  88:	ef 93       	push	r30
  8a:	ff 93       	push	r31
	if(PORTD&0x08)
  8c:	5b 9b       	sbis	0x0b, 3	; 11
  8e:	31 c0       	rjmp	.+98     	; 0xf2 <__vector_21+0x78>
	{
		PORTD=(PORTD&0xf7);
  90:	5b 98       	cbi	0x0b, 3	; 11
	else
	{
		PORTD=(PORTD|0x08);
	}

        adcValues[adcChan]=ADCH;
  92:	e0 91 08 01 	lds	r30, 0x0108
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 91 79 00 	lds	r24, 0x0079
  9c:	e0 50       	subi	r30, 0x00	; 0
  9e:	ff 4f       	sbci	r31, 0xFF	; 255
  a0:	80 83       	st	Z, r24

	ADMUX |= (1 << REFS0); // reference voltage set to AVCC
  a2:	80 91 7c 00 	lds	r24, 0x007C
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24
	ADMUX |= (1 << ADLAR); // ADC to 8 bit mode
  ac:	80 91 7c 00 	lds	r24, 0x007C
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	80 93 7c 00 	sts	0x007C, r24
        ADMUX |= adcChan;
  b6:	90 91 7c 00 	lds	r25, 0x007C
  ba:	80 91 08 01 	lds	r24, 0x0108
  be:	89 2b       	or	r24, r25
  c0:	80 93 7c 00 	sts	0x007C, r24

	adcChan++;
  c4:	80 91 08 01 	lds	r24, 0x0108
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 08 01 	sts	0x0108, r24

        if(adcChan==8)
  ce:	80 91 08 01 	lds	r24, 0x0108
  d2:	88 30       	cpi	r24, 0x08	; 8
  d4:	81 f0       	breq	.+32     	; 0xf6 <__vector_21+0x7c>
        {
                adcChan=0;
        }
        else
        {
                ADCSRA |= (1<<ADSC); // ADC start conversion
  d6:	80 91 7a 00 	lds	r24, 0x007A
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 93 7a 00 	sts	0x007A, r24
        }

}
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti
	{
		PORTD=(PORTD&0xf7);
	}
	else
	{
		PORTD=(PORTD|0x08);
  f2:	5b 9a       	sbi	0x0b, 3	; 11
  f4:	ce cf       	rjmp	.-100    	; 0x92 <__vector_21+0x18>

	adcChan++;

        if(adcChan==8)
        {
                adcChan=0;
  f6:	10 92 08 01 	sts	0x0108, r1
  fa:	f2 cf       	rjmp	.-28     	; 0xe0 <__vector_21+0x66>

000000fc <startAdcSequence>:

}

void startAdcSequence()
{
	PORTD=(PORTD|0x08);
  fc:	5b 9a       	sbi	0x0b, 3	; 11

        adcChan = 0;
  fe:	10 92 08 01 	sts	0x0108, r1
	ADMUX |= (1 << REFS0); // reference voltage set to AVCC
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // ADC to 8 bit mode
 10c:	80 81       	ld	r24, Z
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	80 83       	st	Z, r24
        ADMUX |= adcChan;
 112:	90 81       	ld	r25, Z
 114:	80 91 08 01 	lds	r24, 0x0108
 118:	89 2b       	or	r24, r25
 11a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // ADC start conversion
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	80 83       	st	Z, r24
}
 126:	08 95       	ret

00000128 <adcInit>:

void adcInit()
{
	// set prescaler cpufreq/64=125KHz (should be 50 to 200)
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	87 60       	ori	r24, 0x07	; 7
 130:	80 83       	st	Z, r24

	ADMUX |= (1 << REFS0); // reference voltage set to AVCC
 132:	ac e7       	ldi	r26, 0x7C	; 124
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	8c 91       	ld	r24, X
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); // ADC to 8 bit mode
 13c:	8c 91       	ld	r24, X
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN); // ADC enable
 142:	80 81       	ld	r24, Z
 144:	80 68       	ori	r24, 0x80	; 128
 146:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); // Enable ADC Interrupts
 148:	80 81       	ld	r24, Z
 14a:	88 60       	ori	r24, 0x08	; 8
 14c:	80 83       	st	Z, r24
    
	sei();

	// then, ADCSRA |= (1<<ADSC) can start convention.
*/
}
 14e:	08 95       	ret

00000150 <__vector_16>:

uint16_t ticker=0;
uint16_t tocker=0;

ISR(TIMER0_OVF_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	TCNT0 = (uint8_t) T0RELOAD; // reload
 172:	8c e4       	ldi	r24, 0x4C	; 76
 174:	86 bd       	out	0x26, r24	; 38

	if(PORTD&0x04)
 176:	5a 99       	sbic	0x0b, 2	; 11
 178:	1e c0       	rjmp	.+60     	; 0x1b6 <__vector_16+0x66>
	{
		PORTD=(PORTD&0xfb);
	}
	else
	{
		PORTD=(PORTD|0x04);
 17a:	5a 9a       	sbi	0x0b, 2	; 11
	}

	startAdcSequence();
 17c:	bf df       	rcall	.-130    	; 0xfc <startAdcSequence>

	uart_putc('A');
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	b2 d0       	rcall	.+356    	; 0x2e6 <uart_putc>

	tocker++;
 182:	80 91 0b 01 	lds	r24, 0x010B
 186:	90 91 0c 01 	lds	r25, 0x010C
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	90 93 0c 01 	sts	0x010C, r25
 190:	80 93 0b 01 	sts	0x010B, r24
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti
{
	TCNT0 = (uint8_t) T0RELOAD; // reload

	if(PORTD&0x04)
	{
		PORTD=(PORTD&0xfb);
 1b6:	5a 98       	cbi	0x0b, 2	; 11
 1b8:	e1 cf       	rjmp	.-62     	; 0x17c <__vector_16+0x2c>

000001ba <timersInit>:
}

void timersInit()
{	
	// set up and enable low freq timer interrupt using timer0
	TCCR0A = 0x00;
 1ba:	14 bc       	out	0x24, r1	; 36
//	TCCR0B = 0x05; // ck/1024

	TCCR0B = (1 << CS02); // ck/256
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	85 bd       	out	0x25, r24	; 37

	TCNT0 = (uint8_t) T0RELOAD; // reload
 1c0:	8c e4       	ldi	r24, 0x4C	; 76
 1c2:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1<<TOIE0); // enable overflow interrupt
 1c4:	ee e6       	ldi	r30, 0x6E	; 110
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	80 83       	st	Z, r24

}
 1ce:	08 95       	ret

000001d0 <__vector_18>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 1e4:	20 91 c0 00 	lds	r18, 0x00C0
    data = UART0_DATA;
 1e8:	90 91 c6 00 	lds	r25, 0x00C6
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 1ec:	e0 91 2f 01 	lds	r30, 0x012F
 1f0:	ef 5f       	subi	r30, 0xFF	; 255
 1f2:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 1f4:	80 91 30 01 	lds	r24, 0x0130
 1f8:	e8 17       	cp	r30, r24
 1fa:	a1 f0       	breq	.+40     	; 0x224 <__vector_18+0x54>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 1fc:	82 2f       	mov	r24, r18
 1fe:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 200:	e0 93 2f 01 	sts	0x012F, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ef 5c       	subi	r30, 0xCF	; 207
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	90 83       	st	Z, r25
    }
    UART_LastRxError = lastRxError;   
 20c:	80 93 51 01 	sts	0x0151, r24
}
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	f2 cf       	rjmp	.-28     	; 0x20c <__vector_18+0x3c>

00000228 <__vector_20>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 23a:	90 91 0d 01 	lds	r25, 0x010D
 23e:	80 91 0e 01 	lds	r24, 0x010E
 242:	98 17       	cp	r25, r24
 244:	a9 f0       	breq	.+42     	; 0x270 <__vector_20+0x48>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 246:	e0 91 0e 01 	lds	r30, 0x010E
 24a:	ef 5f       	subi	r30, 0xFF	; 255
 24c:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 24e:	e0 93 0e 01 	sts	0x010E, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	e1 5f       	subi	r30, 0xF1	; 241
 256:	fe 4f       	sbci	r31, 0xFE	; 254
 258:	80 81       	ld	r24, Z
 25a:	80 93 c6 00 	sts	0x00C6, r24
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    }
}
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti
        UART_TxTail = tmptail;
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 270:	80 91 c1 00 	lds	r24, 0x00C1
 274:	8f 7d       	andi	r24, 0xDF	; 223
 276:	80 93 c1 00 	sts	0x00C1, r24
 27a:	f1 cf       	rjmp	.-30     	; 0x25e <__vector_20+0x36>

0000027c <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 27c:	10 92 0d 01 	sts	0x010D, r1
    UART_TxTail = 0;
 280:	10 92 0e 01 	sts	0x010E, r1
    UART_RxHead = 0;
 284:	10 92 2f 01 	sts	0x012F, r1
    UART_RxTail = 0;
 288:	10 92 30 01 	sts	0x0130, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 28c:	97 ff       	sbrs	r25, 7
 28e:	04 c0       	rjmp	.+8      	; 0x298 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 290:	22 e0       	ldi	r18, 0x02	; 2
 292:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
 296:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
 298:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
 29c:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 2a0:	88 e9       	ldi	r24, 0x98	; 152
 2a2:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
 2a6:	86 e0       	ldi	r24, 0x06	; 6
 2a8:	80 93 c2 00 	sts	0x00C2, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 2ac:	08 95       	ret

000002ae <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 2ae:	90 91 2f 01 	lds	r25, 0x012F
 2b2:	80 91 30 01 	lds	r24, 0x0130
 2b6:	98 17       	cp	r25, r24
 2b8:	91 f0       	breq	.+36     	; 0x2de <uart_getc+0x30>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 2ba:	e0 91 30 01 	lds	r30, 0x0130
 2be:	ef 5f       	subi	r30, 0xFF	; 255
 2c0:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 2c2:	e0 93 30 01 	sts	0x0130, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ef 5c       	subi	r30, 0xCF	; 207
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	80 81       	ld	r24, Z
    
    return (UART_LastRxError << 8) + data;
 2ce:	90 91 51 01 	lds	r25, 0x0151
 2d2:	39 2f       	mov	r19, r25
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	28 0f       	add	r18, r24
 2d8:	31 1d       	adc	r19, r1

}/* uart_getc */
 2da:	c9 01       	movw	r24, r18
 2dc:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	31 e0       	ldi	r19, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
 2e2:	c9 01       	movw	r24, r18
 2e4:	08 95       	ret

000002e6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2e6:	20 91 0d 01 	lds	r18, 0x010D
 2ea:	2f 5f       	subi	r18, 0xFF	; 255
 2ec:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 2ee:	90 91 0e 01 	lds	r25, 0x010E
 2f2:	29 17       	cp	r18, r25
 2f4:	e1 f3       	breq	.-8      	; 0x2ee <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 2f6:	e2 2f       	mov	r30, r18
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	e1 5f       	subi	r30, 0xF1	; 241
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 300:	20 93 0d 01 	sts	0x010D, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 304:	80 91 c1 00 	lds	r24, 0x00C1
 308:	80 62       	ori	r24, 0x20	; 32
 30a:	80 93 c1 00 	sts	0x00C1, r24

}/* uart_putc */
 30e:	08 95       	ret

00000310 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	ec 01       	movw	r28, r24
    while (*s) 
 316:	88 81       	ld	r24, Y
 318:	88 23       	and	r24, r24
 31a:	29 f0       	breq	.+10     	; 0x326 <uart_puts+0x16>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
 31c:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart_putc(*s++);
 31e:	e3 df       	rcall	.-58     	; 0x2e6 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 320:	89 91       	ld	r24, Y+
 322:	88 23       	and	r24, r24
 324:	e1 f7       	brne	.-8      	; 0x31e <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 332:	fc 01       	movw	r30, r24
 334:	84 91       	lpm	r24, Z+
 336:	88 23       	and	r24, r24
 338:	39 f0       	breq	.+14     	; 0x348 <uart_puts_p+0x1c>
 33a:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(c);
 33c:	d4 df       	rcall	.-88     	; 0x2e6 <uart_putc>
 33e:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 340:	21 96       	adiw	r28, 0x01	; 1
 342:	84 91       	lpm	r24, Z+
 344:	88 23       	and	r24, r24
 346:	d1 f7       	brne	.-12     	; 0x33c <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
