
dashcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eeprom       0000000e  00810000  00810000  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000d44  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a82  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e1       	ldi	r30, 0x12	; 18
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 30       	cpi	r26, 0x00	; 0
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	52 c0       	rjmp	.+164    	; 0x10e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
	uint8_t output_portd;

	//
	// init IO ports
	//
	DDRD=0x0f;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	8a b9       	out	0x0a, r24	; 10

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz 
  70:	80 91 7a 00 	lds	r24, 0x007A
  74:	87 60       	ori	r24, 0x07	; 7
  76:	80 93 7a 00 	sts	0x007A, r24
	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC 
  7a:	80 91 7c 00 	lds	r24, 0x007C
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	80 93 7c 00 	sts	0x007C, r24
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading 
  84:	80 91 7c 00 	lds	r24, 0x007C
  88:	80 62       	ori	r24, 0x20	; 32
  8a:	80 93 7c 00 	sts	0x007C, r24
//	ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode 
	ADCSRB = 0;  // Set ADC to Free-Running Mode 
  8e:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA |= (1 << ADEN);  // Enable ADC 
  92:	80 91 7a 00 	lds	r24, 0x007A
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
  9c:	80 91 7a 00 	lds	r24, 0x007A
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 93 7a 00 	sts	0x007A, r24
uint8_t test[] __attribute__ ((section (".eeprom"))) = "Fergus Duncan";

int main(void)
{
	uint8_t flash=0;
	uint8_t flashCounter=0;
  a6:	40 e0       	ldi	r20, 0x00	; 0

uint8_t test[] __attribute__ ((section (".eeprom"))) = "Fergus Duncan";

int main(void)
{
	uint8_t flash=0;
  a8:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  aa:	24 ec       	ldi	r18, 0xC4	; 196
  ac:	39 e0       	ldi	r19, 0x09	; 9
			{
				flash++;
			}
			else
			{
				flash=0;
  ae:	71 e0       	ldi	r23, 0x01	; 1
  b0:	c9 01       	movw	r24, r18
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x46>

	while (1)
	{
		_delay_ms(10);

		PORTD|=0x0f; // activate pullup resistors for inputs - remember to set lower port bits later
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	8f 60       	ori	r24, 0x0F	; 15
  ba:	8b b9       	out	0x0b, r24	; 11

		if(!flashCounter)
  bc:	44 23       	and	r20, r20
  be:	91 f4       	brne	.+36     	; 0xe4 <main+0x78>
			{
				flash++;
			}
			else
			{
				flash=0;
  c0:	57 27       	eor	r21, r23
			}
		}

		if(flashCounter++==20)
  c2:	41 e0       	ldi	r20, 0x01	; 1
		{
			flashCounter=0;
		}

		input_fault=PIND&0x01;
  c4:	99 b1       	in	r25, 0x09	; 9
		input_neutral=PIND&0x02;
  c6:	89 b1       	in	r24, 0x09	; 9
  c8:	82 70       	andi	r24, 0x02	; 2
		input_shift=PIND&0x04;
  ca:	69 b1       	in	r22, 0x09	; 9
		output_portd=0x0f;

		if(!input_fault)
  cc:	90 fd       	sbrc	r25, 0
  ce:	13 c0       	rjmp	.+38     	; 0xf6 <main+0x8a>
		{
			if(flash)
  d0:	55 23       	and	r21, r21
  d2:	c1 f4       	brne	.+48     	; 0x104 <main+0x98>
			{
				output_portd|=0x20;
			}
			else
			{
				if(!input_neutral)
  d4:	88 23       	and	r24, r24
  d6:	19 f4       	brne	.+6      	; 0xde <main+0x72>
		}
		else
		{
			if(!input_neutral)
			{
				output_portd|=0x40;
  d8:	8f e4       	ldi	r24, 0x4F	; 79
					output_portd|=0x80;
				}
			}
		}

		PORTD=output_portd;
  da:	8b b9       	out	0x0b, r24	; 11

	}
  dc:	e9 cf       	rjmp	.-46     	; 0xb0 <main+0x44>
		}

		input_fault=PIND&0x01;
		input_neutral=PIND&0x02;
		input_shift=PIND&0x04;
		output_portd=0x0f;
  de:	8f e0       	ldi	r24, 0x0F	; 15
					output_portd|=0x80;
				}
			}
		}

		PORTD=output_portd;
  e0:	8b b9       	out	0x0b, r24	; 11
  e2:	e6 cf       	rjmp	.-52     	; 0xb0 <main+0x44>
			{
				flash=0;
			}
		}

		if(flashCounter++==20)
  e4:	44 31       	cpi	r20, 0x14	; 20
  e6:	89 f4       	brne	.+34     	; 0x10a <main+0x9e>
		{
			flashCounter=0;
  e8:	40 e0       	ldi	r20, 0x00	; 0
		}

		input_fault=PIND&0x01;
  ea:	99 b1       	in	r25, 0x09	; 9
		input_neutral=PIND&0x02;
  ec:	89 b1       	in	r24, 0x09	; 9
  ee:	82 70       	andi	r24, 0x02	; 2
		input_shift=PIND&0x04;
  f0:	69 b1       	in	r22, 0x09	; 9
		output_portd=0x0f;

		if(!input_fault)
  f2:	90 ff       	sbrs	r25, 0
  f4:	ed cf       	rjmp	.-38     	; 0xd0 <main+0x64>
				}
			}
		}
		else
		{
			if(!input_neutral)
  f6:	88 23       	and	r24, r24
  f8:	79 f3       	breq	.-34     	; 0xd8 <main+0x6c>
			{
				output_portd|=0x40;
			}
			else
			{
				if(!input_shift)
  fa:	62 fd       	sbrc	r22, 2
  fc:	f0 cf       	rjmp	.-32     	; 0xde <main+0x72>
				{
					output_portd|=0x80;
  fe:	8f e8       	ldi	r24, 0x8F	; 143
				}
			}
		}

		PORTD=output_portd;
 100:	8b b9       	out	0x0b, r24	; 11
 102:	d6 cf       	rjmp	.-84     	; 0xb0 <main+0x44>

		if(!input_fault)
		{
			if(flash)
			{
				output_portd|=0x20;
 104:	8f e2       	ldi	r24, 0x2F	; 47
					output_portd|=0x80;
				}
			}
		}

		PORTD=output_portd;
 106:	8b b9       	out	0x0b, r24	; 11
 108:	d3 cf       	rjmp	.-90     	; 0xb0 <main+0x44>
			{
				flash=0;
			}
		}

		if(flashCounter++==20)
 10a:	4f 5f       	subi	r20, 0xFF	; 255
 10c:	db cf       	rjmp	.-74     	; 0xc4 <main+0x58>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
