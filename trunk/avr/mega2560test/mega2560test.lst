
mega2560test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800200  00002fbe  00003072  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fbe  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000461  0080032a  0080032a  0000319c  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  0000319c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000074b8  00000000  00000000  000031a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000020e8  00000000  00000000  0000a658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000c740  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
       8:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
       c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      10:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      14:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      18:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      1c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      20:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_9>
      28:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_10>
      2c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_11>
      30:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      34:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      38:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      3c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      40:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      44:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      48:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      4c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      50:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_20>
      54:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      58:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      5c:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__vector_23>
      60:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      64:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__vector_25>
      68:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      6c:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <__vector_27>
      70:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      74:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_29>
      78:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      7c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      80:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      84:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      88:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      8c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      90:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_36>
      94:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      98:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <__vector_38>
      9c:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      a0:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      a4:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      a8:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      ac:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      b0:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      b4:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      b8:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      bc:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      c0:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      c4:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      c8:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      cc:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__vector_51>
      d0:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      d4:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__vector_53>
      d8:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__vector_54>
      dc:	0c 94 14 01 	jmp	0x228	; 0x228 <__bad_interrupt>
      e0:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__vector_56>

000000e4 <__c.1975>:
      e4:	6e 61 6e 00                                         nan.

000000e8 <__c.1973>:
      e8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     108:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     118:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     128:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     138:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     148:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     158:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     168:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     178:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     188:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     198:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d1 e2       	ldi	r29, 0x21	; 33
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61
     1f2:	00 e0       	ldi	r16, 0x00	; 0
     1f4:	0c bf       	out	0x3c, r16	; 60

000001f6 <__do_copy_data>:
     1f6:	13 e0       	ldi	r17, 0x03	; 3
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	b2 e0       	ldi	r27, 0x02	; 2
     1fc:	ee eb       	ldi	r30, 0xBE	; 190
     1fe:	ff e2       	ldi	r31, 0x2F	; 47
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0b bf       	out	0x3b, r16	; 59
     204:	02 c0       	rjmp	.+4      	; 0x20a <__do_copy_data+0x14>
     206:	07 90       	elpm	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	aa 32       	cpi	r26, 0x2A	; 42
     20c:	b1 07       	cpc	r27, r17
     20e:	d9 f7       	brne	.-10     	; 0x206 <__do_copy_data+0x10>

00000210 <__do_clear_bss>:
     210:	17 e0       	ldi	r17, 0x07	; 7
     212:	aa e2       	ldi	r26, 0x2A	; 42
     214:	b3 e0       	ldi	r27, 0x03	; 3
     216:	01 c0       	rjmp	.+2      	; 0x21a <.do_clear_bss_start>

00000218 <.do_clear_bss_loop>:
     218:	1d 92       	st	X+, r1

0000021a <.do_clear_bss_start>:
     21a:	ab 38       	cpi	r26, 0x8B	; 139
     21c:	b1 07       	cpc	r27, r17
     21e:	e1 f7       	brne	.-8      	; 0x218 <.do_clear_bss_loop>
     220:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <main>
     224:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <_exit>

00000228 <__bad_interrupt>:
     228:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022c <__vector_9>:
#include "dio.h"
#include "serial0.h"

// interrupts for PCINT7:0
SIGNAL(PCINT0_vect)
{
     22c:	1f 92       	push	r1
     22e:	0f 92       	push	r0
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	0f 92       	push	r0
     234:	11 24       	eor	r1, r1
}
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <__vector_10>:

// interrupts for pins PCINT15:8
SIGNAL(PCINT1_vect)
{
     240:	1f 92       	push	r1
     242:	0f 92       	push	r0
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	0f 92       	push	r0
     248:	11 24       	eor	r1, r1
}
     24a:	0f 90       	pop	r0
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	0f 90       	pop	r0
     250:	1f 90       	pop	r1
     252:	18 95       	reti

00000254 <__vector_11>:

// interrupts for pins PCINT23:16
SIGNAL(PCINT2_vect)
{
     254:	1f 92       	push	r1
     256:	0f 92       	push	r0
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	0f 92       	push	r0
     25c:	11 24       	eor	r1, r1
}
     25e:	0f 90       	pop	r0
     260:	0f be       	out	0x3f, r0	; 63
     262:	0f 90       	pop	r0
     264:	1f 90       	pop	r1
     266:	18 95       	reti

00000268 <digitalIOInit>:


void digitalIOInit()
{
     268:	08 95       	ret

0000026a <digitalIOPoll>:
}

void digitalIOPoll()
{
     26a:	08 95       	ret

0000026c <getFileCounter>:
uint8_t autoStop=0;
uint8_t EEMEM ee_fileCounter;
uint8_t EEMEM ee_fileCounter_Check; 

uint8_t getFileCounter()
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
	uint8_t Counter;
	uint8_t Counter_Check;

	Counter=eeprom_read_byte(&ee_fileCounter);
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <__eerd_byte_m2560>
     278:	d8 2f       	mov	r29, r24
	Counter_Check=eeprom_read_byte(&ee_fileCounter_Check);
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <__eerd_byte_m2560>

	if(Counter!=(Counter_Check^0xff))
     282:	80 95       	com	r24
     284:	8d 17       	cp	r24, r29
     286:	79 f0       	breq	.+30     	; 0x2a6 <getFileCounter+0x3a>
	{
		Counter=0;
		Counter_Check=(Counter^0xff);
		eeprom_write_byte(&ee_fileCounter,Counter);
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__eewr_byte_m2560>
		eeprom_write_byte(&ee_fileCounter_Check,Counter_Check);
     292:	6f ef       	ldi	r22, 0xFF	; 255
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__eewr_byte_m2560>
		return 0;
     29c:	c0 e0       	ldi	r28, 0x00	; 0
	Counter_Check=(Counter^0xff);
	eeprom_write_byte(&ee_fileCounter,Counter);
	eeprom_write_byte(&ee_fileCounter_Check,Counter_Check);

	return Counter;
}
     29e:	8c 2f       	mov	r24, r28
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret
		eeprom_write_byte(&ee_fileCounter,Counter);
		eeprom_write_byte(&ee_fileCounter_Check,Counter_Check);
		return 0;
	}

	Counter++;
     2a6:	c8 2f       	mov	r28, r24
     2a8:	cf 5f       	subi	r28, 0xFF	; 255
	Counter_Check=(Counter^0xff);
	eeprom_write_byte(&ee_fileCounter,Counter);
     2aa:	6c 2f       	mov	r22, r28
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__eewr_byte_m2560>
		eeprom_write_byte(&ee_fileCounter_Check,Counter_Check);
		return 0;
	}

	Counter++;
	Counter_Check=(Counter^0xff);
     2b4:	6c 2f       	mov	r22, r28
     2b6:	60 95       	com	r22
	eeprom_write_byte(&ee_fileCounter,Counter);
	eeprom_write_byte(&ee_fileCounter_Check,Counter_Check);
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__eewr_byte_m2560>

	return Counter;
}
     2c0:	8c 2f       	mov	r24, r28
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <menu>:

void menu()
{
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	c4 56       	subi	r28, 0x64	; 100
     2d2:	d1 09       	sbc	r29, r1
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
	decDump(usart0_Tx,hwm0);
     2de:	60 91 35 03 	lds	r22, 0x0335
     2e2:	84 e8       	ldi	r24, 0x84	; 132
     2e4:	9d e0       	ldi	r25, 0x0D	; 13
     2e6:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <decDump>
	usart0_Tx(':');
     2ea:	8a e3       	ldi	r24, 0x3A	; 58
     2ec:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
	decDump(usart0_Tx,hwm2);
     2f0:	60 91 c6 04 	lds	r22, 0x04C6
     2f4:	84 e8       	ldi	r24, 0x84	; 132
     2f6:	9d e0       	ldi	r25, 0x0D	; 13
     2f8:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <decDump>
	usart0_Tx('\r');
     2fc:	8d e0       	ldi	r24, 0x0D	; 13
     2fe:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
	usart0_Tx('\n');
     302:	8a e0       	ldi	r24, 0x0A	; 10
     304:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
	char buffer[100]="\n\r\n\rD : Live Data Stream\n\rL : Logger Passthrough\n\rR : Record Data\n\r<ESC> : Stop and Return\n\r";
     308:	8d e5       	ldi	r24, 0x5D	; 93
     30a:	e6 e0       	ldi	r30, 0x06	; 6
     30c:	f2 e0       	ldi	r31, 0x02	; 2
     30e:	de 01       	movw	r26, r28
     310:	11 96       	adiw	r26, 0x01	; 1
     312:	01 90       	ld	r0, Z+
     314:	0d 92       	st	X+, r0
     316:	8a 95       	dec	r24
     318:	e1 f7       	brne	.-8      	; 0x312 <menu+0x4a>
     31a:	fe 01       	movw	r30, r28
     31c:	e2 5a       	subi	r30, 0xA2	; 162
     31e:	ff 4f       	sbci	r31, 0xFF	; 255
     320:	87 e0       	ldi	r24, 0x07	; 7
     322:	df 01       	movw	r26, r30
     324:	1d 92       	st	X+, r1
     326:	8a 95       	dec	r24
     328:	e9 f7       	brne	.-6      	; 0x324 <menu+0x5c>
	transmitNullTerminatedBuffer(usart0_Tx,(uint8_t *)buffer);
     32a:	be 01       	movw	r22, r28
     32c:	6f 5f       	subi	r22, 0xFF	; 255
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	84 e8       	ldi	r24, 0x84	; 132
     332:	9d e0       	ldi	r25, 0x0D	; 13
     334:	0e 94 a9 0a 	call	0x1552	; 0x1552 <transmitNullTerminatedBuffer>
}
     338:	cc 59       	subi	r28, 0x9C	; 156
     33a:	df 4f       	sbci	r29, 0xFF	; 255
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <startRecording>:

void startRecording()
{
     34c:	cf 92       	push	r12
     34e:	df 92       	push	r13
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
     360:	c0 55       	subi	r28, 0x50	; 80
     362:	d1 09       	sbc	r29, r1
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
	char buffer[80];
	uint8_t hours=workingGPSData.hours;
     36e:	f0 90 06 07 	lds	r15, 0x0706
	uint8_t minutes=workingGPSData.minutes;
     372:	e0 90 07 07 	lds	r14, 0x0707
	uint8_t seconds=workingGPSData.seconds;
     376:	d0 90 08 07 	lds	r13, 0x0708
	uint16_t fileCounter=getFileCounter();
     37a:	0e 94 36 01 	call	0x26c	; 0x26c <getFileCounter>
     37e:	c8 2e       	mov	r12, r24

	sprintf(buffer,"\r\rnew %02x%02u%02u%02u.log\r",
     380:	1f 92       	push	r1
     382:	df 92       	push	r13
     384:	1f 92       	push	r1
     386:	ef 92       	push	r14
     388:	1f 92       	push	r1
     38a:	ff 92       	push	r15
     38c:	1f 92       	push	r1
     38e:	8f 93       	push	r24
     390:	24 e9       	ldi	r18, 0x94	; 148
     392:	32 e0       	ldi	r19, 0x02	; 2
     394:	3f 93       	push	r19
     396:	2f 93       	push	r18
     398:	8e 01       	movw	r16, r28
     39a:	0f 5f       	subi	r16, 0xFF	; 255
     39c:	1f 4f       	sbci	r17, 0xFF	; 255
     39e:	1f 93       	push	r17
     3a0:	0f 93       	push	r16
     3a2:	0e 94 38 17 	call	0x2e70	; 0x2e70 <sprintf>
			fileCounter,
			hours,
			minutes,
			seconds);
	transmitNullTerminatedBuffer(usart2_Tx,(uint8_t *)buffer);
     3a6:	b8 01       	movw	r22, r16
     3a8:	81 e9       	ldi	r24, 0x91	; 145
     3aa:	9f e0       	ldi	r25, 0x0F	; 15
     3ac:	0e 94 a9 0a 	call	0x1552	; 0x1552 <transmitNullTerminatedBuffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b0:	2f ef       	ldi	r18, 0xFF	; 255
     3b2:	83 ec       	ldi	r24, 0xC3	; 195
     3b4:	99 e0       	ldi	r25, 0x09	; 9
     3b6:	21 50       	subi	r18, 0x01	; 1
     3b8:	80 40       	sbci	r24, 0x00	; 0
     3ba:	90 40       	sbci	r25, 0x00	; 0
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <startRecording+0x6a>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <startRecording+0x74>
     3c0:	00 00       	nop
	_delay_ms(200);
	sprintf(buffer,"\r\rappend %02x%02u%02u%02u.log\r",
     3c2:	1f 92       	push	r1
     3c4:	df 92       	push	r13
     3c6:	1f 92       	push	r1
     3c8:	ef 92       	push	r14
     3ca:	1f 92       	push	r1
     3cc:	ff 92       	push	r15
     3ce:	1f 92       	push	r1
     3d0:	cf 92       	push	r12
     3d2:	80 eb       	ldi	r24, 0xB0	; 176
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	9f 93       	push	r25
     3d8:	8f 93       	push	r24
     3da:	1f 93       	push	r17
     3dc:	0f 93       	push	r16
     3de:	0e 94 38 17 	call	0x2e70	; 0x2e70 <sprintf>
			fileCounter,
			hours,
			minutes,
			seconds);
	transmitNullTerminatedBuffer(usart2_Tx,(uint8_t *)buffer);
     3e2:	b8 01       	movw	r22, r16
     3e4:	81 e9       	ldi	r24, 0x91	; 145
     3e6:	9f e0       	ldi	r25, 0x0F	; 15
     3e8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <transmitNullTerminatedBuffer>
     3ec:	2f ef       	ldi	r18, 0xFF	; 255
     3ee:	83 ec       	ldi	r24, 0xC3	; 195
     3f0:	99 e0       	ldi	r25, 0x09	; 9
     3f2:	21 50       	subi	r18, 0x01	; 1
     3f4:	80 40       	sbci	r24, 0x00	; 0
     3f6:	90 40       	sbci	r25, 0x00	; 0
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <startRecording+0xa6>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <startRecording+0xb0>
     3fc:	00 00       	nop
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(200);
}
     408:	c0 5b       	subi	r28, 0xB0	; 176
     40a:	df 4f       	sbci	r29, 0xFF	; 255
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	08 95       	ret

00000428 <control>:

void control()
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	c1 55       	subi	r28, 0x51	; 81
     432:	d1 09       	sbc	r29, r1
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
	char ch=0;
     43e:	62 96       	adiw	r28, 0x12	; 18
     440:	1f ae       	std	Y+63, r1	; 0x3f
     442:	62 97       	sbiw	r28, 0x12	; 18

	if(!usart0_Rx(&ch))
     444:	ce 01       	movw	r24, r28
     446:	8f 5a       	subi	r24, 0xAF	; 175
     448:	9f 4f       	sbci	r25, 0xFF	; 255
     44a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <usart0_Rx>
     44e:	81 11       	cpse	r24, r1
     450:	03 c0       	rjmp	.+6      	; 0x458 <control+0x30>
	{
		ch=0;
     452:	62 96       	adiw	r28, 0x12	; 18
     454:	1f ae       	std	Y+63, r1	; 0x3f
     456:	62 97       	sbiw	r28, 0x12	; 18
	}

	switch(controlState)
     458:	80 91 2d 03 	lds	r24, 0x032D
     45c:	90 91 2e 03 	lds	r25, 0x032E
     460:	82 30       	cpi	r24, 0x02	; 2
     462:	91 05       	cpc	r25, r1
     464:	09 f4       	brne	.+2      	; 0x468 <control+0x40>
     466:	68 c0       	rjmp	.+208    	; 0x538 <control+0x110>
     468:	80 f0       	brcs	.+32     	; 0x48a <control+0x62>
     46a:	83 30       	cpi	r24, 0x03	; 3
     46c:	91 05       	cpc	r25, r1
     46e:	09 f4       	brne	.+2      	; 0x472 <control+0x4a>
     470:	58 c0       	rjmp	.+176    	; 0x522 <control+0xfa>
     472:	04 97       	sbiw	r24, 0x04	; 4
     474:	b9 f1       	breq	.+110    	; 0x4e4 <control+0xbc>
			}

			break;
		}
	}
}
     476:	cf 5a       	subi	r28, 0xAF	; 175
     478:	df 4f       	sbci	r29, 0xFF	; 255
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret
	if(!usart0_Rx(&ch))
	{
		ch=0;
	}

	switch(controlState)
     48a:	00 97       	sbiw	r24, 0x00	; 0
     48c:	11 f1       	breq	.+68     	; 0x4d2 <control+0xaa>
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	91 f7       	brne	.-28     	; 0x476 <control+0x4e>
			break;
		}

		case ControlIdle :
		{
			if((ch=='L')||(ch=='l'))
     492:	62 96       	adiw	r28, 0x12	; 18
     494:	8f ad       	ldd	r24, Y+63	; 0x3f
     496:	62 97       	sbiw	r28, 0x12	; 18
     498:	8c 34       	cpi	r24, 0x4C	; 76
     49a:	09 f4       	brne	.+2      	; 0x49e <control+0x76>
     49c:	58 c0       	rjmp	.+176    	; 0x54e <control+0x126>
     49e:	8c 36       	cpi	r24, 0x6C	; 108
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <control+0x7c>
     4a2:	55 c0       	rjmp	.+170    	; 0x54e <control+0x126>
			{
				controlState=ControlLoggerPassthrough;
			}
			else if((ch=='D')||(ch=='d'))
     4a4:	84 34       	cpi	r24, 0x44	; 68
     4a6:	09 f4       	brne	.+2      	; 0x4aa <control+0x82>
     4a8:	70 c0       	rjmp	.+224    	; 0x58a <control+0x162>
     4aa:	84 36       	cpi	r24, 0x64	; 100
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <control+0x88>
     4ae:	6d c0       	rjmp	.+218    	; 0x58a <control+0x162>
			{
				controlState=ControlDataStream;
			}
//			else if(((ch=='R')||(ch=='r'))||
//				(!(PINK&0x80)) )
			else if(((ch=='R')||(ch=='r')))
     4b0:	82 35       	cpi	r24, 0x52	; 82
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <control+0x8e>
     4b4:	71 c0       	rjmp	.+226    	; 0x598 <control+0x170>
     4b6:	82 37       	cpi	r24, 0x72	; 114
     4b8:	09 f4       	brne	.+2      	; 0x4bc <control+0x94>
     4ba:	6e c0       	rjmp	.+220    	; 0x598 <control+0x170>
				autoStop=0;
				idleTicks=0;
				idleSeconds=0;
				controlState=ControlLogging;
			}
			else if((ch=='F')||(ch=='f'))
     4bc:	86 34       	cpi	r24, 0x46	; 70
     4be:	09 f4       	brne	.+2      	; 0x4c2 <control+0x9a>
     4c0:	4d c0       	rjmp	.+154    	; 0x55c <control+0x134>
     4c2:	86 36       	cpi	r24, 0x66	; 102
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <control+0xa0>
     4c6:	4a c0       	rjmp	.+148    	; 0x55c <control+0x134>
				char buffer[80];
				controlState=ControlRecoverFileListA;
				sprintf(buffer,"ls *.log\r");
				transmitNullTerminatedBuffer(usart2_Tx,(uint8_t *)buffer);
			}
			else if(ch!=0)
     4c8:	88 23       	and	r24, r24
     4ca:	a9 f2       	breq	.-86     	; 0x476 <control+0x4e>
			{
				controlState=ControlMenu;
				_delay_ms(500);
				char buffer[3]={26,26,26}; // stop logging sequence
				transmitBuffer(usart2_Tx,(uint8_t *)buffer,3);
				menu();
     4cc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <menu>
     4d0:	d2 cf       	rjmp	.-92     	; 0x476 <control+0x4e>

	switch(controlState)
	{
		case ControlMenu :
		{
			menu();
     4d2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <menu>
			controlState=ControlIdle;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	90 93 2e 03 	sts	0x032E, r25
     4de:	80 93 2d 03 	sts	0x032D, r24

			break;
     4e2:	c9 cf       	rjmp	.-110    	; 0x476 <control+0x4e>

		case ControlLogging :
		{
//			if((ch==27)||
//			   (PINK&0x80))
			if((ch==27))
     4e4:	62 96       	adiw	r28, 0x12	; 18
     4e6:	8f ad       	ldd	r24, Y+63	; 0x3f
     4e8:	62 97       	sbiw	r28, 0x12	; 18
     4ea:	8b 31       	cpi	r24, 0x1B	; 27
     4ec:	21 f6       	brne	.-120    	; 0x476 <control+0x4e>
			{
				controlState=ControlMenu;
     4ee:	10 92 2e 03 	sts	0x032E, r1
     4f2:	10 92 2d 03 	sts	0x032D, r1
     4f6:	2f ef       	ldi	r18, 0xFF	; 255
     4f8:	89 e6       	ldi	r24, 0x69	; 105
     4fa:	98 e1       	ldi	r25, 0x18	; 24
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	80 40       	sbci	r24, 0x00	; 0
     500:	90 40       	sbci	r25, 0x00	; 0
     502:	e1 f7       	brne	.-8      	; 0x4fc <control+0xd4>
     504:	00 c0       	rjmp	.+0      	; 0x506 <control+0xde>
     506:	00 00       	nop
				_delay_ms(500);
				char buffer[3]={26,26,26}; // stop logging sequence
     508:	8a e1       	ldi	r24, 0x1A	; 26
     50a:	89 83       	std	Y+1, r24	; 0x01
     50c:	8a 83       	std	Y+2, r24	; 0x02
     50e:	8b 83       	std	Y+3, r24	; 0x03
				transmitBuffer(usart2_Tx,(uint8_t *)buffer,3);
     510:	43 e0       	ldi	r20, 0x03	; 3
     512:	be 01       	movw	r22, r28
     514:	6f 5f       	subi	r22, 0xFF	; 255
     516:	7f 4f       	sbci	r23, 0xFF	; 255
     518:	81 e9       	ldi	r24, 0x91	; 145
     51a:	9f e0       	ldi	r25, 0x0F	; 15
     51c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <transmitBuffer>
     520:	d5 cf       	rjmp	.-86     	; 0x4cc <control+0xa4>
			break;
		}

		case ControlDataStream :
		{
			if(ch==27)
     522:	62 96       	adiw	r28, 0x12	; 18
     524:	8f ad       	ldd	r24, Y+63	; 0x3f
     526:	62 97       	sbiw	r28, 0x12	; 18
     528:	8b 31       	cpi	r24, 0x1B	; 27
     52a:	09 f0       	breq	.+2      	; 0x52e <control+0x106>
     52c:	a4 cf       	rjmp	.-184    	; 0x476 <control+0x4e>
			{
				controlState=ControlMenu;
     52e:	10 92 2e 03 	sts	0x032E, r1
     532:	10 92 2d 03 	sts	0x032D, r1
     536:	9f cf       	rjmp	.-194    	; 0x476 <control+0x4e>
		}

		case ControlLoggerPassthrough :
		{

			if(ch==27)
     538:	62 96       	adiw	r28, 0x12	; 18
     53a:	8f ad       	ldd	r24, Y+63	; 0x3f
     53c:	62 97       	sbiw	r28, 0x12	; 18
     53e:	8b 31       	cpi	r24, 0x1B	; 27
     540:	b1 f3       	breq	.-20     	; 0x52e <control+0x106>
			{
				controlState=ControlMenu;
			}
			else if(ch!=0)
     542:	88 23       	and	r24, r24
     544:	09 f4       	brne	.+2      	; 0x548 <control+0x120>
     546:	97 cf       	rjmp	.-210    	; 0x476 <control+0x4e>
			{
				usart2_Tx(ch);
     548:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <usart2_Tx>
     54c:	94 cf       	rjmp	.-216    	; 0x476 <control+0x4e>

		case ControlIdle :
		{
			if((ch=='L')||(ch=='l'))
			{
				controlState=ControlLoggerPassthrough;
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	90 93 2e 03 	sts	0x032E, r25
     556:	80 93 2d 03 	sts	0x032D, r24
     55a:	8d cf       	rjmp	.-230    	; 0x476 <control+0x4e>
				controlState=ControlLogging;
			}
			else if((ch=='F')||(ch=='f'))
			{
				char buffer[80];
				controlState=ControlRecoverFileListA;
     55c:	85 e0       	ldi	r24, 0x05	; 5
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	90 93 2e 03 	sts	0x032E, r25
     564:	80 93 2d 03 	sts	0x032D, r24
				sprintf(buffer,"ls *.log\r");
     568:	8a e0       	ldi	r24, 0x0A	; 10
     56a:	ef ec       	ldi	r30, 0xCF	; 207
     56c:	f2 e0       	ldi	r31, 0x02	; 2
     56e:	de 01       	movw	r26, r28
     570:	11 96       	adiw	r26, 0x01	; 1
     572:	01 90       	ld	r0, Z+
     574:	0d 92       	st	X+, r0
     576:	8a 95       	dec	r24
     578:	e1 f7       	brne	.-8      	; 0x572 <control+0x14a>
				transmitNullTerminatedBuffer(usart2_Tx,(uint8_t *)buffer);
     57a:	be 01       	movw	r22, r28
     57c:	6f 5f       	subi	r22, 0xFF	; 255
     57e:	7f 4f       	sbci	r23, 0xFF	; 255
     580:	81 e9       	ldi	r24, 0x91	; 145
     582:	9f e0       	ldi	r25, 0x0F	; 15
     584:	0e 94 a9 0a 	call	0x1552	; 0x1552 <transmitNullTerminatedBuffer>
				idleTicks=0;
				idleSeconds=0;
				controlState=ControlLogging;
			}
			else if((ch=='F')||(ch=='f'))
			{
     588:	76 cf       	rjmp	.-276    	; 0x476 <control+0x4e>
			{
				controlState=ControlLoggerPassthrough;
			}
			else if((ch=='D')||(ch=='d'))
			{
				controlState=ControlDataStream;
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	90 93 2e 03 	sts	0x032E, r25
     592:	80 93 2d 03 	sts	0x032D, r24
     596:	6f cf       	rjmp	.-290    	; 0x476 <control+0x4e>
			}
//			else if(((ch=='R')||(ch=='r'))||
//				(!(PINK&0x80)) )
			else if(((ch=='R')||(ch=='r')))
			{
				startRecording();
     598:	0e 94 a6 01 	call	0x34c	; 0x34c <startRecording>
				autoStop=0;
     59c:	10 92 2a 03 	sts	0x032A, r1
				idleTicks=0;
     5a0:	10 92 2c 03 	sts	0x032C, r1
				idleSeconds=0;
     5a4:	10 92 2b 03 	sts	0x032B, r1
				controlState=ControlLogging;
     5a8:	84 e0       	ldi	r24, 0x04	; 4
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	90 93 2e 03 	sts	0x032E, r25
     5b0:	80 93 2d 03 	sts	0x032D, r24
     5b4:	60 cf       	rjmp	.-320    	; 0x476 <control+0x4e>

000005b6 <calculateG>:

uint8_t zeros[3]={72,89,83};
uint8_t oneGval[3]={42,41,42};

void calculateG()
{
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	93 e0       	ldi	r25, 0x03	; 3
     5c4:	e9 2e       	mov	r14, r25
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	f9 2e       	mov	r15, r25
     5ca:	00 e0       	ldi	r16, 0x00	; 0
     5cc:	12 e0       	ldi	r17, 0x02	; 2
	int32_t temp=0;
	int channel=0;
	
	for(channel=0;channel<3;channel++)
     5ce:	c0 e0       	ldi	r28, 0x00	; 0
     5d0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		temp=(int32_t)(adcValues[channel]-zeros[channel]);
     5d2:	fe 01       	movw	r30, r28
     5d4:	e9 58       	subi	r30, 0x89	; 137
     5d6:	f9 4f       	sbci	r31, 0xF9	; 249
     5d8:	a0 81       	ld	r26, Z
     5da:	f7 01       	movw	r30, r14
     5dc:	81 91       	ld	r24, Z+
     5de:	7f 01       	movw	r14, r30
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	a8 1b       	sub	r26, r24
     5e4:	b1 09       	sbc	r27, r1
		temp=(int32_t)(temp*100);
     5e6:	24 e6       	ldi	r18, 0x64	; 100
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__usmulhisi3>
		temp=(int32_t)(temp/oneGval[channel]);
     5ee:	f8 01       	movw	r30, r16
     5f0:	21 91       	ld	r18, Z+
     5f2:	8f 01       	movw	r16, r30
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__divmodsi4>
		gValues[channel]=(int16_t)temp;
     5fe:	fe 01       	movw	r30, r28
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	e1 50       	subi	r30, 0x01	; 1
     606:	f9 4f       	sbci	r31, 0xF9	; 249
     608:	31 83       	std	Z+1, r19	; 0x01
     60a:	20 83       	st	Z, r18
void calculateG()
{
	int32_t temp=0;
	int channel=0;
	
	for(channel=0;channel<3;channel++)
     60c:	21 96       	adiw	r28, 0x01	; 1
     60e:	c3 30       	cpi	r28, 0x03	; 3
     610:	d1 05       	cpc	r29, r1
     612:	f9 f6       	brne	.-66     	; 0x5d2 <calculateG+0x1c>
		temp=(int32_t)(adcValues[channel]-zeros[channel]);
		temp=(int32_t)(temp*100);
		temp=(int32_t)(temp/oneGval[channel]);
		gValues[channel]=(int16_t)temp;
	}
}
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	08 95       	ret

00000622 <__vector_29>:

ISR(ADC_vect)
{
     622:	1f 92       	push	r1
     624:	0f 92       	push	r0
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	0f 92       	push	r0
     62a:	11 24       	eor	r1, r1
     62c:	0b b6       	in	r0, 0x3b	; 59
     62e:	0f 92       	push	r0
     630:	1b be       	out	0x3b, r1	; 59
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	2f 93       	push	r18
     63c:	3f 93       	push	r19
     63e:	4f 93       	push	r20
     640:	5f 93       	push	r21
     642:	6f 93       	push	r22
     644:	7f 93       	push	r23
     646:	8f 93       	push	r24
     648:	9f 93       	push	r25
     64a:	af 93       	push	r26
     64c:	bf 93       	push	r27
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	ef 93       	push	r30
     654:	ff 93       	push	r31
        adcValueStore[adcChannel][adcSample]=ADCH;
     656:	e0 91 30 03 	lds	r30, 0x0330
     65a:	90 91 2f 03 	lds	r25, 0x032F
     65e:	80 91 79 00 	lds	r24, 0x0079
     662:	20 e1       	ldi	r18, 0x10	; 16
     664:	e2 9f       	mul	r30, r18
     666:	f0 01       	movw	r30, r0
     668:	11 24       	eor	r1, r1
     66a:	e9 0f       	add	r30, r25
     66c:	f1 1d       	adc	r31, r1
     66e:	e1 58       	subi	r30, 0x81	; 129
     670:	f9 4f       	sbci	r31, 0xF9	; 249
     672:	80 83       	st	Z, r24

	adcChannel++;
     674:	80 91 30 03 	lds	r24, 0x0330
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	80 93 30 03 	sts	0x0330, r24

        if(adcChannel==NUMCHANNELS)
     67e:	80 91 30 03 	lds	r24, 0x0330
     682:	88 30       	cpi	r24, 0x08	; 8
     684:	31 f1       	breq	.+76     	; 0x6d2 <__vector_29+0xb0>
		}
        }
        else
        {
		// configure for the next channel
        	ADMUX = (ADMUX&0xf0)|adcChannel;
     686:	80 91 7c 00 	lds	r24, 0x007C
     68a:	90 91 30 03 	lds	r25, 0x0330
     68e:	80 7f       	andi	r24, 0xF0	; 240
     690:	89 2b       	or	r24, r25
     692:	80 93 7c 00 	sts	0x007C, r24
                ADCSRA |= (1<<ADSC); // ADC start conversion
     696:	80 91 7a 00 	lds	r24, 0x007A
     69a:	80 64       	ori	r24, 0x40	; 64
     69c:	80 93 7a 00 	sts	0x007A, r24
        }

}
     6a0:	ff 91       	pop	r31
     6a2:	ef 91       	pop	r30
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	bf 91       	pop	r27
     6aa:	af 91       	pop	r26
     6ac:	9f 91       	pop	r25
     6ae:	8f 91       	pop	r24
     6b0:	7f 91       	pop	r23
     6b2:	6f 91       	pop	r22
     6b4:	5f 91       	pop	r21
     6b6:	4f 91       	pop	r20
     6b8:	3f 91       	pop	r19
     6ba:	2f 91       	pop	r18
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	0f 90       	pop	r0
     6c6:	0b be       	out	0x3b, r0	; 59
     6c8:	0f 90       	pop	r0
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	0f 90       	pop	r0
     6ce:	1f 90       	pop	r1
     6d0:	18 95       	reti

	adcChannel++;

        if(adcChannel==NUMCHANNELS)
        {
                adcChannel=0;
     6d2:	10 92 30 03 	sts	0x0330, r1

		adcSample++;
     6d6:	80 91 2f 03 	lds	r24, 0x032F
     6da:	8f 5f       	subi	r24, 0xFF	; 255
     6dc:	80 93 2f 03 	sts	0x032F, r24

		if(adcSample==NUMSAMPLES)
     6e0:	80 91 2f 03 	lds	r24, 0x032F
     6e4:	80 31       	cpi	r24, 0x10	; 16
     6e6:	79 f6       	brne	.-98     	; 0x686 <__vector_29+0x64>
		{
			// complete all cycles
			adcSample=0;
     6e8:	10 92 2f 03 	sts	0x032F, r1
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	70 e0       	ldi	r23, 0x00	; 0
		gValues[channel]=(int16_t)temp;
	}
}

ISR(ADC_vect)
{
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	dc 01       	movw	r26, r24
     6fa:	ab 01       	movw	r20, r22
     6fc:	42 95       	swap	r20
     6fe:	52 95       	swap	r21
     700:	50 7f       	andi	r21, 0xF0	; 240
     702:	54 27       	eor	r21, r20
     704:	40 7f       	andi	r20, 0xF0	; 240
     706:	54 27       	eor	r21, r20
			{
				uint32_t total=0;

				for(sample=0;sample<NUMSAMPLES;sample++)
				{
					total+=adcValueStore[channel][sample];
     708:	fa 01       	movw	r30, r20
     70a:	e2 0f       	add	r30, r18
     70c:	f3 1f       	adc	r31, r19
     70e:	e1 58       	subi	r30, 0x81	; 129
     710:	f9 4f       	sbci	r31, 0xF9	; 249
     712:	e0 81       	ld	r30, Z
     714:	8e 0f       	add	r24, r30
     716:	91 1d       	adc	r25, r1
     718:	a1 1d       	adc	r26, r1
     71a:	b1 1d       	adc	r27, r1
     71c:	2f 5f       	subi	r18, 0xFF	; 255
     71e:	3f 4f       	sbci	r19, 0xFF	; 255

			for(channel=0;channel<NUMCHANNELS;channel++)
			{
				uint32_t total=0;

				for(sample=0;sample<NUMSAMPLES;sample++)
     720:	20 31       	cpi	r18, 0x10	; 16
     722:	31 05       	cpc	r19, r1
     724:	89 f7       	brne	.-30     	; 0x708 <__vector_29+0xe6>
				{
					total+=adcValueStore[channel][sample];
				}

				adcValues[channel]=(uint8_t)(total/NUMSAMPLES);
     726:	f4 e0       	ldi	r31, 0x04	; 4
     728:	b6 95       	lsr	r27
     72a:	a7 95       	ror	r26
     72c:	97 95       	ror	r25
     72e:	87 95       	ror	r24
     730:	fa 95       	dec	r31
     732:	d1 f7       	brne	.-12     	; 0x728 <__vector_29+0x106>
     734:	fb 01       	movw	r30, r22
     736:	e9 58       	subi	r30, 0x89	; 137
     738:	f9 4f       	sbci	r31, 0xF9	; 249
     73a:	80 83       	st	Z, r24
     73c:	6f 5f       	subi	r22, 0xFF	; 255
     73e:	7f 4f       	sbci	r23, 0xFF	; 255
			adcSample=0;

			uint8_t channel=0;
			uint8_t sample=0;

			for(channel=0;channel<NUMCHANNELS;channel++)
     740:	68 30       	cpi	r22, 0x08	; 8
     742:	71 05       	cpc	r23, r1
     744:	a9 f6       	brne	.-86     	; 0x6f0 <__vector_29+0xce>
     746:	53 e0       	ldi	r21, 0x03	; 3
     748:	e5 2e       	mov	r14, r21
     74a:	52 e0       	ldi	r21, 0x02	; 2
     74c:	f5 2e       	mov	r15, r21
     74e:	00 e0       	ldi	r16, 0x00	; 0
     750:	12 e0       	ldi	r17, 0x02	; 2
     752:	c0 e0       	ldi	r28, 0x00	; 0
     754:	d0 e0       	ldi	r29, 0x00	; 0
	int32_t temp=0;
	int channel=0;
	
	for(channel=0;channel<3;channel++)
	{
		temp=(int32_t)(adcValues[channel]-zeros[channel]);
     756:	fe 01       	movw	r30, r28
     758:	e9 58       	subi	r30, 0x89	; 137
     75a:	f9 4f       	sbci	r31, 0xF9	; 249
     75c:	a0 81       	ld	r26, Z
     75e:	f7 01       	movw	r30, r14
     760:	81 91       	ld	r24, Z+
     762:	7f 01       	movw	r14, r30
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	a8 1b       	sub	r26, r24
     768:	b1 09       	sbc	r27, r1
		temp=(int32_t)(temp*100);
     76a:	24 e6       	ldi	r18, 0x64	; 100
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__usmulhisi3>
		temp=(int32_t)(temp/oneGval[channel]);
     772:	f8 01       	movw	r30, r16
     774:	21 91       	ld	r18, Z+
     776:	8f 01       	movw	r16, r30
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__divmodsi4>
		gValues[channel]=(int16_t)temp;
     782:	fe 01       	movw	r30, r28
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	e1 50       	subi	r30, 0x01	; 1
     78a:	f9 4f       	sbci	r31, 0xF9	; 249
     78c:	31 83       	std	Z+1, r19	; 0x01
     78e:	20 83       	st	Z, r18
void calculateG()
{
	int32_t temp=0;
	int channel=0;
	
	for(channel=0;channel<3;channel++)
     790:	21 96       	adiw	r28, 0x01	; 1
     792:	c3 30       	cpi	r28, 0x03	; 3
     794:	d1 05       	cpc	r29, r1
     796:	f9 f6       	brne	.-66     	; 0x756 <__vector_29+0x134>
     798:	83 cf       	rjmp	.-250    	; 0x6a0 <__vector_29+0x7e>

0000079a <startAdcSequence>:

}

void startAdcSequence()
{
        adcChannel = 0;
     79a:	10 92 30 03 	sts	0x0330, r1
        adcSample = 0;
     79e:	10 92 2f 03 	sts	0x032F, r1
        ADMUX = (ADMUX&0xf0)|adcChannel;
     7a2:	ec e7       	ldi	r30, 0x7C	; 124
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	90 91 30 03 	lds	r25, 0x0330
     7ac:	80 7f       	andi	r24, 0xF0	; 240
     7ae:	89 2b       	or	r24, r25
     7b0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // ADC start conversion
     7b2:	ea e7       	ldi	r30, 0x7A	; 122
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	80 64       	ori	r24, 0x40	; 64
     7ba:	80 83       	st	Z, r24
     7bc:	08 95       	ret

000007be <adcInit>:
}

void adcInit()
{
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	9a 01       	movw	r18, r20
     7c8:	22 95       	swap	r18
     7ca:	32 95       	swap	r19
     7cc:	30 7f       	andi	r19, 0xF0	; 240
     7ce:	32 27       	eor	r19, r18
     7d0:	20 7f       	andi	r18, 0xF0	; 240
     7d2:	32 27       	eor	r19, r18

	for(channel=0;channel<NUMCHANNELS;channel++)
	{
		for(sample=0;sample<NUMSAMPLES;sample++)
		{
			adcValueStore[channel][sample]=0;
     7d4:	f9 01       	movw	r30, r18
     7d6:	e8 0f       	add	r30, r24
     7d8:	f9 1f       	adc	r31, r25
     7da:	e1 58       	subi	r30, 0x81	; 129
     7dc:	f9 4f       	sbci	r31, 0xF9	; 249
     7de:	10 82       	st	Z, r1
     7e0:	01 96       	adiw	r24, 0x01	; 1
	uint8_t channel=0;
	uint8_t sample=0;

	for(channel=0;channel<NUMCHANNELS;channel++)
	{
		for(sample=0;sample<NUMSAMPLES;sample++)
     7e2:	80 31       	cpi	r24, 0x10	; 16
     7e4:	91 05       	cpc	r25, r1
     7e6:	b1 f7       	brne	.-20     	; 0x7d4 <adcInit+0x16>
		{
			adcValueStore[channel][sample]=0;
		}
		adcValues[channel]=0;
     7e8:	fa 01       	movw	r30, r20
     7ea:	e9 58       	subi	r30, 0x89	; 137
     7ec:	f9 4f       	sbci	r31, 0xF9	; 249
     7ee:	10 82       	st	Z, r1
     7f0:	4f 5f       	subi	r20, 0xFF	; 255
     7f2:	5f 4f       	sbci	r21, 0xFF	; 255
void adcInit()
{
	uint8_t channel=0;
	uint8_t sample=0;

	for(channel=0;channel<NUMCHANNELS;channel++)
     7f4:	48 30       	cpi	r20, 0x08	; 8
     7f6:	51 05       	cpc	r21, r1
     7f8:	21 f7       	brne	.-56     	; 0x7c2 <adcInit+0x4>
		}
		adcValues[channel]=0;
	}

	// set prescaler cpufreq/64=125KHz (should be 50 to 200)
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     7fa:	80 91 7a 00 	lds	r24, 0x007A
     7fe:	87 60       	ori	r24, 0x07	; 7
     800:	80 93 7a 00 	sts	0x007A, r24
	ADMUX |= (1 << REFS0); // reference voltage set to AVCC
     804:	80 91 7c 00 	lds	r24, 0x007C
     808:	80 64       	ori	r24, 0x40	; 64
     80a:	80 93 7c 00 	sts	0x007C, r24
	ADMUX |= (1 << ADLAR); // ADC to 8 bit mode
     80e:	80 91 7c 00 	lds	r24, 0x007C
     812:	80 62       	ori	r24, 0x20	; 32
     814:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1 << ADEN); // ADC enable
     818:	80 91 7a 00 	lds	r24, 0x007A
     81c:	80 68       	ori	r24, 0x80	; 128
     81e:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= (1 << ADIE); // Enable ADC Interrupts
     822:	80 91 7a 00 	lds	r24, 0x007A
     826:	88 60       	ori	r24, 0x08	; 8
     828:	80 93 7a 00 	sts	0x007A, r24
     82c:	08 95       	ret

0000082e <initGPS>:
uint8_t assemblyBufferPos=0;
uint8_t commas[10];
enum SearchState searchState=searchingDollar;

void initGPS(void (*initFunction)(uint16_t baudRate),uint8_t (*txFunction)(char ch))
{
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	aa 97       	sbiw	r28, 0x2a	; 42
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	de bf       	out	0x3e, r29	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	cd bf       	out	0x3d, r28	; 61
     84a:	7c 01       	movw	r14, r24
     84c:	8b 01       	movw	r16, r22
	// UBX Command : Baud Rate to 38400
	uint8_t setBaudRate[] \
     84e:	8c e1       	ldi	r24, 0x1C	; 28
     850:	ea e6       	ldi	r30, 0x6A	; 106
     852:	f2 e0       	ldi	r31, 0x02	; 2
     854:	de 01       	movw	r26, r28
     856:	11 96       	adiw	r26, 0x01	; 1
     858:	01 90       	ld	r0, Z+
     85a:	0d 92       	st	X+, r0
     85c:	8a 95       	dec	r24
     85e:	e1 f7       	brne	.-8      	; 0x858 <initGPS+0x2a>
		0x00,0x00,0x07,0x00,0x03,0x00,0x00,0x00, \
		0x00,0x00,0x93,0x90};
	uint8_t	 setBaudRateLength=28;

	// UBX Command : Rate to 5Hz
	uint8_t setUpdateRate[] \
     860:	8e e0       	ldi	r24, 0x0E	; 14
     862:	e6 e8       	ldi	r30, 0x86	; 134
     864:	f2 e0       	ldi	r31, 0x02	; 2
     866:	de 01       	movw	r26, r28
     868:	5d 96       	adiw	r26, 0x1d	; 29
     86a:	01 90       	ld	r0, Z+
     86c:	0d 92       	st	X+, r0
     86e:	8a 95       	dec	r24
     870:	e1 f7       	brne	.-8      	; 0x86a <initGPS+0x3c>
     872:	2f ef       	ldi	r18, 0xFF	; 255
     874:	89 e6       	ldi	r24, 0x69	; 105
     876:	98 e1       	ldi	r25, 0x18	; 24
     878:	21 50       	subi	r18, 0x01	; 1
     87a:	80 40       	sbci	r24, 0x00	; 0
     87c:	90 40       	sbci	r25, 0x00	; 0
     87e:	e1 f7       	brne	.-8      	; 0x878 <initGPS+0x4a>
     880:	00 c0       	rjmp	.+0      	; 0x882 <initGPS+0x54>
     882:	00 00       	nop
		={0xB5,0x62,0x06,0x08,0x06,0x00,0xC8,0x00, \
		0x01,0x00,0x01,0x00,0xDE,0x6A};
	uint8_t setUpdateRateLength=14;

	_delay_ms(500);
	initFunction(9600);
     884:	80 e8       	ldi	r24, 0x80	; 128
     886:	95 e2       	ldi	r25, 0x25	; 37
     888:	f7 01       	movw	r30, r14
     88a:	19 95       	eicall
     88c:	ff ef       	ldi	r31, 0xFF	; 255
     88e:	23 ec       	ldi	r18, 0xC3	; 195
     890:	89 e0       	ldi	r24, 0x09	; 9
     892:	f1 50       	subi	r31, 0x01	; 1
     894:	20 40       	sbci	r18, 0x00	; 0
     896:	80 40       	sbci	r24, 0x00	; 0
     898:	e1 f7       	brne	.-8      	; 0x892 <initGPS+0x64>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <initGPS+0x6e>
     89c:	00 00       	nop
	_delay_ms(200);
	transmitBuffer(txFunction,setBaudRate,setBaudRateLength);
     89e:	4c e1       	ldi	r20, 0x1C	; 28
     8a0:	be 01       	movw	r22, r28
     8a2:	6f 5f       	subi	r22, 0xFF	; 255
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	c8 01       	movw	r24, r16
     8a8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <transmitBuffer>
     8ac:	9f ef       	ldi	r25, 0xFF	; 255
     8ae:	e3 ec       	ldi	r30, 0xC3	; 195
     8b0:	f9 e0       	ldi	r31, 0x09	; 9
     8b2:	91 50       	subi	r25, 0x01	; 1
     8b4:	e0 40       	sbci	r30, 0x00	; 0
     8b6:	f0 40       	sbci	r31, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <initGPS+0x84>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <initGPS+0x8e>
     8bc:	00 00       	nop
	_delay_ms(200);
	transmitBuffer(txFunction,setBaudRate,setBaudRateLength);
     8be:	4c e1       	ldi	r20, 0x1C	; 28
     8c0:	be 01       	movw	r22, r28
     8c2:	6f 5f       	subi	r22, 0xFF	; 255
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	c8 01       	movw	r24, r16
     8c8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <transmitBuffer>
     8cc:	2f ef       	ldi	r18, 0xFF	; 255
     8ce:	83 ec       	ldi	r24, 0xC3	; 195
     8d0:	99 e0       	ldi	r25, 0x09	; 9
     8d2:	21 50       	subi	r18, 0x01	; 1
     8d4:	80 40       	sbci	r24, 0x00	; 0
     8d6:	90 40       	sbci	r25, 0x00	; 0
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <initGPS+0xa4>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <initGPS+0xae>
     8dc:	00 00       	nop
	_delay_ms(200);
	transmitBuffer(txFunction,setBaudRate,setBaudRateLength);
     8de:	4c e1       	ldi	r20, 0x1C	; 28
     8e0:	be 01       	movw	r22, r28
     8e2:	6f 5f       	subi	r22, 0xFF	; 255
     8e4:	7f 4f       	sbci	r23, 0xFF	; 255
     8e6:	c8 01       	movw	r24, r16
     8e8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <transmitBuffer>
     8ec:	ef ef       	ldi	r30, 0xFF	; 255
     8ee:	f3 ec       	ldi	r31, 0xC3	; 195
     8f0:	29 e0       	ldi	r18, 0x09	; 9
     8f2:	e1 50       	subi	r30, 0x01	; 1
     8f4:	f0 40       	sbci	r31, 0x00	; 0
     8f6:	20 40       	sbci	r18, 0x00	; 0
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <initGPS+0xc4>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <initGPS+0xce>
     8fc:	00 00       	nop
	_delay_ms(200);
	initFunction(38400);
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	96 e9       	ldi	r25, 0x96	; 150
     902:	f7 01       	movw	r30, r14
     904:	19 95       	eicall
     906:	ff ef       	ldi	r31, 0xFF	; 255
     908:	23 ec       	ldi	r18, 0xC3	; 195
     90a:	89 e0       	ldi	r24, 0x09	; 9
     90c:	f1 50       	subi	r31, 0x01	; 1
     90e:	20 40       	sbci	r18, 0x00	; 0
     910:	80 40       	sbci	r24, 0x00	; 0
     912:	e1 f7       	brne	.-8      	; 0x90c <initGPS+0xde>
     914:	00 c0       	rjmp	.+0      	; 0x916 <initGPS+0xe8>
     916:	00 00       	nop
	_delay_ms(200);
	transmitBuffer(txFunction,setUpdateRate,setUpdateRateLength);
     918:	4e e0       	ldi	r20, 0x0E	; 14
     91a:	be 01       	movw	r22, r28
     91c:	63 5e       	subi	r22, 0xE3	; 227
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	c8 01       	movw	r24, r16
     922:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <transmitBuffer>
     926:	9f ef       	ldi	r25, 0xFF	; 255
     928:	e3 ec       	ldi	r30, 0xC3	; 195
     92a:	f9 e0       	ldi	r31, 0x09	; 9
     92c:	91 50       	subi	r25, 0x01	; 1
     92e:	e0 40       	sbci	r30, 0x00	; 0
     930:	f0 40       	sbci	r31, 0x00	; 0
     932:	e1 f7       	brne	.-8      	; 0x92c <initGPS+0xfe>
     934:	00 c0       	rjmp	.+0      	; 0x936 <initGPS+0x108>
     936:	00 00       	nop
	_delay_ms(200);
	transmitBuffer(txFunction,setUpdateRate,setUpdateRateLength);
     938:	4e e0       	ldi	r20, 0x0E	; 14
     93a:	be 01       	movw	r22, r28
     93c:	63 5e       	subi	r22, 0xE3	; 227
     93e:	7f 4f       	sbci	r23, 0xFF	; 255
     940:	c8 01       	movw	r24, r16
     942:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <transmitBuffer>
     946:	2f ef       	ldi	r18, 0xFF	; 255
     948:	83 ec       	ldi	r24, 0xC3	; 195
     94a:	99 e0       	ldi	r25, 0x09	; 9
     94c:	21 50       	subi	r18, 0x01	; 1
     94e:	80 40       	sbci	r24, 0x00	; 0
     950:	90 40       	sbci	r25, 0x00	; 0
     952:	e1 f7       	brne	.-8      	; 0x94c <initGPS+0x11e>
     954:	00 c0       	rjmp	.+0      	; 0x956 <initGPS+0x128>
     956:	00 00       	nop
	_delay_ms(200);
	transmitBuffer(txFunction,setUpdateRate,setUpdateRateLength);
     958:	4e e0       	ldi	r20, 0x0E	; 14
     95a:	be 01       	movw	r22, r28
     95c:	63 5e       	subi	r22, 0xE3	; 227
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	c8 01       	movw	r24, r16
     962:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <transmitBuffer>

	workingGPSData.lat_sign='?';
     966:	8f e3       	ldi	r24, 0x3F	; 63
     968:	80 93 0b 07 	sts	0x070B, r24
	workingGPSData.lon_sign='?';
     96c:	80 93 13 07 	sts	0x0713, r24
}
     970:	aa 96       	adiw	r28, 0x2a	; 42
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <dumpWorkingGPSData>:

void dumpWorkingGPSData(uint8_t (*txFunction)(char ch))
{
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
     99a:	c0 5a       	subi	r28, 0xA0	; 160
     99c:	d1 09       	sbc	r29, r1
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	7c 01       	movw	r14, r24
	char buffer[160];
	int pos=0;
	
	sprintf(buffer,"%02u,%02u,%02u.%02u,%03u,%c,%02d,%02u.%05lu,%c,%03d,%02u.%05lu",
     9aa:	e7 e1       	ldi	r30, 0x17	; 23
     9ac:	f7 e0       	ldi	r31, 0x07	; 7
     9ae:	83 81       	ldd	r24, Z+3	; 0x03
     9b0:	8f 93       	push	r24
     9b2:	82 81       	ldd	r24, Z+2	; 0x02
     9b4:	8f 93       	push	r24
     9b6:	81 81       	ldd	r24, Z+1	; 0x01
     9b8:	8f 93       	push	r24
     9ba:	80 81       	ld	r24, Z
     9bc:	8f 93       	push	r24
     9be:	20 91 16 07 	lds	r18, 0x0716
     9c2:	82 2f       	mov	r24, r18
     9c4:	99 27       	eor	r25, r25
     9c6:	87 fd       	sbrc	r24, 7
     9c8:	90 95       	com	r25
     9ca:	9f 93       	push	r25
     9cc:	2f 93       	push	r18
     9ce:	e4 e1       	ldi	r30, 0x14	; 20
     9d0:	f7 e0       	ldi	r31, 0x07	; 7
     9d2:	81 81       	ldd	r24, Z+1	; 0x01
     9d4:	8f 93       	push	r24
     9d6:	80 81       	ld	r24, Z
     9d8:	8f 93       	push	r24
     9da:	20 91 13 07 	lds	r18, 0x0713
     9de:	82 2f       	mov	r24, r18
     9e0:	99 27       	eor	r25, r25
     9e2:	87 fd       	sbrc	r24, 7
     9e4:	90 95       	com	r25
     9e6:	9f 93       	push	r25
     9e8:	2f 93       	push	r18
     9ea:	ef e0       	ldi	r30, 0x0F	; 15
     9ec:	f7 e0       	ldi	r31, 0x07	; 7
     9ee:	83 81       	ldd	r24, Z+3	; 0x03
     9f0:	8f 93       	push	r24
     9f2:	82 81       	ldd	r24, Z+2	; 0x02
     9f4:	8f 93       	push	r24
     9f6:	81 81       	ldd	r24, Z+1	; 0x01
     9f8:	8f 93       	push	r24
     9fa:	80 81       	ld	r24, Z
     9fc:	8f 93       	push	r24
     9fe:	20 91 0e 07 	lds	r18, 0x070E
     a02:	82 2f       	mov	r24, r18
     a04:	99 27       	eor	r25, r25
     a06:	87 fd       	sbrc	r24, 7
     a08:	90 95       	com	r25
     a0a:	9f 93       	push	r25
     a0c:	2f 93       	push	r18
     a0e:	ec e0       	ldi	r30, 0x0C	; 12
     a10:	f7 e0       	ldi	r31, 0x07	; 7
     a12:	81 81       	ldd	r24, Z+1	; 0x01
     a14:	8f 93       	push	r24
     a16:	80 81       	ld	r24, Z
     a18:	8f 93       	push	r24
     a1a:	20 91 0b 07 	lds	r18, 0x070B
     a1e:	82 2f       	mov	r24, r18
     a20:	99 27       	eor	r25, r25
     a22:	87 fd       	sbrc	r24, 7
     a24:	90 95       	com	r25
     a26:	9f 93       	push	r25
     a28:	2f 93       	push	r18
     a2a:	80 91 0a 07 	lds	r24, 0x070A
     a2e:	1f 92       	push	r1
     a30:	8f 93       	push	r24
     a32:	80 91 09 07 	lds	r24, 0x0709
     a36:	1f 92       	push	r1
     a38:	8f 93       	push	r24
     a3a:	80 91 08 07 	lds	r24, 0x0708
     a3e:	1f 92       	push	r1
     a40:	8f 93       	push	r24
     a42:	80 91 07 07 	lds	r24, 0x0707
     a46:	1f 92       	push	r1
     a48:	8f 93       	push	r24
     a4a:	80 91 06 07 	lds	r24, 0x0706
     a4e:	1f 92       	push	r1
     a50:	8f 93       	push	r24
     a52:	29 ed       	ldi	r18, 0xD9	; 217
     a54:	32 e0       	ldi	r19, 0x02	; 2
     a56:	3f 93       	push	r19
     a58:	2f 93       	push	r18
     a5a:	8e 01       	movw	r16, r28
     a5c:	0f 5f       	subi	r16, 0xFF	; 255
     a5e:	1f 4f       	sbci	r17, 0xFF	; 255
     a60:	1f 93       	push	r17
     a62:	0f 93       	push	r16
     a64:	0e 94 38 17 	call	0x2e70	; 0x2e70 <sprintf>
							  workingGPSData.lon_sign,
							  workingGPSData.lon_degrees,
							  workingGPSData.lon_minutes,
							  workingGPSData.lon_minutes_decimal);

	transmitNullTerminatedBuffer(txFunction,buffer);
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
     a72:	b8 01       	movw	r22, r16
     a74:	c7 01       	movw	r24, r14
     a76:	0e 94 a9 0a 	call	0x1552	; 0x1552 <transmitNullTerminatedBuffer>
}
     a7a:	c0 56       	subi	r28, 0x60	; 96
     a7c:	df 4f       	sbci	r29, 0xFF	; 255
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	08 95       	ret

00000a96 <findCommas>:
uint8_t findCommas(char *buffer, uint8_t bufferLength)
{
	uint8_t pos=0;
	uint8_t commaPos=0;

	for(pos=0;pos<bufferLength;pos++)
     a96:	66 23       	and	r22, r22
     a98:	a1 f0       	breq	.+40     	; 0xac2 <findCommas+0x2c>
     a9a:	fc 01       	movw	r30, r24
}

uint8_t findCommas(char *buffer, uint8_t bufferLength)
{
	uint8_t pos=0;
	uint8_t commaPos=0;
     a9c:	80 e0       	ldi	r24, 0x00	; 0

	for(pos=0;pos<bufferLength;pos++)
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <findCommas+0x12>
     aa2:	9f 5f       	subi	r25, 0xFF	; 255
     aa4:	96 17       	cp	r25, r22
     aa6:	61 f0       	breq	.+24     	; 0xac0 <findCommas+0x2a>
	{
		if(buffer[pos]==',')
     aa8:	21 91       	ld	r18, Z+
     aaa:	2c 32       	cpi	r18, 0x2C	; 44
     aac:	d1 f7       	brne	.-12     	; 0xaa2 <findCommas+0xc>
		{
			commas[commaPos++]=pos;
     aae:	a8 2f       	mov	r26, r24
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	af 5c       	subi	r26, 0xCF	; 207
     ab4:	b8 4f       	sbci	r27, 0xF8	; 248
     ab6:	9c 93       	st	X, r25
     ab8:	8f 5f       	subi	r24, 0xFF	; 255
uint8_t findCommas(char *buffer, uint8_t bufferLength)
{
	uint8_t pos=0;
	uint8_t commaPos=0;

	for(pos=0;pos<bufferLength;pos++)
     aba:	9f 5f       	subi	r25, 0xFF	; 255
     abc:	96 13       	cpse	r25, r22
     abe:	f4 cf       	rjmp	.-24     	; 0xaa8 <findCommas+0x12>
     ac0:	08 95       	ret
}

uint8_t findCommas(char *buffer, uint8_t bufferLength)
{
	uint8_t pos=0;
	uint8_t commaPos=0;
     ac2:	80 e0       	ldi	r24, 0x00	; 0
			commas[commaPos++]=pos;
		}
	}

	return commaPos;
}
     ac4:	08 95       	ret

00000ac6 <processGPGLL>:

// LAST  : $GPGLL,5620.08489,N,00319.12984,W,195126.40,A,A*76

void processGPGLL(char *buffer,uint8_t bufferLength)
{
     ac6:	6f 92       	push	r6
     ac8:	7f 92       	push	r7
     aca:	8f 92       	push	r8
     acc:	9f 92       	push	r9
     ace:	af 92       	push	r10
     ad0:	bf 92       	push	r11
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	ec 01       	movw	r28, r24
uint8_t findCommas(char *buffer, uint8_t bufferLength)
{
	uint8_t pos=0;
	uint8_t commaPos=0;

	for(pos=0;pos<bufferLength;pos++)
     ae4:	66 23       	and	r22, r22
     ae6:	a9 f0       	breq	.+42     	; 0xb12 <processGPGLL+0x4c>
     ae8:	fc 01       	movw	r30, r24
}

uint8_t findCommas(char *buffer, uint8_t bufferLength)
{
	uint8_t pos=0;
	uint8_t commaPos=0;
     aea:	20 e0       	ldi	r18, 0x00	; 0

	for(pos=0;pos<bufferLength;pos++)
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <processGPGLL+0x30>
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	86 17       	cp	r24, r22
     af4:	61 f0       	breq	.+24     	; 0xb0e <processGPGLL+0x48>
	{
		if(buffer[pos]==',')
     af6:	91 91       	ld	r25, Z+
     af8:	9c 32       	cpi	r25, 0x2C	; 44
     afa:	d1 f7       	brne	.-12     	; 0xaf0 <processGPGLL+0x2a>
		{
			commas[commaPos++]=pos;
     afc:	a2 2f       	mov	r26, r18
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	af 5c       	subi	r26, 0xCF	; 207
     b02:	b8 4f       	sbci	r27, 0xF8	; 248
     b04:	8c 93       	st	X, r24
     b06:	2f 5f       	subi	r18, 0xFF	; 255
uint8_t findCommas(char *buffer, uint8_t bufferLength)
{
	uint8_t pos=0;
	uint8_t commaPos=0;

	for(pos=0;pos<bufferLength;pos++)
     b08:	8f 5f       	subi	r24, 0xFF	; 255
     b0a:	86 13       	cpse	r24, r22
     b0c:	f4 cf       	rjmp	.-24     	; 0xaf6 <processGPGLL+0x30>
	uint8_t pos=0;
	uint8_t count=0;

	count=findCommas(buffer,bufferLength);

	if(count!=7)
     b0e:	27 30       	cpi	r18, 0x07	; 7
     b10:	79 f0       	breq	.+30     	; 0xb30 <processGPGLL+0x6a>
	if(workingGPSData.lon_sign=='-')
	{
		workingGPSData.lon*=-1;
	}
	*/
}
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	cf 90       	pop	r12
     b22:	bf 90       	pop	r11
     b24:	af 90       	pop	r10
     b26:	9f 90       	pop	r9
     b28:	8f 90       	pop	r8
     b2a:	7f 90       	pop	r7
     b2c:	6f 90       	pop	r6
     b2e:	08 95       	ret
		// we don't understand this sentance
		return;
	}

	// data validity
	pos=(commas[5]+1); // 6th comma
     b30:	80 91 36 07 	lds	r24, 0x0736
     b34:	8f 5f       	subi	r24, 0xFF	; 255
	if(buffer[pos]!='A')
     b36:	fe 01       	movw	r30, r28
     b38:	e8 0f       	add	r30, r24
     b3a:	f1 1d       	adc	r31, r1
     b3c:	80 81       	ld	r24, Z
     b3e:	81 34       	cpi	r24, 0x41	; 65
     b40:	19 f0       	breq	.+6      	; 0xb48 <processGPGLL+0x82>
	{
		// this indicates invalid data
		workingGPSData.valid=0;
     b42:	10 92 05 07 	sts	0x0705, r1
		return;	
     b46:	e5 cf       	rjmp	.-54     	; 0xb12 <processGPGLL+0x4c>
	}
	else
	{
		workingGPSData.valid=1;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 05 07 	sts	0x0705, r24
	}

	// time
	pos=(commas[4]+1); // 5th comma
     b4e:	80 91 35 07 	lds	r24, 0x0735
     b52:	98 2f       	mov	r25, r24
     b54:	9f 5f       	subi	r25, 0xFF	; 255
	if(buffer[pos]!=',')
     b56:	fe 01       	movw	r30, r28
     b58:	e9 0f       	add	r30, r25
     b5a:	f1 1d       	adc	r31, r1
     b5c:	90 81       	ld	r25, Z
     b5e:	9c 32       	cpi	r25, 0x2C	; 44
     b60:	09 f4       	brne	.+2      	; 0xb64 <processGPGLL+0x9e>
     b62:	5a c0       	rjmp	.+180    	; 0xc18 <processGPGLL+0x152>
	{
		workingGPSData.hours=(buffer[pos++]-48)*10;
     b64:	29 2f       	mov	r18, r25
     b66:	22 0f       	add	r18, r18
     b68:	92 2f       	mov	r25, r18
     b6a:	99 0f       	add	r25, r25
     b6c:	99 0f       	add	r25, r25
     b6e:	92 0f       	add	r25, r18
     b70:	90 5e       	subi	r25, 0xE0	; 224
     b72:	90 93 06 07 	sts	0x0706, r25
     b76:	28 2f       	mov	r18, r24
     b78:	2e 5f       	subi	r18, 0xFE	; 254
		workingGPSData.hours+=(buffer[pos++]-48);
     b7a:	fe 01       	movw	r30, r28
     b7c:	e2 0f       	add	r30, r18
     b7e:	f1 1d       	adc	r31, r1
     b80:	20 81       	ld	r18, Z
     b82:	20 53       	subi	r18, 0x30	; 48
     b84:	29 0f       	add	r18, r25
     b86:	20 93 06 07 	sts	0x0706, r18
     b8a:	98 2f       	mov	r25, r24
     b8c:	9d 5f       	subi	r25, 0xFD	; 253
		workingGPSData.minutes=(buffer[pos++]-48)*10;
     b8e:	fe 01       	movw	r30, r28
     b90:	e9 0f       	add	r30, r25
     b92:	f1 1d       	adc	r31, r1
     b94:	20 81       	ld	r18, Z
     b96:	22 0f       	add	r18, r18
     b98:	92 2f       	mov	r25, r18
     b9a:	99 0f       	add	r25, r25
     b9c:	99 0f       	add	r25, r25
     b9e:	92 0f       	add	r25, r18
     ba0:	90 5e       	subi	r25, 0xE0	; 224
     ba2:	90 93 07 07 	sts	0x0707, r25
     ba6:	28 2f       	mov	r18, r24
     ba8:	2c 5f       	subi	r18, 0xFC	; 252
		workingGPSData.minutes+=(buffer[pos++]-48);
     baa:	fe 01       	movw	r30, r28
     bac:	e2 0f       	add	r30, r18
     bae:	f1 1d       	adc	r31, r1
     bb0:	20 81       	ld	r18, Z
     bb2:	20 53       	subi	r18, 0x30	; 48
     bb4:	29 0f       	add	r18, r25
     bb6:	20 93 07 07 	sts	0x0707, r18
     bba:	98 2f       	mov	r25, r24
     bbc:	9b 5f       	subi	r25, 0xFB	; 251
		workingGPSData.seconds=(buffer[pos++]-48)*10;
     bbe:	fe 01       	movw	r30, r28
     bc0:	e9 0f       	add	r30, r25
     bc2:	f1 1d       	adc	r31, r1
     bc4:	20 81       	ld	r18, Z
     bc6:	22 0f       	add	r18, r18
     bc8:	92 2f       	mov	r25, r18
     bca:	99 0f       	add	r25, r25
     bcc:	99 0f       	add	r25, r25
     bce:	92 0f       	add	r25, r18
     bd0:	90 5e       	subi	r25, 0xE0	; 224
     bd2:	90 93 08 07 	sts	0x0708, r25
     bd6:	28 2f       	mov	r18, r24
     bd8:	2a 5f       	subi	r18, 0xFA	; 250
		workingGPSData.seconds+=(buffer[pos++]-48);
     bda:	fe 01       	movw	r30, r28
     bdc:	e2 0f       	add	r30, r18
     bde:	f1 1d       	adc	r31, r1
     be0:	20 81       	ld	r18, Z
     be2:	20 53       	subi	r18, 0x30	; 48
     be4:	29 0f       	add	r18, r25
     be6:	20 93 08 07 	sts	0x0708, r18
		pos++; //skip the decimal point
     bea:	98 2f       	mov	r25, r24
     bec:	98 5f       	subi	r25, 0xF8	; 248
		workingGPSData.centiseconds=(buffer[pos++]-48)*10;
     bee:	fe 01       	movw	r30, r28
     bf0:	e9 0f       	add	r30, r25
     bf2:	f1 1d       	adc	r31, r1
     bf4:	20 81       	ld	r18, Z
     bf6:	22 0f       	add	r18, r18
     bf8:	92 2f       	mov	r25, r18
     bfa:	99 0f       	add	r25, r25
     bfc:	99 0f       	add	r25, r25
     bfe:	92 0f       	add	r25, r18
     c00:	90 5e       	subi	r25, 0xE0	; 224
     c02:	90 93 09 07 	sts	0x0709, r25
     c06:	87 5f       	subi	r24, 0xF7	; 247
		workingGPSData.centiseconds+=(buffer[pos]-48);
     c08:	fe 01       	movw	r30, r28
     c0a:	e8 0f       	add	r30, r24
     c0c:	f1 1d       	adc	r31, r1
     c0e:	80 81       	ld	r24, Z
     c10:	80 53       	subi	r24, 0x30	; 48
     c12:	89 0f       	add	r24, r25
     c14:	80 93 09 07 	sts	0x0709, r24
	}

	// latitude
	if((commas[1]-commas[0])==11)
     c18:	70 90 32 07 	lds	r7, 0x0732
     c1c:	60 90 31 07 	lds	r6, 0x0731
     c20:	87 2d       	mov	r24, r7
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	86 19       	sub	r24, r6
     c26:	91 09       	sbc	r25, r1
     c28:	0b 97       	sbiw	r24, 0x0b	; 11
     c2a:	c9 f0       	breq	.+50     	; 0xc5e <processGPGLL+0x198>
		workingGPSData.lat_minutes_decimal+=(buffer[pos++]-'0')*(uint32_t)10;
		workingGPSData.lat_minutes_decimal+=(buffer[pos++]-'0');
	}

	// latitude (North or South)
	pos=(commas[1]+1); // 2nd comma
     c2c:	73 94       	inc	r7
	workingGPSData.lat_sign=buffer[pos];
     c2e:	fe 01       	movw	r30, r28
     c30:	e7 0d       	add	r30, r7
     c32:	f1 1d       	adc	r31, r1
     c34:	80 81       	ld	r24, Z
     c36:	80 93 0b 07 	sts	0x070B, r24

	// longitude
	if((commas[3]-commas[2])==12)
     c3a:	70 90 34 07 	lds	r7, 0x0734
     c3e:	60 90 33 07 	lds	r6, 0x0733
     c42:	87 2d       	mov	r24, r7
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	86 19       	sub	r24, r6
     c48:	91 09       	sbc	r25, r1
     c4a:	0c 97       	sbiw	r24, 0x0c	; 12
     c4c:	09 f4       	brne	.+2      	; 0xc50 <processGPGLL+0x18a>
     c4e:	d7 c0       	rjmp	.+430    	; 0xdfe <processGPGLL+0x338>
		workingGPSData.lon_minutes_decimal+=(buffer[pos++]-'0')*(uint32_t)10;
		workingGPSData.lon_minutes_decimal+=(buffer[pos++]-'0');
	}

	// longitude (East or West)
	pos=(commas[3]+1); // 2nd comma
     c50:	73 94       	inc	r7
	workingGPSData.lon_sign=buffer[pos];
     c52:	c7 0d       	add	r28, r7
     c54:	d1 1d       	adc	r29, r1
     c56:	88 81       	ld	r24, Y
     c58:	80 93 13 07 	sts	0x0713, r24
     c5c:	5a cf       	rjmp	.-332    	; 0xb12 <processGPGLL+0x4c>
	}

	// latitude
	if((commas[1]-commas[0])==11)
	{
		pos=(commas[0]+1); // 5th comma
     c5e:	86 2d       	mov	r24, r6
     c60:	8f 5f       	subi	r24, 0xFF	; 255
	
		workingGPSData.lat_degrees=(buffer[pos++]-'0')*10;
     c62:	fe 01       	movw	r30, r28
     c64:	e8 0f       	add	r30, r24
     c66:	f1 1d       	adc	r31, r1
     c68:	20 81       	ld	r18, Z
     c6a:	8a e0       	ldi	r24, 0x0A	; 10
     c6c:	28 02       	muls	r18, r24
     c6e:	90 01       	movw	r18, r0
     c70:	11 24       	eor	r1, r1
     c72:	20 5e       	subi	r18, 0xE0	; 224
     c74:	31 40       	sbci	r19, 0x01	; 1
     c76:	30 93 0d 07 	sts	0x070D, r19
     c7a:	20 93 0c 07 	sts	0x070C, r18
     c7e:	86 2d       	mov	r24, r6
     c80:	8e 5f       	subi	r24, 0xFE	; 254
		workingGPSData.lat_degrees+=(buffer[pos++]-'0');
     c82:	fe 01       	movw	r30, r28
     c84:	e8 0f       	add	r30, r24
     c86:	f1 1d       	adc	r31, r1
     c88:	80 81       	ld	r24, Z
     c8a:	99 27       	eor	r25, r25
     c8c:	87 fd       	sbrc	r24, 7
     c8e:	90 95       	com	r25
     c90:	c0 97       	sbiw	r24, 0x30	; 48
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	90 93 0d 07 	sts	0x070D, r25
     c9a:	80 93 0c 07 	sts	0x070C, r24
     c9e:	86 2d       	mov	r24, r6
     ca0:	8d 5f       	subi	r24, 0xFD	; 253
		workingGPSData.lat_minutes=(buffer[pos++]-'0')*10;
     ca2:	fe 01       	movw	r30, r28
     ca4:	e8 0f       	add	r30, r24
     ca6:	f1 1d       	adc	r31, r1
     ca8:	90 81       	ld	r25, Z
     caa:	99 0f       	add	r25, r25
     cac:	89 2f       	mov	r24, r25
     cae:	88 0f       	add	r24, r24
     cb0:	88 0f       	add	r24, r24
     cb2:	89 0f       	add	r24, r25
     cb4:	80 5e       	subi	r24, 0xE0	; 224
     cb6:	80 93 0e 07 	sts	0x070E, r24
     cba:	96 2d       	mov	r25, r6
     cbc:	9c 5f       	subi	r25, 0xFC	; 252
		workingGPSData.lat_minutes+=(buffer[pos++]-'0');
     cbe:	fe 01       	movw	r30, r28
     cc0:	e9 0f       	add	r30, r25
     cc2:	f1 1d       	adc	r31, r1
     cc4:	90 81       	ld	r25, Z
     cc6:	90 53       	subi	r25, 0x30	; 48
     cc8:	98 0f       	add	r25, r24
     cca:	90 93 0e 07 	sts	0x070E, r25
		pos++; // skip the decimal point
     cce:	86 2d       	mov	r24, r6
     cd0:	8a 5f       	subi	r24, 0xFA	; 250
		workingGPSData.lat_minutes_decimal=(buffer[pos++]-'0')*(uint32_t)10000;
     cd2:	fe 01       	movw	r30, r28
     cd4:	e8 0f       	add	r30, r24
     cd6:	f1 1d       	adc	r31, r1
     cd8:	a0 81       	ld	r26, Z
     cda:	bb 27       	eor	r27, r27
     cdc:	a7 fd       	sbrc	r26, 7
     cde:	b0 95       	com	r27
     ce0:	d0 97       	sbiw	r26, 0x30	; 48
     ce2:	20 e1       	ldi	r18, 0x10	; 16
     ce4:	37 e2       	ldi	r19, 0x27	; 39
     ce6:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__usmulhisi3>
     cea:	4b 01       	movw	r8, r22
     cec:	5c 01       	movw	r10, r24
     cee:	60 93 0f 07 	sts	0x070F, r22
     cf2:	70 93 10 07 	sts	0x0710, r23
     cf6:	80 93 11 07 	sts	0x0711, r24
     cfa:	90 93 12 07 	sts	0x0712, r25
     cfe:	86 2d       	mov	r24, r6
     d00:	89 5f       	subi	r24, 0xF9	; 249
		workingGPSData.lat_minutes_decimal+=(buffer[pos++]-'0')*(uint32_t)1000;
     d02:	fe 01       	movw	r30, r28
     d04:	e8 0f       	add	r30, r24
     d06:	f1 1d       	adc	r31, r1
     d08:	a0 81       	ld	r26, Z
     d0a:	bb 27       	eor	r27, r27
     d0c:	a7 fd       	sbrc	r26, 7
     d0e:	b0 95       	com	r27
     d10:	d0 97       	sbiw	r26, 0x30	; 48
     d12:	28 ee       	ldi	r18, 0xE8	; 232
     d14:	33 e0       	ldi	r19, 0x03	; 3
     d16:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__usmulhisi3>
     d1a:	6b 01       	movw	r12, r22
     d1c:	7c 01       	movw	r14, r24
     d1e:	c8 0c       	add	r12, r8
     d20:	d9 1c       	adc	r13, r9
     d22:	ea 1c       	adc	r14, r10
     d24:	fb 1c       	adc	r15, r11
     d26:	c0 92 0f 07 	sts	0x070F, r12
     d2a:	d0 92 10 07 	sts	0x0710, r13
     d2e:	e0 92 11 07 	sts	0x0711, r14
     d32:	f0 92 12 07 	sts	0x0712, r15
     d36:	86 2d       	mov	r24, r6
     d38:	88 5f       	subi	r24, 0xF8	; 248
		workingGPSData.lat_minutes_decimal+=(buffer[pos++]-'0')*(uint32_t)100;
     d3a:	fe 01       	movw	r30, r28
     d3c:	e8 0f       	add	r30, r24
     d3e:	f1 1d       	adc	r31, r1
     d40:	a0 81       	ld	r26, Z
     d42:	bb 27       	eor	r27, r27
     d44:	a7 fd       	sbrc	r26, 7
     d46:	b0 95       	com	r27
     d48:	d0 97       	sbiw	r26, 0x30	; 48
     d4a:	24 e6       	ldi	r18, 0x64	; 100
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__usmulhisi3>
     d52:	6c 0d       	add	r22, r12
     d54:	7d 1d       	adc	r23, r13
     d56:	8e 1d       	adc	r24, r14
     d58:	9f 1d       	adc	r25, r15
     d5a:	60 93 0f 07 	sts	0x070F, r22
     d5e:	70 93 10 07 	sts	0x0710, r23
     d62:	80 93 11 07 	sts	0x0711, r24
     d66:	90 93 12 07 	sts	0x0712, r25
     d6a:	26 2d       	mov	r18, r6
     d6c:	27 5f       	subi	r18, 0xF7	; 247
		workingGPSData.lat_minutes_decimal+=(buffer[pos++]-'0')*(uint32_t)10;
     d6e:	fe 01       	movw	r30, r28
     d70:	e2 0f       	add	r30, r18
     d72:	f1 1d       	adc	r31, r1
     d74:	c0 80       	ld	r12, Z
     d76:	dd 24       	eor	r13, r13
     d78:	c7 fc       	sbrc	r12, 7
     d7a:	d0 94       	com	r13
     d7c:	20 e3       	ldi	r18, 0x30	; 48
     d7e:	c2 1a       	sub	r12, r18
     d80:	d1 08       	sbc	r13, r1
     d82:	ee 24       	eor	r14, r14
     d84:	d7 fc       	sbrc	r13, 7
     d86:	e0 94       	com	r14
     d88:	fe 2c       	mov	r15, r14
     d8a:	cc 0c       	add	r12, r12
     d8c:	dd 1c       	adc	r13, r13
     d8e:	ee 1c       	adc	r14, r14
     d90:	ff 1c       	adc	r15, r15
     d92:	46 01       	movw	r8, r12
     d94:	57 01       	movw	r10, r14
     d96:	88 0c       	add	r8, r8
     d98:	99 1c       	adc	r9, r9
     d9a:	aa 1c       	adc	r10, r10
     d9c:	bb 1c       	adc	r11, r11
     d9e:	88 0c       	add	r8, r8
     da0:	99 1c       	adc	r9, r9
     da2:	aa 1c       	adc	r10, r10
     da4:	bb 1c       	adc	r11, r11
     da6:	8c 0c       	add	r8, r12
     da8:	9d 1c       	adc	r9, r13
     daa:	ae 1c       	adc	r10, r14
     dac:	bf 1c       	adc	r11, r15
     dae:	86 0e       	add	r8, r22
     db0:	97 1e       	adc	r9, r23
     db2:	a8 1e       	adc	r10, r24
     db4:	b9 1e       	adc	r11, r25
     db6:	80 92 0f 07 	sts	0x070F, r8
     dba:	90 92 10 07 	sts	0x0710, r9
     dbe:	a0 92 11 07 	sts	0x0711, r10
     dc2:	b0 92 12 07 	sts	0x0712, r11
     dc6:	86 2d       	mov	r24, r6
     dc8:	86 5f       	subi	r24, 0xF6	; 246
		workingGPSData.lat_minutes_decimal+=(buffer[pos++]-'0');
     dca:	fe 01       	movw	r30, r28
     dcc:	e8 0f       	add	r30, r24
     dce:	f1 1d       	adc	r31, r1
     dd0:	00 81       	ld	r16, Z
     dd2:	11 27       	eor	r17, r17
     dd4:	07 fd       	sbrc	r16, 7
     dd6:	10 95       	com	r17
     dd8:	00 53       	subi	r16, 0x30	; 48
     dda:	11 09       	sbc	r17, r1
     ddc:	22 27       	eor	r18, r18
     dde:	17 fd       	sbrc	r17, 7
     de0:	20 95       	com	r18
     de2:	32 2f       	mov	r19, r18
     de4:	08 0d       	add	r16, r8
     de6:	19 1d       	adc	r17, r9
     de8:	2a 1d       	adc	r18, r10
     dea:	3b 1d       	adc	r19, r11
     dec:	00 93 0f 07 	sts	0x070F, r16
     df0:	10 93 10 07 	sts	0x0710, r17
     df4:	20 93 11 07 	sts	0x0711, r18
     df8:	30 93 12 07 	sts	0x0712, r19
     dfc:	17 cf       	rjmp	.-466    	; 0xc2c <processGPGLL+0x166>
	workingGPSData.lat_sign=buffer[pos];

	// longitude
	if((commas[3]-commas[2])==12)
	{
		pos=(commas[2]+1); // 5th comma
     dfe:	86 2d       	mov	r24, r6
     e00:	8f 5f       	subi	r24, 0xFF	; 255
	
		workingGPSData.lon_degrees=(buffer[pos++]-'0')*100;
     e02:	fe 01       	movw	r30, r28
     e04:	e8 0f       	add	r30, r24
     e06:	f1 1d       	adc	r31, r1
     e08:	80 81       	ld	r24, Z
     e0a:	34 e6       	ldi	r19, 0x64	; 100
     e0c:	83 02       	muls	r24, r19
     e0e:	c0 01       	movw	r24, r0
     e10:	11 24       	eor	r1, r1
     e12:	80 5c       	subi	r24, 0xC0	; 192
     e14:	92 41       	sbci	r25, 0x12	; 18
     e16:	90 93 15 07 	sts	0x0715, r25
     e1a:	80 93 14 07 	sts	0x0714, r24
     e1e:	26 2d       	mov	r18, r6
     e20:	2e 5f       	subi	r18, 0xFE	; 254
		workingGPSData.lon_degrees+=(buffer[pos++]-'0')*10;
     e22:	fe 01       	movw	r30, r28
     e24:	e2 0f       	add	r30, r18
     e26:	f1 1d       	adc	r31, r1
     e28:	20 81       	ld	r18, Z
     e2a:	3a e0       	ldi	r19, 0x0A	; 10
     e2c:	23 02       	muls	r18, r19
     e2e:	80 0d       	add	r24, r0
     e30:	91 1d       	adc	r25, r1
     e32:	11 24       	eor	r1, r1
     e34:	80 5e       	subi	r24, 0xE0	; 224
     e36:	91 40       	sbci	r25, 0x01	; 1
     e38:	90 93 15 07 	sts	0x0715, r25
     e3c:	80 93 14 07 	sts	0x0714, r24
     e40:	26 2d       	mov	r18, r6
     e42:	2d 5f       	subi	r18, 0xFD	; 253
		workingGPSData.lon_degrees+=(buffer[pos++]-'0');
     e44:	fe 01       	movw	r30, r28
     e46:	e2 0f       	add	r30, r18
     e48:	f1 1d       	adc	r31, r1
     e4a:	20 81       	ld	r18, Z
     e4c:	33 27       	eor	r19, r19
     e4e:	27 fd       	sbrc	r18, 7
     e50:	30 95       	com	r19
     e52:	20 53       	subi	r18, 0x30	; 48
     e54:	31 09       	sbc	r19, r1
     e56:	28 0f       	add	r18, r24
     e58:	39 1f       	adc	r19, r25
     e5a:	30 93 15 07 	sts	0x0715, r19
     e5e:	20 93 14 07 	sts	0x0714, r18
     e62:	86 2d       	mov	r24, r6
     e64:	8c 5f       	subi	r24, 0xFC	; 252
		workingGPSData.lon_minutes=(buffer[pos++]-'0')*10;
     e66:	fe 01       	movw	r30, r28
     e68:	e8 0f       	add	r30, r24
     e6a:	f1 1d       	adc	r31, r1
     e6c:	90 81       	ld	r25, Z
     e6e:	99 0f       	add	r25, r25
     e70:	89 2f       	mov	r24, r25
     e72:	88 0f       	add	r24, r24
     e74:	88 0f       	add	r24, r24
     e76:	89 0f       	add	r24, r25
     e78:	80 5e       	subi	r24, 0xE0	; 224
     e7a:	80 93 16 07 	sts	0x0716, r24
     e7e:	96 2d       	mov	r25, r6
     e80:	9b 5f       	subi	r25, 0xFB	; 251
		workingGPSData.lon_minutes+=(buffer[pos++]-'0');
     e82:	fe 01       	movw	r30, r28
     e84:	e9 0f       	add	r30, r25
     e86:	f1 1d       	adc	r31, r1
     e88:	90 81       	ld	r25, Z
     e8a:	90 53       	subi	r25, 0x30	; 48
     e8c:	98 0f       	add	r25, r24
     e8e:	90 93 16 07 	sts	0x0716, r25
		pos++; // skip the decimal point
     e92:	86 2d       	mov	r24, r6
     e94:	89 5f       	subi	r24, 0xF9	; 249
		workingGPSData.lon_minutes_decimal=(buffer[pos++]-'0')*(uint32_t)10000;
     e96:	fe 01       	movw	r30, r28
     e98:	e8 0f       	add	r30, r24
     e9a:	f1 1d       	adc	r31, r1
     e9c:	a0 81       	ld	r26, Z
     e9e:	bb 27       	eor	r27, r27
     ea0:	a7 fd       	sbrc	r26, 7
     ea2:	b0 95       	com	r27
     ea4:	d0 97       	sbiw	r26, 0x30	; 48
     ea6:	20 e1       	ldi	r18, 0x10	; 16
     ea8:	37 e2       	ldi	r19, 0x27	; 39
     eaa:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__usmulhisi3>
     eae:	4b 01       	movw	r8, r22
     eb0:	5c 01       	movw	r10, r24
     eb2:	60 93 17 07 	sts	0x0717, r22
     eb6:	70 93 18 07 	sts	0x0718, r23
     eba:	80 93 19 07 	sts	0x0719, r24
     ebe:	90 93 1a 07 	sts	0x071A, r25
     ec2:	86 2d       	mov	r24, r6
     ec4:	88 5f       	subi	r24, 0xF8	; 248
		workingGPSData.lon_minutes_decimal+=(buffer[pos++]-'0')*(uint32_t)1000;
     ec6:	fe 01       	movw	r30, r28
     ec8:	e8 0f       	add	r30, r24
     eca:	f1 1d       	adc	r31, r1
     ecc:	a0 81       	ld	r26, Z
     ece:	bb 27       	eor	r27, r27
     ed0:	a7 fd       	sbrc	r26, 7
     ed2:	b0 95       	com	r27
     ed4:	d0 97       	sbiw	r26, 0x30	; 48
     ed6:	28 ee       	ldi	r18, 0xE8	; 232
     ed8:	33 e0       	ldi	r19, 0x03	; 3
     eda:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__usmulhisi3>
     ede:	6b 01       	movw	r12, r22
     ee0:	7c 01       	movw	r14, r24
     ee2:	c8 0c       	add	r12, r8
     ee4:	d9 1c       	adc	r13, r9
     ee6:	ea 1c       	adc	r14, r10
     ee8:	fb 1c       	adc	r15, r11
     eea:	c0 92 17 07 	sts	0x0717, r12
     eee:	d0 92 18 07 	sts	0x0718, r13
     ef2:	e0 92 19 07 	sts	0x0719, r14
     ef6:	f0 92 1a 07 	sts	0x071A, r15
     efa:	86 2d       	mov	r24, r6
     efc:	87 5f       	subi	r24, 0xF7	; 247
		workingGPSData.lon_minutes_decimal+=(buffer[pos++]-'0')*(uint32_t)100;
     efe:	fe 01       	movw	r30, r28
     f00:	e8 0f       	add	r30, r24
     f02:	f1 1d       	adc	r31, r1
     f04:	a0 81       	ld	r26, Z
     f06:	bb 27       	eor	r27, r27
     f08:	a7 fd       	sbrc	r26, 7
     f0a:	b0 95       	com	r27
     f0c:	d0 97       	sbiw	r26, 0x30	; 48
     f0e:	24 e6       	ldi	r18, 0x64	; 100
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__usmulhisi3>
     f16:	6c 0d       	add	r22, r12
     f18:	7d 1d       	adc	r23, r13
     f1a:	8e 1d       	adc	r24, r14
     f1c:	9f 1d       	adc	r25, r15
     f1e:	60 93 17 07 	sts	0x0717, r22
     f22:	70 93 18 07 	sts	0x0718, r23
     f26:	80 93 19 07 	sts	0x0719, r24
     f2a:	90 93 1a 07 	sts	0x071A, r25
     f2e:	26 2d       	mov	r18, r6
     f30:	26 5f       	subi	r18, 0xF6	; 246
		workingGPSData.lon_minutes_decimal+=(buffer[pos++]-'0')*(uint32_t)10;
     f32:	fe 01       	movw	r30, r28
     f34:	e2 0f       	add	r30, r18
     f36:	f1 1d       	adc	r31, r1
     f38:	c0 80       	ld	r12, Z
     f3a:	dd 24       	eor	r13, r13
     f3c:	c7 fc       	sbrc	r12, 7
     f3e:	d0 94       	com	r13
     f40:	20 e3       	ldi	r18, 0x30	; 48
     f42:	c2 1a       	sub	r12, r18
     f44:	d1 08       	sbc	r13, r1
     f46:	ee 24       	eor	r14, r14
     f48:	d7 fc       	sbrc	r13, 7
     f4a:	e0 94       	com	r14
     f4c:	fe 2c       	mov	r15, r14
     f4e:	cc 0c       	add	r12, r12
     f50:	dd 1c       	adc	r13, r13
     f52:	ee 1c       	adc	r14, r14
     f54:	ff 1c       	adc	r15, r15
     f56:	46 01       	movw	r8, r12
     f58:	57 01       	movw	r10, r14
     f5a:	88 0c       	add	r8, r8
     f5c:	99 1c       	adc	r9, r9
     f5e:	aa 1c       	adc	r10, r10
     f60:	bb 1c       	adc	r11, r11
     f62:	88 0c       	add	r8, r8
     f64:	99 1c       	adc	r9, r9
     f66:	aa 1c       	adc	r10, r10
     f68:	bb 1c       	adc	r11, r11
     f6a:	8c 0c       	add	r8, r12
     f6c:	9d 1c       	adc	r9, r13
     f6e:	ae 1c       	adc	r10, r14
     f70:	bf 1c       	adc	r11, r15
     f72:	86 0e       	add	r8, r22
     f74:	97 1e       	adc	r9, r23
     f76:	a8 1e       	adc	r10, r24
     f78:	b9 1e       	adc	r11, r25
     f7a:	80 92 17 07 	sts	0x0717, r8
     f7e:	90 92 18 07 	sts	0x0718, r9
     f82:	a0 92 19 07 	sts	0x0719, r10
     f86:	b0 92 1a 07 	sts	0x071A, r11
     f8a:	86 2d       	mov	r24, r6
     f8c:	85 5f       	subi	r24, 0xF5	; 245
		workingGPSData.lon_minutes_decimal+=(buffer[pos++]-'0');
     f8e:	fe 01       	movw	r30, r28
     f90:	e8 0f       	add	r30, r24
     f92:	f1 1d       	adc	r31, r1
     f94:	00 81       	ld	r16, Z
     f96:	11 27       	eor	r17, r17
     f98:	07 fd       	sbrc	r16, 7
     f9a:	10 95       	com	r17
     f9c:	00 53       	subi	r16, 0x30	; 48
     f9e:	11 09       	sbc	r17, r1
     fa0:	22 27       	eor	r18, r18
     fa2:	17 fd       	sbrc	r17, 7
     fa4:	20 95       	com	r18
     fa6:	32 2f       	mov	r19, r18
     fa8:	08 0d       	add	r16, r8
     faa:	19 1d       	adc	r17, r9
     fac:	2a 1d       	adc	r18, r10
     fae:	3b 1d       	adc	r19, r11
     fb0:	00 93 17 07 	sts	0x0717, r16
     fb4:	10 93 18 07 	sts	0x0718, r17
     fb8:	20 93 19 07 	sts	0x0719, r18
     fbc:	30 93 1a 07 	sts	0x071A, r19
     fc0:	47 ce       	rjmp	.-882    	; 0xc50 <processGPGLL+0x18a>

00000fc2 <processGPVTG>:
}

// FIRST : $GPVTG,,T,,M,0.288,N,0.533,K,A*24

void processGPVTG(char *buffer,uint8_t bufferLength)
{
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <processGPVTG+0x6>
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
uint8_t findCommas(char *buffer, uint8_t bufferLength)
{
	uint8_t pos=0;
	uint8_t commaPos=0;

	for(pos=0;pos<bufferLength;pos++)
     fcc:	66 23       	and	r22, r22
     fce:	a9 f0       	breq	.+42     	; 0xffa <processGPVTG+0x38>
     fd0:	fc 01       	movw	r30, r24
}

uint8_t findCommas(char *buffer, uint8_t bufferLength)
{
	uint8_t pos=0;
	uint8_t commaPos=0;
     fd2:	40 e0       	ldi	r20, 0x00	; 0

	for(pos=0;pos<bufferLength;pos++)
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <processGPVTG+0x1c>
     fd8:	2f 5f       	subi	r18, 0xFF	; 255
     fda:	26 17       	cp	r18, r22
     fdc:	61 f0       	breq	.+24     	; 0xff6 <processGPVTG+0x34>
	{
		if(buffer[pos]==',')
     fde:	31 91       	ld	r19, Z+
     fe0:	3c 32       	cpi	r19, 0x2C	; 44
     fe2:	d1 f7       	brne	.-12     	; 0xfd8 <processGPVTG+0x16>
		{
			commas[commaPos++]=pos;
     fe4:	a4 2f       	mov	r26, r20
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	af 5c       	subi	r26, 0xCF	; 207
     fea:	b8 4f       	sbci	r27, 0xF8	; 248
     fec:	2c 93       	st	X, r18
     fee:	4f 5f       	subi	r20, 0xFF	; 255
uint8_t findCommas(char *buffer, uint8_t bufferLength)
{
	uint8_t pos=0;
	uint8_t commaPos=0;

	for(pos=0;pos<bufferLength;pos++)
     ff0:	2f 5f       	subi	r18, 0xFF	; 255
     ff2:	26 13       	cpse	r18, r22
     ff4:	f4 cf       	rjmp	.-24     	; 0xfde <processGPVTG+0x1c>
	uint8_t count=0;
	char speedBuffer[3];

	count=findCommas(buffer,bufferLength);

	if(count!=9)
     ff6:	49 30       	cpi	r20, 0x09	; 9
     ff8:	41 f0       	breq	.+16     	; 0x100a <processGPVTG+0x48>
			workingGPSData.speed=0;
		}
	}
	else
	{
		workingGPSData.speed=0;
     ffa:	10 92 0a 07 	sts	0x070A, r1
	}
}
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret
	{
		workingGPSData.speed=0;
		return;
	}

	pos=(commas[6]+1); // 7th comma
    100a:	20 91 37 07 	lds	r18, 0x0737
    100e:	2f 5f       	subi	r18, 0xFF	; 255

	// check to see whether we have any data, if not the next
	// character will be another comma, if so, speed=0

	if(buffer[pos]!=',')
    1010:	fc 01       	movw	r30, r24
    1012:	e2 0f       	add	r30, r18
    1014:	f1 1d       	adc	r31, r1
    1016:	30 81       	ld	r19, Z
    1018:	3c 32       	cpi	r19, 0x2C	; 44
    101a:	79 f3       	breq	.-34     	; 0xffa <processGPVTG+0x38>
	{
		// extract the whole part of the speed
		count=0;
		while(buffer[pos]!='.')
    101c:	3e 32       	cpi	r19, 0x2E	; 46
    101e:	69 f3       	breq	.-38     	; 0xffa <processGPVTG+0x38>
    1020:	40 e0       	ldi	r20, 0x00	; 0
		{
			speedBuffer[count++]=buffer[pos++];
    1022:	e1 e0       	ldi	r30, 0x01	; 1
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	ec 0f       	add	r30, r28
    1028:	fd 1f       	adc	r31, r29
    102a:	e4 0f       	add	r30, r20
    102c:	f1 1d       	adc	r31, r1
    102e:	30 83       	st	Z, r19
    1030:	4f 5f       	subi	r20, 0xFF	; 255
    1032:	2f 5f       	subi	r18, 0xFF	; 255

	if(buffer[pos]!=',')
	{
		// extract the whole part of the speed
		count=0;
		while(buffer[pos]!='.')
    1034:	fc 01       	movw	r30, r24
    1036:	e2 0f       	add	r30, r18
    1038:	f1 1d       	adc	r31, r1
    103a:	30 81       	ld	r19, Z
    103c:	3e 32       	cpi	r19, 0x2E	; 46
    103e:	89 f7       	brne	.-30     	; 0x1022 <processGPVTG+0x60>
		{
			speedBuffer[count++]=buffer[pos++];
		}

		if(count==1)
    1040:	41 30       	cpi	r20, 0x01	; 1
    1042:	99 f0       	breq	.+38     	; 0x106a <processGPVTG+0xa8>
		{
			workingGPSData.speed=speedBuffer[0]-'0';
		}
		else if(count==2)
    1044:	42 30       	cpi	r20, 0x02	; 2
    1046:	b1 f0       	breq	.+44     	; 0x1074 <processGPVTG+0xb2>
		{
			workingGPSData.speed=(speedBuffer[0]-'0')*10;
			workingGPSData.speed+=speedBuffer[1]-'0';
		}
		else if(count==3)
    1048:	43 30       	cpi	r20, 0x03	; 3
    104a:	b9 f6       	brne	.-82     	; 0xffa <processGPVTG+0x38>
		{
			workingGPSData.speed=(speedBuffer[0]-'0')*100;
			workingGPSData.speed+=(speedBuffer[1]-'0')*10;
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	80 5d       	subi	r24, 0xD0	; 208
			workingGPSData.speed=(speedBuffer[0]-'0')*10;
			workingGPSData.speed+=speedBuffer[1]-'0';
		}
		else if(count==3)
		{
			workingGPSData.speed=(speedBuffer[0]-'0')*100;
    1050:	99 81       	ldd	r25, Y+1	; 0x01
			workingGPSData.speed+=(speedBuffer[1]-'0')*10;
			workingGPSData.speed+=speedBuffer[2]-'0';
    1052:	24 e6       	ldi	r18, 0x64	; 100
    1054:	92 9f       	mul	r25, r18
    1056:	80 0d       	add	r24, r0
    1058:	11 24       	eor	r1, r1
			workingGPSData.speed+=speedBuffer[1]-'0';
		}
		else if(count==3)
		{
			workingGPSData.speed=(speedBuffer[0]-'0')*100;
			workingGPSData.speed+=(speedBuffer[1]-'0')*10;
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
			workingGPSData.speed+=speedBuffer[2]-'0';
    105c:	2a e0       	ldi	r18, 0x0A	; 10
    105e:	92 9f       	mul	r25, r18
    1060:	80 0d       	add	r24, r0
    1062:	11 24       	eor	r1, r1
    1064:	80 93 0a 07 	sts	0x070A, r24
    1068:	ca cf       	rjmp	.-108    	; 0xffe <processGPVTG+0x3c>
			speedBuffer[count++]=buffer[pos++];
		}

		if(count==1)
		{
			workingGPSData.speed=speedBuffer[0]-'0';
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	80 53       	subi	r24, 0x30	; 48
    106e:	80 93 0a 07 	sts	0x070A, r24
    1072:	c5 cf       	rjmp	.-118    	; 0xffe <processGPVTG+0x3c>
		}
		else if(count==2)
		{
			workingGPSData.speed=(speedBuffer[0]-'0')*10;
			workingGPSData.speed+=speedBuffer[1]-'0';
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	80 51       	subi	r24, 0x10	; 16
		{
			workingGPSData.speed=speedBuffer[0]-'0';
		}
		else if(count==2)
		{
			workingGPSData.speed=(speedBuffer[0]-'0')*10;
    1078:	99 81       	ldd	r25, Y+1	; 0x01
			workingGPSData.speed+=speedBuffer[1]-'0';
    107a:	2a e0       	ldi	r18, 0x0A	; 10
    107c:	92 9f       	mul	r25, r18
    107e:	80 0d       	add	r24, r0
    1080:	11 24       	eor	r1, r1
    1082:	80 93 0a 07 	sts	0x070A, r24
    1086:	bb cf       	rjmp	.-138    	; 0xffe <processGPVTG+0x3c>

00001088 <verifyChecksum>:
uint8_t verifyChecksum(char *buffer, uint8_t sentanceEnd)
{
	uint8_t calcCRC=0;
	uint8_t sentanceCRC=0;

	for(uint8_t loop=1;loop<sentanceEnd;loop++)
    1088:	62 30       	cpi	r22, 0x02	; 2
    108a:	40 f1       	brcs	.+80     	; 0x10dc <verifyChecksum+0x54>
	{
		workingGPSData.speed=0;
	}
}

uint8_t verifyChecksum(char *buffer, uint8_t sentanceEnd)
    108c:	fc 01       	movw	r30, r24
    108e:	31 96       	adiw	r30, 0x01	; 1
    1090:	9c 01       	movw	r18, r24
    1092:	2e 5f       	subi	r18, 0xFE	; 254
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	46 2f       	mov	r20, r22
    1098:	42 50       	subi	r20, 0x02	; 2
    109a:	24 0f       	add	r18, r20
    109c:	31 1d       	adc	r19, r1
{
	uint8_t calcCRC=0;
    109e:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t sentanceCRC=0;

	for(uint8_t loop=1;loop<sentanceEnd;loop++)
	{
		calcCRC^=buffer[loop];
    10a0:	51 91       	ld	r21, Z+
    10a2:	45 27       	eor	r20, r21
uint8_t verifyChecksum(char *buffer, uint8_t sentanceEnd)
{
	uint8_t calcCRC=0;
	uint8_t sentanceCRC=0;

	for(uint8_t loop=1;loop<sentanceEnd;loop++)
    10a4:	e2 17       	cp	r30, r18
    10a6:	f3 07       	cpc	r31, r19
    10a8:	d9 f7       	brne	.-10     	; 0x10a0 <verifyChecksum+0x18>
	{
		calcCRC^=buffer[loop];
	}

	if(((uint8_t)buffer[sentanceEnd+1]>=(uint8_t)'0')&&
    10aa:	fc 01       	movw	r30, r24
    10ac:	e6 0f       	add	r30, r22
    10ae:	f1 1d       	adc	r31, r1
    10b0:	91 81       	ldd	r25, Z+1	; 0x01
    10b2:	89 2f       	mov	r24, r25
    10b4:	80 53       	subi	r24, 0x30	; 48
    10b6:	8a 30       	cpi	r24, 0x0A	; 10
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <verifyChecksum+0x34>
	{
		sentanceCRC=buffer[sentanceEnd+1]-'0';
	}
	else
	{
		sentanceCRC=buffer[sentanceEnd+1]-'A'+10;
    10ba:	87 50       	subi	r24, 0x07	; 7
	}

	sentanceCRC<<=4;
    10bc:	82 95       	swap	r24
    10be:	80 7f       	andi	r24, 0xF0	; 240

	if(((uint8_t)buffer[sentanceEnd+2]>=(uint8_t)'0')&&
    10c0:	92 81       	ldd	r25, Z+2	; 0x02
    10c2:	29 2f       	mov	r18, r25
    10c4:	20 53       	subi	r18, 0x30	; 48
    10c6:	2a 30       	cpi	r18, 0x0A	; 10
    10c8:	30 f4       	brcc	.+12     	; 0x10d6 <verifyChecksum+0x4e>
	   ((uint8_t)buffer[sentanceEnd+2]<=(uint8_t)'9'))
	{
		sentanceCRC+=(buffer[sentanceEnd+2]-'0');
    10ca:	98 2f       	mov	r25, r24
    10cc:	92 0f       	add	r25, r18
	else
	{
		sentanceCRC+=(buffer[sentanceEnd+2]-'A'+10);
	}

	if(calcCRC==sentanceCRC)
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	94 13       	cpse	r25, r20
    10d2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 1;
	}

	return 0;
}
    10d4:	08 95       	ret
	{
		sentanceCRC+=(buffer[sentanceEnd+2]-'0');
	}
	else
	{
		sentanceCRC+=(buffer[sentanceEnd+2]-'A'+10);
    10d6:	97 53       	subi	r25, 0x37	; 55
    10d8:	98 0f       	add	r25, r24
    10da:	f9 cf       	rjmp	.-14     	; 0x10ce <verifyChecksum+0x46>
	}
}

uint8_t verifyChecksum(char *buffer, uint8_t sentanceEnd)
{
	uint8_t calcCRC=0;
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	e5 cf       	rjmp	.-54     	; 0x10aa <verifyChecksum+0x22>

000010e0 <processGPSCharacter>:

	return 0;
}

void processGPSCharacter(char ch)
{
    10e0:	cf 93       	push	r28
	switch(searchState)
    10e2:	20 91 31 03 	lds	r18, 0x0331
    10e6:	30 91 32 03 	lds	r19, 0x0332
    10ea:	24 30       	cpi	r18, 0x04	; 4
    10ec:	31 05       	cpc	r19, r1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <processGPSCharacter+0x12>
    10f0:	c5 c0       	rjmp	.+394    	; 0x127c <processGPSCharacter+0x19c>
    10f2:	88 f0       	brcs	.+34     	; 0x1116 <processGPSCharacter+0x36>
    10f4:	27 30       	cpi	r18, 0x07	; 7
    10f6:	31 05       	cpc	r19, r1
    10f8:	09 f4       	brne	.+2      	; 0x10fc <processGPSCharacter+0x1c>
    10fa:	79 c0       	rjmp	.+242    	; 0x11ee <processGPSCharacter+0x10e>
    10fc:	b0 f4       	brcc	.+44     	; 0x112a <processGPSCharacter+0x4a>
    10fe:	25 30       	cpi	r18, 0x05	; 5
    1100:	31 05       	cpc	r19, r1
    1102:	09 f4       	brne	.+2      	; 0x1106 <processGPSCharacter+0x26>
    1104:	61 c0       	rjmp	.+194    	; 0x11c8 <processGPSCharacter+0xe8>
    1106:	26 30       	cpi	r18, 0x06	; 6
    1108:	31 05       	cpc	r19, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <processGPSCharacter+0x2e>
    110c:	4a c0       	rjmp	.+148    	; 0x11a2 <processGPSCharacter+0xc2>
			break;
		}

		default :
		{
			exit(1);
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 dd 17 	call	0x2fba	; 0x2fba <_exit>
	return 0;
}

void processGPSCharacter(char ch)
{
	switch(searchState)
    1116:	21 30       	cpi	r18, 0x01	; 1
    1118:	31 05       	cpc	r19, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <processGPSCharacter+0x3e>
    111c:	9b c0       	rjmp	.+310    	; 0x1254 <processGPSCharacter+0x174>
    111e:	e0 f4       	brcc	.+56     	; 0x1158 <processGPSCharacter+0x78>
	{
		case searchingDollar :
		{
			if(ch=='$')
    1120:	84 32       	cpi	r24, 0x24	; 36
    1122:	09 f4       	brne	.+2      	; 0x1126 <processGPSCharacter+0x46>
    1124:	db c0       	rjmp	.+438    	; 0x12dc <processGPSCharacter+0x1fc>
		default :
		{
			exit(1);
		}
	}
}
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret
	return 0;
}

void processGPSCharacter(char ch)
{
	switch(searchState)
    112a:	28 30       	cpi	r18, 0x08	; 8
    112c:	31 05       	cpc	r19, r1
    112e:	09 f4       	brne	.+2      	; 0x1132 <processGPSCharacter+0x52>
    1130:	72 c0       	rjmp	.+228    	; 0x1216 <processGPSCharacter+0x136>
    1132:	29 30       	cpi	r18, 0x09	; 9
    1134:	31 05       	cpc	r19, r1
    1136:	59 f7       	brne	.-42     	; 0x110e <processGPSCharacter+0x2e>
			break;
		}

		case assembleGPVTG :
		{
			if(ch!=0x0d) // look for line terminator
    1138:	8d 30       	cpi	r24, 0x0D	; 13
    113a:	09 f4       	brne	.+2      	; 0x113e <processGPSCharacter+0x5e>
    113c:	b3 c0       	rjmp	.+358    	; 0x12a4 <processGPSCharacter+0x1c4>
			{
				PORTB|=0x80;
    113e:	2f 9a       	sbi	0x05, 7	; 5
				assemblyBuffer[assemblyBufferPos++]=ch;
    1140:	90 91 33 03 	lds	r25, 0x0333
    1144:	e9 2f       	mov	r30, r25
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	e5 5c       	subi	r30, 0xC5	; 197
    114a:	f8 4f       	sbci	r31, 0xF8	; 248
    114c:	80 83       	st	Z, r24
    114e:	9f 5f       	subi	r25, 0xFF	; 255
    1150:	90 93 33 03 	sts	0x0333, r25
		default :
		{
			exit(1);
		}
	}
}
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret
	return 0;
}

void processGPSCharacter(char ch)
{
	switch(searchState)
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	79 f0       	breq	.+30     	; 0x117c <processGPSCharacter+0x9c>
    115e:	23 30       	cpi	r18, 0x03	; 3
    1160:	31 05       	cpc	r19, r1
    1162:	a9 f6       	brne	.-86     	; 0x110e <processGPSCharacter+0x2e>
			break;
		}

		case searchingGorV :
		{
			if(ch=='G')
    1164:	87 34       	cpi	r24, 0x47	; 71
    1166:	09 f4       	brne	.+2      	; 0x116a <processGPSCharacter+0x8a>
    1168:	d6 c0       	rjmp	.+428    	; 0x1316 <processGPSCharacter+0x236>
			{
				assemblyBuffer[assemblyBufferPos++]=ch;
				searchState=searchingL1;
			}
			else if(ch=='V')
    116a:	86 35       	cpi	r24, 0x56	; 86
    116c:	09 f4       	brne	.+2      	; 0x1170 <processGPSCharacter+0x90>
    116e:	c2 c0       	rjmp	.+388    	; 0x12f4 <processGPSCharacter+0x214>
				assemblyBuffer[assemblyBufferPos++]=ch;
				searchState=assembleGPVTG;
			}
			else
			{
				searchState=searchingDollar;
    1170:	10 92 32 03 	sts	0x0332, r1
    1174:	10 92 31 03 	sts	0x0331, r1
		default :
		{
			exit(1);
		}
	}
}
    1178:	cf 91       	pop	r28
    117a:	08 95       	ret
			break;
		}

		case searchingP :
		{
			if(ch=='P')
    117c:	80 35       	cpi	r24, 0x50	; 80
    117e:	c1 f7       	brne	.-16     	; 0x1170 <processGPSCharacter+0x90>
			{
				assemblyBuffer[assemblyBufferPos++]=ch;
    1180:	90 91 33 03 	lds	r25, 0x0333
    1184:	e9 2f       	mov	r30, r25
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	e5 5c       	subi	r30, 0xC5	; 197
    118a:	f8 4f       	sbci	r31, 0xF8	; 248
    118c:	80 83       	st	Z, r24
    118e:	9f 5f       	subi	r25, 0xFF	; 255
    1190:	90 93 33 03 	sts	0x0333, r25
				searchState=searchingGorV;
    1194:	83 e0       	ldi	r24, 0x03	; 3
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 32 03 	sts	0x0332, r25
    119c:	80 93 31 03 	sts	0x0331, r24
    11a0:	c2 cf       	rjmp	.-124    	; 0x1126 <processGPSCharacter+0x46>
			break;
		}

		case searchingT :
		{
			if(ch=='T')
    11a2:	84 35       	cpi	r24, 0x54	; 84
    11a4:	29 f7       	brne	.-54     	; 0x1170 <processGPSCharacter+0x90>
			{
				assemblyBuffer[assemblyBufferPos++]=ch;
    11a6:	90 91 33 03 	lds	r25, 0x0333
    11aa:	e9 2f       	mov	r30, r25
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	e5 5c       	subi	r30, 0xC5	; 197
    11b0:	f8 4f       	sbci	r31, 0xF8	; 248
    11b2:	80 83       	st	Z, r24
    11b4:	9f 5f       	subi	r25, 0xFF	; 255
    11b6:	90 93 33 03 	sts	0x0333, r25
				searchState=searchingG2;
    11ba:	87 e0       	ldi	r24, 0x07	; 7
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	90 93 32 03 	sts	0x0332, r25
    11c2:	80 93 31 03 	sts	0x0331, r24
    11c6:	af cf       	rjmp	.-162    	; 0x1126 <processGPSCharacter+0x46>
			break;
		}

		case searchingL2 :
		{
			if(ch=='L')
    11c8:	8c 34       	cpi	r24, 0x4C	; 76
    11ca:	91 f6       	brne	.-92     	; 0x1170 <processGPSCharacter+0x90>
			{
				assemblyBuffer[assemblyBufferPos++]=ch;
    11cc:	90 91 33 03 	lds	r25, 0x0333
    11d0:	e9 2f       	mov	r30, r25
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	e5 5c       	subi	r30, 0xC5	; 197
    11d6:	f8 4f       	sbci	r31, 0xF8	; 248
    11d8:	80 83       	st	Z, r24
    11da:	9f 5f       	subi	r25, 0xFF	; 255
    11dc:	90 93 33 03 	sts	0x0333, r25
				searchState=assembleGPGLL;
    11e0:	88 e0       	ldi	r24, 0x08	; 8
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	90 93 32 03 	sts	0x0332, r25
    11e8:	80 93 31 03 	sts	0x0331, r24
    11ec:	9c cf       	rjmp	.-200    	; 0x1126 <processGPSCharacter+0x46>
			break;
		}

		case searchingG2 :
		{
			if(ch=='G')
    11ee:	87 34       	cpi	r24, 0x47	; 71
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <processGPSCharacter+0x114>
    11f2:	be cf       	rjmp	.-132    	; 0x1170 <processGPSCharacter+0x90>
			{
				assemblyBuffer[assemblyBufferPos++]=ch;
    11f4:	90 91 33 03 	lds	r25, 0x0333
    11f8:	e9 2f       	mov	r30, r25
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	e5 5c       	subi	r30, 0xC5	; 197
    11fe:	f8 4f       	sbci	r31, 0xF8	; 248
    1200:	80 83       	st	Z, r24
    1202:	9f 5f       	subi	r25, 0xFF	; 255
    1204:	90 93 33 03 	sts	0x0333, r25
				searchState=assembleGPVTG;
    1208:	89 e0       	ldi	r24, 0x09	; 9
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	90 93 32 03 	sts	0x0332, r25
    1210:	80 93 31 03 	sts	0x0331, r24
    1214:	88 cf       	rjmp	.-240    	; 0x1126 <processGPSCharacter+0x46>
			break;
		}

		case assembleGPGLL :
		{
			if(ch!=0x0d) // look for line terminator
    1216:	8d 30       	cpi	r24, 0x0D	; 13
    1218:	09 f0       	breq	.+2      	; 0x121c <processGPSCharacter+0x13c>
    121a:	91 cf       	rjmp	.-222    	; 0x113e <processGPSCharacter+0x5e>
				PORTB|=0x80;
				assemblyBuffer[assemblyBufferPos++]=ch;
			}
			else
			{
				PORTB&=0x7f;
    121c:	2f 98       	cbi	0x05, 7	; 5
				assemblyBuffer[assemblyBufferPos]=0;
    121e:	60 91 33 03 	lds	r22, 0x0333
    1222:	e6 2f       	mov	r30, r22
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	e5 5c       	subi	r30, 0xC5	; 197
    1228:	f8 4f       	sbci	r31, 0xF8	; 248
    122a:	10 82       	st	Z, r1
				searchState=searchingDollar;
    122c:	10 92 32 03 	sts	0x0332, r1
    1230:	10 92 31 03 	sts	0x0331, r1

				if(verifyChecksum(assemblyBuffer, assemblyBufferPos-3))
    1234:	c6 2f       	mov	r28, r22
    1236:	c3 50       	subi	r28, 0x03	; 3
    1238:	6c 2f       	mov	r22, r28
    123a:	8b e3       	ldi	r24, 0x3B	; 59
    123c:	97 e0       	ldi	r25, 0x07	; 7
    123e:	0e 94 44 08 	call	0x1088	; 0x1088 <verifyChecksum>
    1242:	88 23       	and	r24, r24
    1244:	09 f4       	brne	.+2      	; 0x1248 <processGPSCharacter+0x168>
    1246:	6f cf       	rjmp	.-290    	; 0x1126 <processGPSCharacter+0x46>
				{
					processGPGLL(assemblyBuffer, assemblyBufferPos-3);
    1248:	6c 2f       	mov	r22, r28
    124a:	8b e3       	ldi	r24, 0x3B	; 59
    124c:	97 e0       	ldi	r25, 0x07	; 7
		default :
		{
			exit(1);
		}
	}
}
    124e:	cf 91       	pop	r28
				assemblyBuffer[assemblyBufferPos]=0;
				searchState=searchingDollar;

				if(verifyChecksum(assemblyBuffer, assemblyBufferPos-3))
				{
					processGPGLL(assemblyBuffer, assemblyBufferPos-3);
    1250:	0c 94 63 05 	jmp	0xac6	; 0xac6 <processGPGLL>
			break;
		}

		case searchingG :
		{
			if(ch=='G')
    1254:	87 34       	cpi	r24, 0x47	; 71
    1256:	09 f0       	breq	.+2      	; 0x125a <processGPSCharacter+0x17a>
    1258:	8b cf       	rjmp	.-234    	; 0x1170 <processGPSCharacter+0x90>
			{
				assemblyBuffer[assemblyBufferPos++]=ch;
    125a:	90 91 33 03 	lds	r25, 0x0333
    125e:	e9 2f       	mov	r30, r25
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	e5 5c       	subi	r30, 0xC5	; 197
    1264:	f8 4f       	sbci	r31, 0xF8	; 248
    1266:	80 83       	st	Z, r24
    1268:	9f 5f       	subi	r25, 0xFF	; 255
    126a:	90 93 33 03 	sts	0x0333, r25
				searchState=searchingP;
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	90 93 32 03 	sts	0x0332, r25
    1276:	80 93 31 03 	sts	0x0331, r24
    127a:	55 cf       	rjmp	.-342    	; 0x1126 <processGPSCharacter+0x46>
			break;
		}

		case searchingL1 :
		{
			if(ch=='L')
    127c:	8c 34       	cpi	r24, 0x4C	; 76
    127e:	09 f0       	breq	.+2      	; 0x1282 <processGPSCharacter+0x1a2>
    1280:	77 cf       	rjmp	.-274    	; 0x1170 <processGPSCharacter+0x90>
			{
				assemblyBuffer[assemblyBufferPos++]=ch;
    1282:	90 91 33 03 	lds	r25, 0x0333
    1286:	e9 2f       	mov	r30, r25
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	e5 5c       	subi	r30, 0xC5	; 197
    128c:	f8 4f       	sbci	r31, 0xF8	; 248
    128e:	80 83       	st	Z, r24
    1290:	9f 5f       	subi	r25, 0xFF	; 255
    1292:	90 93 33 03 	sts	0x0333, r25
				searchState=searchingL2;
    1296:	85 e0       	ldi	r24, 0x05	; 5
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	90 93 32 03 	sts	0x0332, r25
    129e:	80 93 31 03 	sts	0x0331, r24
    12a2:	41 cf       	rjmp	.-382    	; 0x1126 <processGPSCharacter+0x46>
				PORTB|=0x80;
				assemblyBuffer[assemblyBufferPos++]=ch;
			}
			else
			{
				PORTB&=0x7f;
    12a4:	2f 98       	cbi	0x05, 7	; 5
				assemblyBuffer[assemblyBufferPos]=0;
    12a6:	60 91 33 03 	lds	r22, 0x0333
    12aa:	e6 2f       	mov	r30, r22
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	e5 5c       	subi	r30, 0xC5	; 197
    12b0:	f8 4f       	sbci	r31, 0xF8	; 248
    12b2:	10 82       	st	Z, r1
				searchState=searchingDollar;
    12b4:	10 92 32 03 	sts	0x0332, r1
    12b8:	10 92 31 03 	sts	0x0331, r1

				if(verifyChecksum(assemblyBuffer, assemblyBufferPos-3))
    12bc:	c6 2f       	mov	r28, r22
    12be:	c3 50       	subi	r28, 0x03	; 3
    12c0:	6c 2f       	mov	r22, r28
    12c2:	8b e3       	ldi	r24, 0x3B	; 59
    12c4:	97 e0       	ldi	r25, 0x07	; 7
    12c6:	0e 94 44 08 	call	0x1088	; 0x1088 <verifyChecksum>
    12ca:	88 23       	and	r24, r24
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <processGPSCharacter+0x1f0>
    12ce:	2b cf       	rjmp	.-426    	; 0x1126 <processGPSCharacter+0x46>
				{
					processGPVTG(assemblyBuffer, assemblyBufferPos-3);
    12d0:	6c 2f       	mov	r22, r28
    12d2:	8b e3       	ldi	r24, 0x3B	; 59
    12d4:	97 e0       	ldi	r25, 0x07	; 7
		default :
		{
			exit(1);
		}
	}
}
    12d6:	cf 91       	pop	r28
				assemblyBuffer[assemblyBufferPos]=0;
				searchState=searchingDollar;

				if(verifyChecksum(assemblyBuffer, assemblyBufferPos-3))
				{
					processGPVTG(assemblyBuffer, assemblyBufferPos-3);
    12d8:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <processGPVTG>
		case searchingDollar :
		{
			if(ch=='$')
			{
				assemblyBufferPos=0;
				assemblyBuffer[assemblyBufferPos++]=ch;
    12dc:	80 93 3b 07 	sts	0x073B, r24
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	80 93 33 03 	sts	0x0333, r24
				searchState=searchingG;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	90 93 32 03 	sts	0x0332, r25
    12ee:	80 93 31 03 	sts	0x0331, r24
    12f2:	19 cf       	rjmp	.-462    	; 0x1126 <processGPSCharacter+0x46>
				assemblyBuffer[assemblyBufferPos++]=ch;
				searchState=searchingL1;
			}
			else if(ch=='V')
			{
				assemblyBuffer[assemblyBufferPos++]=ch;
    12f4:	90 91 33 03 	lds	r25, 0x0333
    12f8:	e9 2f       	mov	r30, r25
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	e5 5c       	subi	r30, 0xC5	; 197
    12fe:	f8 4f       	sbci	r31, 0xF8	; 248
    1300:	80 83       	st	Z, r24
    1302:	9f 5f       	subi	r25, 0xFF	; 255
    1304:	90 93 33 03 	sts	0x0333, r25
				searchState=searchingT;
    1308:	86 e0       	ldi	r24, 0x06	; 6
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	90 93 32 03 	sts	0x0332, r25
    1310:	80 93 31 03 	sts	0x0331, r24
    1314:	08 cf       	rjmp	.-496    	; 0x1126 <processGPSCharacter+0x46>

		case searchingGorV :
		{
			if(ch=='G')
			{
				assemblyBuffer[assemblyBufferPos++]=ch;
    1316:	90 91 33 03 	lds	r25, 0x0333
    131a:	e9 2f       	mov	r30, r25
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	e5 5c       	subi	r30, 0xC5	; 197
    1320:	f8 4f       	sbci	r31, 0xF8	; 248
    1322:	80 83       	st	Z, r24
    1324:	9f 5f       	subi	r25, 0xFF	; 255
    1326:	90 93 33 03 	sts	0x0333, r25
				searchState=searchingL1;
    132a:	84 e0       	ldi	r24, 0x04	; 4
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	90 93 32 03 	sts	0x0332, r25
    1332:	80 93 31 03 	sts	0x0331, r24
    1336:	f7 ce       	rjmp	.-530    	; 0x1126 <processGPSCharacter+0x46>

00001338 <__vector_23>:
//define T1RELOAD -24999 // generates a 10Hz interrupt
//define T1RELOAD -12499 // generates a 20Hz interrupt
#define T1RELOAD -9999 // generates a 25Hz interrupt

SIGNAL(TIMER0_OVF_vect)
{
    1338:	1f 92       	push	r1
    133a:	0f 92       	push	r0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	0f 92       	push	r0
    1340:	11 24       	eor	r1, r1
    1342:	0b b6       	in	r0, 0x3b	; 59
    1344:	0f 92       	push	r0
    1346:	1b be       	out	0x3b, r1	; 59
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
	static uint8_t divider=0;

	TCNT0 = (uint8_t) T0RELOAD; // reload
    1360:	8e e5       	ldi	r24, 0x5E	; 94
    1362:	86 bd       	out	0x26, r24	; 38

	if(divider==3)
    1364:	80 91 34 03 	lds	r24, 0x0334
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	b1 f0       	breq	.+44     	; 0x1398 <__vector_23+0x60>
		divider=0;
		usart0_Tx('*');
	}
	else
	{
		divider++;
    136c:	8f 5f       	subi	r24, 0xFF	; 255
    136e:	80 93 34 03 	sts	0x0334, r24
	}
}
    1372:	ff 91       	pop	r31
    1374:	ef 91       	pop	r30
    1376:	bf 91       	pop	r27
    1378:	af 91       	pop	r26
    137a:	9f 91       	pop	r25
    137c:	8f 91       	pop	r24
    137e:	7f 91       	pop	r23
    1380:	6f 91       	pop	r22
    1382:	5f 91       	pop	r21
    1384:	4f 91       	pop	r20
    1386:	3f 91       	pop	r19
    1388:	2f 91       	pop	r18
    138a:	0f 90       	pop	r0
    138c:	0b be       	out	0x3b, r0	; 59
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

	TCNT0 = (uint8_t) T0RELOAD; // reload

	if(divider==3)
	{
		divider=0;
    1398:	10 92 34 03 	sts	0x0334, r1
		usart0_Tx('*');
    139c:	8a e2       	ldi	r24, 0x2A	; 42
    139e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
    13a2:	e7 cf       	rjmp	.-50     	; 0x1372 <__vector_23+0x3a>

000013a4 <__vector_20>:
		divider++;
	}
}

SIGNAL(TIMER1_OVF_vect)
{
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	11 24       	eor	r1, r1
    13ae:	0b b6       	in	r0, 0x3b	; 59
    13b0:	0f 92       	push	r0
    13b2:	1b be       	out	0x3b, r1	; 59
    13b4:	2f 93       	push	r18
    13b6:	3f 93       	push	r19
    13b8:	4f 93       	push	r20
    13ba:	5f 93       	push	r21
    13bc:	6f 93       	push	r22
    13be:	7f 93       	push	r23
    13c0:	8f 93       	push	r24
    13c2:	9f 93       	push	r25
    13c4:	af 93       	push	r26
    13c6:	bf 93       	push	r27
    13c8:	ef 93       	push	r30
    13ca:	ff 93       	push	r31
	TCNT1 = (uint16_t) T1RELOAD; // reload
    13cc:	81 ef       	ldi	r24, 0xF1	; 241
    13ce:	98 ed       	ldi	r25, 0xD8	; 216
    13d0:	90 93 85 00 	sts	0x0085, r25
    13d4:	80 93 84 00 	sts	0x0084, r24

	if(controlState==ControlDataStream)
    13d8:	80 91 2d 03 	lds	r24, 0x032D
    13dc:	90 91 2e 03 	lds	r25, 0x032E
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	91 05       	cpc	r25, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <__vector_20+0x44>
    13e6:	51 c0       	rjmp	.+162    	; 0x148a <__vector_20+0xe6>
		int16DumpBuffer(usart0_Tx,gValues,3);
		usart0_Tx('\n');
		usart0_Tx('\r');
	}

	if(controlState==ControlLogging)
    13e8:	04 97       	sbiw	r24, 0x04	; 4
    13ea:	a9 f0       	breq	.+42     	; 0x1416 <__vector_20+0x72>
				idleSeconds=0;
			}
		}
	}

	startAdcSequence();
    13ec:	0e 94 cd 03 	call	0x79a	; 0x79a <startAdcSequence>
}
    13f0:	ff 91       	pop	r31
    13f2:	ef 91       	pop	r30
    13f4:	bf 91       	pop	r27
    13f6:	af 91       	pop	r26
    13f8:	9f 91       	pop	r25
    13fa:	8f 91       	pop	r24
    13fc:	7f 91       	pop	r23
    13fe:	6f 91       	pop	r22
    1400:	5f 91       	pop	r21
    1402:	4f 91       	pop	r20
    1404:	3f 91       	pop	r19
    1406:	2f 91       	pop	r18
    1408:	0f 90       	pop	r0
    140a:	0b be       	out	0x3b, r0	; 59
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti
		usart0_Tx('\r');
	}

	if(controlState==ControlLogging)
	{
		if(!autoStop)
    1416:	80 91 2a 03 	lds	r24, 0x032A
    141a:	81 11       	cpse	r24, r1
    141c:	e7 cf       	rjmp	.-50     	; 0x13ec <__vector_20+0x48>
		{
			// send current data set to the logger
			decDumpBuffer(usart2_Tx,adcValues,8);
    141e:	48 e0       	ldi	r20, 0x08	; 8
    1420:	67 e7       	ldi	r22, 0x77	; 119
    1422:	76 e0       	ldi	r23, 0x06	; 6
    1424:	81 e9       	ldi	r24, 0x91	; 145
    1426:	9f e0       	ldi	r25, 0x0F	; 15
    1428:	0e 94 c1 0b 	call	0x1782	; 0x1782 <decDumpBuffer>
			usart2_Tx(',');
    142c:	8c e2       	ldi	r24, 0x2C	; 44
    142e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <usart2_Tx>
			dumpWorkingGPSData(usart2_Tx);
    1432:	81 e9       	ldi	r24, 0x91	; 145
    1434:	9f e0       	ldi	r25, 0x0F	; 15
    1436:	0e 94 c5 04 	call	0x98a	; 0x98a <dumpWorkingGPSData>
			usart2_Tx(',');
    143a:	8c e2       	ldi	r24, 0x2C	; 44
    143c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <usart2_Tx>
			int16DumpBuffer(usart2_Tx,gValues,3);
    1440:	43 e0       	ldi	r20, 0x03	; 3
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	6f ef       	ldi	r22, 0xFF	; 255
    1446:	76 e0       	ldi	r23, 0x06	; 6
    1448:	81 e9       	ldi	r24, 0x91	; 145
    144a:	9f e0       	ldi	r25, 0x0F	; 15
    144c:	0e 94 25 0c 	call	0x184a	; 0x184a <int16DumpBuffer>
			usart2_Tx('\n');
    1450:	8a e0       	ldi	r24, 0x0A	; 10
    1452:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <usart2_Tx>

			// detect zero speed and trigger auto stop
			if(workingGPSData.speed==0)
    1456:	80 91 0a 07 	lds	r24, 0x070A
    145a:	81 11       	cpse	r24, r1
    145c:	3a c0       	rjmp	.+116    	; 0x14d2 <__vector_20+0x12e>
			{
				idleTicks++;
    145e:	80 91 2c 03 	lds	r24, 0x032C
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	80 93 2c 03 	sts	0x032C, r24
				if(idleTicks==25)
    1468:	89 31       	cpi	r24, 0x19	; 25
    146a:	09 f0       	breq	.+2      	; 0x146e <__vector_20+0xca>
    146c:	bf cf       	rjmp	.-130    	; 0x13ec <__vector_20+0x48>
				{
					idleTicks=0;
    146e:	10 92 2c 03 	sts	0x032C, r1
					idleSeconds++;
    1472:	80 91 2b 03 	lds	r24, 0x032B
    1476:	8f 5f       	subi	r24, 0xFF	; 255
    1478:	80 93 2b 03 	sts	0x032B, r24
					if(idleSeconds==120)
    147c:	88 37       	cpi	r24, 0x78	; 120
    147e:	09 f0       	breq	.+2      	; 0x1482 <__vector_20+0xde>
    1480:	b5 cf       	rjmp	.-150    	; 0x13ec <__vector_20+0x48>
					{
						autoStop=1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	80 93 2a 03 	sts	0x032A, r24
    1488:	b1 cf       	rjmp	.-158    	; 0x13ec <__vector_20+0x48>
	TCNT1 = (uint16_t) T1RELOAD; // reload

	if(controlState==ControlDataStream)
	{
		// send current data set to the control channel
		decDumpBuffer(usart0_Tx,adcValues,8);
    148a:	48 e0       	ldi	r20, 0x08	; 8
    148c:	67 e7       	ldi	r22, 0x77	; 119
    148e:	76 e0       	ldi	r23, 0x06	; 6
    1490:	84 e8       	ldi	r24, 0x84	; 132
    1492:	9d e0       	ldi	r25, 0x0D	; 13
    1494:	0e 94 c1 0b 	call	0x1782	; 0x1782 <decDumpBuffer>
		usart0_Tx(',');
    1498:	8c e2       	ldi	r24, 0x2C	; 44
    149a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
		dumpWorkingGPSData(usart0_Tx);
    149e:	84 e8       	ldi	r24, 0x84	; 132
    14a0:	9d e0       	ldi	r25, 0x0D	; 13
    14a2:	0e 94 c5 04 	call	0x98a	; 0x98a <dumpWorkingGPSData>
		usart0_Tx(',');
    14a6:	8c e2       	ldi	r24, 0x2C	; 44
    14a8:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
		int16DumpBuffer(usart0_Tx,gValues,3);
    14ac:	43 e0       	ldi	r20, 0x03	; 3
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	6f ef       	ldi	r22, 0xFF	; 255
    14b2:	76 e0       	ldi	r23, 0x06	; 6
    14b4:	84 e8       	ldi	r24, 0x84	; 132
    14b6:	9d e0       	ldi	r25, 0x0D	; 13
    14b8:	0e 94 25 0c 	call	0x184a	; 0x184a <int16DumpBuffer>
		usart0_Tx('\n');
    14bc:	8a e0       	ldi	r24, 0x0A	; 10
    14be:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
		usart0_Tx('\r');
    14c2:	8d e0       	ldi	r24, 0x0D	; 13
    14c4:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
    14c8:	80 91 2d 03 	lds	r24, 0x032D
    14cc:	90 91 2e 03 	lds	r25, 0x032E
    14d0:	8b cf       	rjmp	.-234    	; 0x13e8 <__vector_20+0x44>
					}
				}
			}
			else
			{
				autoStop=0;
    14d2:	10 92 2a 03 	sts	0x032A, r1
				idleTicks=0;
    14d6:	10 92 2c 03 	sts	0x032C, r1
				idleSeconds=0;
    14da:	10 92 2b 03 	sts	0x032B, r1
    14de:	86 cf       	rjmp	.-244    	; 0x13ec <__vector_20+0x48>

000014e0 <timersInit>:
//	TCCR0B = _BV(CS02)|_BV(CS00);
//	TCNT0 = (uint8_t) T0RELOAD; // reload
//	TIMSK0 |= (1<<TOIE0); // enable overflow interrupt

	// set up and enable low freq timer interrupt using timer1
	TCCR1B = _BV(CS11)|_BV(CS10); // div 32 prescale
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = (uint16_t) T1RELOAD; // reload
    14e6:	81 ef       	ldi	r24, 0xF1	; 241
    14e8:	98 ed       	ldi	r25, 0xD8	; 216
    14ea:	90 93 85 00 	sts	0x0085, r25
    14ee:	80 93 84 00 	sts	0x0084, r24
	TIMSK1 |= (1<<TOIE1); // enable overflow interrupt
    14f2:	ef e6       	ldi	r30, 0x6F	; 111
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	81 60       	ori	r24, 0x01	; 1
    14fa:	80 83       	st	Z, r24
    14fc:	08 95       	ret

000014fe <transmitBuffer>:
#include "serial.h"
#include "serial1.h"
#include <stdio.h>

uint8_t transmitBuffer(uint8_t (*txFunction)(char ch),uint8_t *buffer,uint8_t bufferLen)
{
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	7c 01       	movw	r14, r24
	uint8_t pos=0;

	for(pos=0;pos<bufferLen;pos++)
    1510:	44 23       	and	r20, r20
    1512:	a9 f0       	breq	.+42     	; 0x153e <transmitBuffer+0x40>
    1514:	8b 01       	movw	r16, r22
#include "serial.h"
#include "serial1.h"
#include <stdio.h>

uint8_t transmitBuffer(uint8_t (*txFunction)(char ch),uint8_t *buffer,uint8_t bufferLen)
    1516:	eb 01       	movw	r28, r22
    1518:	21 96       	adiw	r28, 0x01	; 1
    151a:	41 50       	subi	r20, 0x01	; 1
    151c:	6e 01       	movw	r12, r28
    151e:	c4 0e       	add	r12, r20
    1520:	d1 1c       	adc	r13, r1
    1522:	04 c0       	rjmp	.+8      	; 0x152c <transmitBuffer+0x2e>
{
	uint8_t pos=0;

	for(pos=0;pos<bufferLen;pos++)
    1524:	cc 15       	cp	r28, r12
    1526:	dd 05       	cpc	r29, r13
    1528:	51 f0       	breq	.+20     	; 0x153e <transmitBuffer+0x40>
    152a:	21 96       	adiw	r28, 0x01	; 1
	{
		if(!txFunction(buffer[pos]))
    152c:	f8 01       	movw	r30, r16
    152e:	80 81       	ld	r24, Z
    1530:	8e 01       	movw	r16, r28
    1532:	f7 01       	movw	r30, r14
    1534:	19 95       	eicall
    1536:	81 11       	cpse	r24, r1
    1538:	f5 cf       	rjmp	.-22     	; 0x1524 <transmitBuffer+0x26>
		{
			return 0;
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <transmitBuffer+0x42>
		}
	}

	return 1;
    153e:	81 e0       	ldi	r24, 0x01	; 1
}
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	08 95       	ret

00001552 <transmitNullTerminatedBuffer>:

uint8_t transmitNullTerminatedBuffer(uint8_t (*txFunction)(char ch),uint8_t *buffer)
{
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	8c 01       	movw	r16, r24
    155e:	eb 01       	movw	r28, r22
	uint8_t pos=0;
    1560:	f1 2c       	mov	r15, r1

	while(buffer[pos]!=0)
    1562:	05 c0       	rjmp	.+10     	; 0x156e <transmitNullTerminatedBuffer+0x1c>
	{
		if(!txFunction(buffer[pos++]))
    1564:	f3 94       	inc	r15
    1566:	f8 01       	movw	r30, r16
    1568:	19 95       	eicall
    156a:	88 23       	and	r24, r24
    156c:	69 f0       	breq	.+26     	; 0x1588 <transmitNullTerminatedBuffer+0x36>

uint8_t transmitNullTerminatedBuffer(uint8_t (*txFunction)(char ch),uint8_t *buffer)
{
	uint8_t pos=0;

	while(buffer[pos]!=0)
    156e:	de 01       	movw	r26, r28
    1570:	af 0d       	add	r26, r15
    1572:	b1 1d       	adc	r27, r1
    1574:	8c 91       	ld	r24, X
    1576:	81 11       	cpse	r24, r1
    1578:	f5 cf       	rjmp	.-22     	; 0x1564 <transmitNullTerminatedBuffer+0x12>
		{
			return 0;
		}
	}

	return 1;
    157a:	81 e0       	ldi	r24, 0x01	; 1
}
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	ff 90       	pop	r15
    1586:	08 95       	ret

	while(buffer[pos]!=0)
	{
		if(!txFunction(buffer[pos++]))
		{
			return 0;
    1588:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return 1;
}
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	ff 90       	pop	r15
    1594:	08 95       	ret

00001596 <hexDump>:

void hexDump(uint8_t (*txFunction)(char ch),uint8_t data)
{
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	1f 92       	push	r1
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	8c 01       	movw	r16, r24
	uint8_t temp=(data&0xf0)>>4;
    15a6:	86 2f       	mov	r24, r22
    15a8:	82 95       	swap	r24
    15aa:	8f 70       	andi	r24, 0x0F	; 15

	if(temp<10)
    15ac:	8a 30       	cpi	r24, 0x0A	; 10
    15ae:	88 f4       	brcc	.+34     	; 0x15d2 <hexDump+0x3c>
	{
		txFunction(temp+'0');
    15b0:	80 5d       	subi	r24, 0xD0	; 208
    15b2:	69 83       	std	Y+1, r22	; 0x01
    15b4:	f8 01       	movw	r30, r16
    15b6:	19 95       	eicall
    15b8:	69 81       	ldd	r22, Y+1	; 0x01
	else
	{
		txFunction(temp+'A'-10);
	}

	temp=(data&0x0f);
    15ba:	86 2f       	mov	r24, r22
    15bc:	8f 70       	andi	r24, 0x0F	; 15

	if(temp<10)
    15be:	8a 30       	cpi	r24, 0x0A	; 10
    15c0:	88 f0       	brcs	.+34     	; 0x15e4 <hexDump+0x4e>
	{
		txFunction(temp+'0');
	}
	else
	{
		txFunction(temp+'A'-10);
    15c2:	89 5c       	subi	r24, 0xC9	; 201
    15c4:	f8 01       	movw	r30, r16
	}
}
    15c6:	0f 90       	pop	r0
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
	{
		txFunction(temp+'0');
	}
	else
	{
		txFunction(temp+'A'-10);
    15d0:	19 94       	eijmp
	{
		txFunction(temp+'0');
	}
	else
	{
		txFunction(temp+'A'-10);
    15d2:	89 5c       	subi	r24, 0xC9	; 201
    15d4:	69 83       	std	Y+1, r22	; 0x01
    15d6:	f8 01       	movw	r30, r16
    15d8:	19 95       	eicall
    15da:	69 81       	ldd	r22, Y+1	; 0x01
	}

	temp=(data&0x0f);
    15dc:	86 2f       	mov	r24, r22
    15de:	8f 70       	andi	r24, 0x0F	; 15

	if(temp<10)
    15e0:	8a 30       	cpi	r24, 0x0A	; 10
    15e2:	78 f7       	brcc	.-34     	; 0x15c2 <hexDump+0x2c>
	{
		txFunction(temp+'0');
    15e4:	80 5d       	subi	r24, 0xD0	; 208
	}
	else
	{
		txFunction(temp+'A'-10);
    15e6:	f8 01       	movw	r30, r16
	}
}
    15e8:	0f 90       	pop	r0
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
	{
		txFunction(temp+'0');
	}
	else
	{
		txFunction(temp+'A'-10);
    15f2:	19 94       	eijmp

000015f4 <decDump>:
	}
}

void decDump(uint8_t (*txFunction)(char ch),uint8_t data)
{
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <decDump+0xa>
    15fe:	1f 92       	push	r1
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	8c 01       	movw	r16, r24
	char buffer[4];
	
	sprintf(buffer,"%03u",data);
    1606:	1f 92       	push	r1
    1608:	6f 93       	push	r22
    160a:	88 e1       	ldi	r24, 0x18	; 24
    160c:	93 e0       	ldi	r25, 0x03	; 3
    160e:	9f 93       	push	r25
    1610:	8f 93       	push	r24
    1612:	ce 01       	movw	r24, r28
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	9f 93       	push	r25
    1618:	8f 93       	push	r24
    161a:	0e 94 38 17 	call	0x2e70	; 0x2e70 <sprintf>
	txFunction(buffer[0]);
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	f8 01       	movw	r30, r16
    1622:	19 95       	eicall
	txFunction(buffer[1]);
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	f8 01       	movw	r30, r16
    1628:	19 95       	eicall
	txFunction(buffer[2]);
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	f8 01       	movw	r30, r16
    162e:	19 95       	eicall
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	08 95       	ret

0000164e <int8Dump>:

void int8Dump(uint8_t (*txFunction)(char ch),int8_t data)
{
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	00 d0       	rcall	.+0      	; 0x1658 <int8Dump+0xa>
    1658:	1f 92       	push	r1
    165a:	1f 92       	push	r1
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	8c 01       	movw	r16, r24
	char buffer[5];
	
	sprintf(buffer,"%+04d",data);
    1662:	86 2f       	mov	r24, r22
    1664:	99 27       	eor	r25, r25
    1666:	87 fd       	sbrc	r24, 7
    1668:	90 95       	com	r25
    166a:	9f 93       	push	r25
    166c:	6f 93       	push	r22
    166e:	8d e1       	ldi	r24, 0x1D	; 29
    1670:	93 e0       	ldi	r25, 0x03	; 3
    1672:	9f 93       	push	r25
    1674:	8f 93       	push	r24
    1676:	ce 01       	movw	r24, r28
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	9f 93       	push	r25
    167c:	8f 93       	push	r24
    167e:	0e 94 38 17 	call	0x2e70	; 0x2e70 <sprintf>
	txFunction(buffer[0]);
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	f8 01       	movw	r30, r16
    1686:	19 95       	eicall
	txFunction(buffer[1]);
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	f8 01       	movw	r30, r16
    168c:	19 95       	eicall
	txFunction(buffer[2]);
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	f8 01       	movw	r30, r16
    1692:	19 95       	eicall
	txFunction(buffer[3]);
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	f8 01       	movw	r30, r16
    1698:	19 95       	eicall
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	08 95       	ret

000016ba <int16Dump>:

void int16Dump(uint8_t (*txFunction)(char ch),int16_t data)
{
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <int16Dump+0xa>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <int16Dump+0xc>
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	8c 01       	movw	r16, r24
	char buffer[6];
	
	sprintf(buffer,"%+04d",data);
    16cc:	7f 93       	push	r23
    16ce:	6f 93       	push	r22
    16d0:	8d e1       	ldi	r24, 0x1D	; 29
    16d2:	93 e0       	ldi	r25, 0x03	; 3
    16d4:	9f 93       	push	r25
    16d6:	8f 93       	push	r24
    16d8:	ce 01       	movw	r24, r28
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	9f 93       	push	r25
    16de:	8f 93       	push	r24
    16e0:	0e 94 38 17 	call	0x2e70	; 0x2e70 <sprintf>
	txFunction(buffer[0]);
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	f8 01       	movw	r30, r16
    16e8:	19 95       	eicall
	txFunction(buffer[1]);
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	f8 01       	movw	r30, r16
    16ee:	19 95       	eicall
	txFunction(buffer[2]);
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	f8 01       	movw	r30, r16
    16f4:	19 95       	eicall
	txFunction(buffer[3]);
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	f8 01       	movw	r30, r16
    16fa:	19 95       	eicall
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
}
    1708:	26 96       	adiw	r28, 0x06	; 6
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <hexDumpBuffer>:

void hexDumpBuffer(uint8_t (*txFunction)(char ch),uint8_t *buffer,uint8_t bufferLength)
{
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	7c 01       	movw	r14, r24
    1732:	b4 2e       	mov	r11, r20
	uint8_t pos=0;

	for(pos=0;pos<bufferLength;pos++)
    1734:	44 23       	and	r20, r20
    1736:	d9 f0       	breq	.+54     	; 0x176e <hexDumpBuffer+0x50>
    1738:	c4 2e       	mov	r12, r20
    173a:	d1 2c       	mov	r13, r1
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	c8 1a       	sub	r12, r24
    1740:	d1 08       	sbc	r13, r1
    1742:	8b 01       	movw	r16, r22
    1744:	c0 e0       	ldi	r28, 0x00	; 0
    1746:	d0 e0       	ldi	r29, 0x00	; 0
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <hexDumpBuffer+0x32>
    174a:	21 96       	adiw	r28, 0x01	; 1
    174c:	cb 15       	cp	r28, r11
    174e:	78 f4       	brcc	.+30     	; 0x176e <hexDumpBuffer+0x50>
	{
		hexDump(txFunction,buffer[pos]);
    1750:	f8 01       	movw	r30, r16
    1752:	61 91       	ld	r22, Z+
    1754:	8f 01       	movw	r16, r30
    1756:	c7 01       	movw	r24, r14
    1758:	0e 94 cb 0a 	call	0x1596	; 0x1596 <hexDump>
		if(pos<(bufferLength-1))
    175c:	cc 15       	cp	r28, r12
    175e:	dd 05       	cpc	r29, r13
    1760:	a4 f7       	brge	.-24     	; 0x174a <hexDumpBuffer+0x2c>
		{
			txFunction(',');
    1762:	8c e2       	ldi	r24, 0x2C	; 44
    1764:	f7 01       	movw	r30, r14
    1766:	19 95       	eicall
    1768:	21 96       	adiw	r28, 0x01	; 1

void hexDumpBuffer(uint8_t (*txFunction)(char ch),uint8_t *buffer,uint8_t bufferLength)
{
	uint8_t pos=0;

	for(pos=0;pos<bufferLength;pos++)
    176a:	cb 15       	cp	r28, r11
    176c:	88 f3       	brcs	.-30     	; 0x1750 <hexDumpBuffer+0x32>
		if(pos<(bufferLength-1))
		{
			txFunction(',');
		}
	}
}
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	ff 90       	pop	r15
    1778:	ef 90       	pop	r14
    177a:	df 90       	pop	r13
    177c:	cf 90       	pop	r12
    177e:	bf 90       	pop	r11
    1780:	08 95       	ret

00001782 <decDumpBuffer>:

void decDumpBuffer(uint8_t (*txFunction)(char ch),uint8_t *buffer,uint8_t bufferLength)
{
    1782:	bf 92       	push	r11
    1784:	cf 92       	push	r12
    1786:	df 92       	push	r13
    1788:	ef 92       	push	r14
    178a:	ff 92       	push	r15
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	7c 01       	movw	r14, r24
    1796:	b4 2e       	mov	r11, r20
	uint8_t pos=0;

	for(pos=0;pos<bufferLength;pos++)
    1798:	44 23       	and	r20, r20
    179a:	d9 f0       	breq	.+54     	; 0x17d2 <decDumpBuffer+0x50>
    179c:	c4 2e       	mov	r12, r20
    179e:	d1 2c       	mov	r13, r1
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	c8 1a       	sub	r12, r24
    17a4:	d1 08       	sbc	r13, r1
    17a6:	8b 01       	movw	r16, r22
    17a8:	c0 e0       	ldi	r28, 0x00	; 0
    17aa:	d0 e0       	ldi	r29, 0x00	; 0
    17ac:	03 c0       	rjmp	.+6      	; 0x17b4 <decDumpBuffer+0x32>
    17ae:	21 96       	adiw	r28, 0x01	; 1
    17b0:	cb 15       	cp	r28, r11
    17b2:	78 f4       	brcc	.+30     	; 0x17d2 <decDumpBuffer+0x50>
	{
		decDump(txFunction,buffer[pos]);
    17b4:	f8 01       	movw	r30, r16
    17b6:	61 91       	ld	r22, Z+
    17b8:	8f 01       	movw	r16, r30
    17ba:	c7 01       	movw	r24, r14
    17bc:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <decDump>
		if(pos<(bufferLength-1))
    17c0:	cc 15       	cp	r28, r12
    17c2:	dd 05       	cpc	r29, r13
    17c4:	a4 f7       	brge	.-24     	; 0x17ae <decDumpBuffer+0x2c>
		{
			txFunction(',');
    17c6:	8c e2       	ldi	r24, 0x2C	; 44
    17c8:	f7 01       	movw	r30, r14
    17ca:	19 95       	eicall
    17cc:	21 96       	adiw	r28, 0x01	; 1

void decDumpBuffer(uint8_t (*txFunction)(char ch),uint8_t *buffer,uint8_t bufferLength)
{
	uint8_t pos=0;

	for(pos=0;pos<bufferLength;pos++)
    17ce:	cb 15       	cp	r28, r11
    17d0:	88 f3       	brcs	.-30     	; 0x17b4 <decDumpBuffer+0x32>
		if(pos<(bufferLength-1))
		{
			txFunction(',');
		}
	}
}
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	ff 90       	pop	r15
    17dc:	ef 90       	pop	r14
    17de:	df 90       	pop	r13
    17e0:	cf 90       	pop	r12
    17e2:	bf 90       	pop	r11
    17e4:	08 95       	ret

000017e6 <int8DumpBuffer>:

void int8DumpBuffer(uint8_t (*txFunction)(char ch),int8_t *buffer,uint8_t bufferLength)
{
    17e6:	bf 92       	push	r11
    17e8:	cf 92       	push	r12
    17ea:	df 92       	push	r13
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	7c 01       	movw	r14, r24
    17fa:	b4 2e       	mov	r11, r20
	uint8_t pos=0;

	for(pos=0;pos<bufferLength;pos++)
    17fc:	44 23       	and	r20, r20
    17fe:	d9 f0       	breq	.+54     	; 0x1836 <int8DumpBuffer+0x50>
    1800:	c4 2e       	mov	r12, r20
    1802:	d1 2c       	mov	r13, r1
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	c8 1a       	sub	r12, r24
    1808:	d1 08       	sbc	r13, r1
    180a:	8b 01       	movw	r16, r22
    180c:	c0 e0       	ldi	r28, 0x00	; 0
    180e:	d0 e0       	ldi	r29, 0x00	; 0
    1810:	03 c0       	rjmp	.+6      	; 0x1818 <int8DumpBuffer+0x32>
    1812:	21 96       	adiw	r28, 0x01	; 1
    1814:	cb 15       	cp	r28, r11
    1816:	78 f4       	brcc	.+30     	; 0x1836 <int8DumpBuffer+0x50>
	{
		int8Dump(txFunction,buffer[pos]);
    1818:	f8 01       	movw	r30, r16
    181a:	61 91       	ld	r22, Z+
    181c:	8f 01       	movw	r16, r30
    181e:	c7 01       	movw	r24, r14
    1820:	0e 94 27 0b 	call	0x164e	; 0x164e <int8Dump>
		if(pos<(bufferLength-1))
    1824:	cc 15       	cp	r28, r12
    1826:	dd 05       	cpc	r29, r13
    1828:	a4 f7       	brge	.-24     	; 0x1812 <int8DumpBuffer+0x2c>
		{
			txFunction(',');
    182a:	8c e2       	ldi	r24, 0x2C	; 44
    182c:	f7 01       	movw	r30, r14
    182e:	19 95       	eicall
    1830:	21 96       	adiw	r28, 0x01	; 1

void int8DumpBuffer(uint8_t (*txFunction)(char ch),int8_t *buffer,uint8_t bufferLength)
{
	uint8_t pos=0;

	for(pos=0;pos<bufferLength;pos++)
    1832:	cb 15       	cp	r28, r11
    1834:	88 f3       	brcs	.-30     	; 0x1818 <int8DumpBuffer+0x32>
		if(pos<(bufferLength-1))
		{
			txFunction(',');
		}
	}
}
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	df 90       	pop	r13
    1844:	cf 90       	pop	r12
    1846:	bf 90       	pop	r11
    1848:	08 95       	ret

0000184a <int16DumpBuffer>:

void int16DumpBuffer(uint8_t (*txFunction)(char ch),int16_t *buffer,uint8_t bufferLength)
{
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	7c 01       	movw	r14, r24
    185e:	b4 2e       	mov	r11, r20
	uint8_t pos=0;

	for(pos=0;pos<bufferLength;pos++)
    1860:	44 23       	and	r20, r20
    1862:	e1 f0       	breq	.+56     	; 0x189c <int16DumpBuffer+0x52>
    1864:	c4 2e       	mov	r12, r20
    1866:	d1 2c       	mov	r13, r1
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	c8 1a       	sub	r12, r24
    186c:	d1 08       	sbc	r13, r1
    186e:	8b 01       	movw	r16, r22
    1870:	c0 e0       	ldi	r28, 0x00	; 0
    1872:	d0 e0       	ldi	r29, 0x00	; 0
    1874:	03 c0       	rjmp	.+6      	; 0x187c <int16DumpBuffer+0x32>
    1876:	21 96       	adiw	r28, 0x01	; 1
    1878:	cb 15       	cp	r28, r11
    187a:	80 f4       	brcc	.+32     	; 0x189c <int16DumpBuffer+0x52>
	{
		int16Dump(txFunction,buffer[pos]);
    187c:	f8 01       	movw	r30, r16
    187e:	61 91       	ld	r22, Z+
    1880:	71 91       	ld	r23, Z+
    1882:	8f 01       	movw	r16, r30
    1884:	c7 01       	movw	r24, r14
    1886:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <int16Dump>
		if(pos<(bufferLength-1))
    188a:	cc 15       	cp	r28, r12
    188c:	dd 05       	cpc	r29, r13
    188e:	9c f7       	brge	.-26     	; 0x1876 <int16DumpBuffer+0x2c>
		{
			txFunction(',');
    1890:	8c e2       	ldi	r24, 0x2C	; 44
    1892:	f7 01       	movw	r30, r14
    1894:	19 95       	eicall
    1896:	21 96       	adiw	r28, 0x01	; 1

void int16DumpBuffer(uint8_t (*txFunction)(char ch),int16_t *buffer,uint8_t bufferLength)
{
	uint8_t pos=0;

	for(pos=0;pos<bufferLength;pos++)
    1898:	cb 15       	cp	r28, r11
    189a:	80 f3       	brcs	.-32     	; 0x187c <int16DumpBuffer+0x32>
		if(pos<(bufferLength-1))
		{
			txFunction(',');
		}
	}
}
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	bf 90       	pop	r11
    18ae:	08 95       	ret

000018b0 <doubleDumpBuffer>:

void doubleDumpBuffer(uint8_t (*txFunction)(char ch),double *buffer,uint8_t bufferLength)
{
    18b0:	3f 92       	push	r3
    18b2:	4f 92       	push	r4
    18b4:	5f 92       	push	r5
    18b6:	6f 92       	push	r6
    18b8:	7f 92       	push	r7
    18ba:	8f 92       	push	r8
    18bc:	9f 92       	push	r9
    18be:	af 92       	push	r10
    18c0:	bf 92       	push	r11
    18c2:	cf 92       	push	r12
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <doubleDumpBuffer+0x24>
    18d4:	1f 92       	push	r1
    18d6:	1f 92       	push	r1
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	6c 01       	movw	r12, r24
    18de:	34 2e       	mov	r3, r20
	uint8_t pos=0;
	char sprintfBuffer[5];

	for(pos=0;pos<bufferLength;pos++)
    18e0:	44 23       	and	r20, r20
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <doubleDumpBuffer+0x36>
    18e4:	4e c0       	rjmp	.+156    	; 0x1982 <doubleDumpBuffer+0xd2>
    18e6:	44 2e       	mov	r4, r20
    18e8:	51 2c       	mov	r5, r1
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	48 1a       	sub	r4, r24
    18ee:	51 08       	sbc	r5, r1
    18f0:	8b 01       	movw	r16, r22
    18f2:	e1 2c       	mov	r14, r1
    18f4:	f1 2c       	mov	r15, r1
    18f6:	88 24       	eor	r8, r8
    18f8:	83 94       	inc	r8
    18fa:	91 2c       	mov	r9, r1
    18fc:	8c 0e       	add	r8, r28
    18fe:	9d 1e       	adc	r9, r29
	{
		sprintf(sprintfBuffer,"%1.1f",buffer[pos]);
    1900:	93 e2       	ldi	r25, 0x23	; 35
    1902:	a9 2e       	mov	r10, r25
    1904:	93 e0       	ldi	r25, 0x03	; 3
    1906:	b9 2e       	mov	r11, r25
    1908:	05 c0       	rjmp	.+10     	; 0x1914 <doubleDumpBuffer+0x64>
    190a:	ff ef       	ldi	r31, 0xFF	; 255
    190c:	ef 1a       	sub	r14, r31
    190e:	ff 0a       	sbc	r15, r31
void doubleDumpBuffer(uint8_t (*txFunction)(char ch),double *buffer,uint8_t bufferLength)
{
	uint8_t pos=0;
	char sprintfBuffer[5];

	for(pos=0;pos<bufferLength;pos++)
    1910:	e3 14       	cp	r14, r3
    1912:	b8 f5       	brcc	.+110    	; 0x1982 <doubleDumpBuffer+0xd2>
			txFunction(',');
		}
	}
}

void doubleDumpBuffer(uint8_t (*txFunction)(char ch),double *buffer,uint8_t bufferLength)
    1914:	38 01       	movw	r6, r16
	uint8_t pos=0;
	char sprintfBuffer[5];

	for(pos=0;pos<bufferLength;pos++)
	{
		sprintf(sprintfBuffer,"%1.1f",buffer[pos]);
    1916:	f8 01       	movw	r30, r16
    1918:	83 81       	ldd	r24, Z+3	; 0x03
    191a:	8f 93       	push	r24
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	8f 93       	push	r24
    1920:	81 81       	ldd	r24, Z+1	; 0x01
    1922:	8f 93       	push	r24
    1924:	80 81       	ld	r24, Z
    1926:	8f 93       	push	r24
    1928:	bf 92       	push	r11
    192a:	af 92       	push	r10
    192c:	9f 92       	push	r9
    192e:	8f 92       	push	r8
    1930:	0e 94 38 17 	call	0x2e70	; 0x2e70 <sprintf>
		txFunction(sprintfBuffer[0]);
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	f6 01       	movw	r30, r12
    1938:	19 95       	eicall
		txFunction(sprintfBuffer[1]);
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	f6 01       	movw	r30, r12
    193e:	19 95       	eicall
		txFunction(sprintfBuffer[2]);
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	f6 01       	movw	r30, r12
    1944:	19 95       	eicall
    1946:	0c 5f       	subi	r16, 0xFC	; 252
    1948:	1f 4f       	sbci	r17, 0xFF	; 255
		if(buffer[pos]<0)
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	a9 01       	movw	r20, r18
    195a:	f3 01       	movw	r30, r6
    195c:	60 81       	ld	r22, Z
    195e:	71 81       	ldd	r23, Z+1	; 0x01
    1960:	82 81       	ldd	r24, Z+2	; 0x02
    1962:	93 81       	ldd	r25, Z+3	; 0x03
    1964:	0e 94 c5 10 	call	0x218a	; 0x218a <__ltsf2>
    1968:	87 fd       	sbrc	r24, 7
    196a:	22 c0       	rjmp	.+68     	; 0x19b0 <doubleDumpBuffer+0x100>
		{
			txFunction(sprintfBuffer[3]);
		}

		if(pos<(bufferLength-1))
    196c:	e4 14       	cp	r14, r4
    196e:	f5 04       	cpc	r15, r5
    1970:	64 f6       	brge	.-104    	; 0x190a <doubleDumpBuffer+0x5a>
		{
			txFunction(',');
    1972:	8c e2       	ldi	r24, 0x2C	; 44
    1974:	f6 01       	movw	r30, r12
    1976:	19 95       	eicall
    1978:	ff ef       	ldi	r31, 0xFF	; 255
    197a:	ef 1a       	sub	r14, r31
    197c:	ff 0a       	sbc	r15, r31
void doubleDumpBuffer(uint8_t (*txFunction)(char ch),double *buffer,uint8_t bufferLength)
{
	uint8_t pos=0;
	char sprintfBuffer[5];

	for(pos=0;pos<bufferLength;pos++)
    197e:	e3 14       	cp	r14, r3
    1980:	48 f2       	brcs	.-110    	; 0x1914 <doubleDumpBuffer+0x64>
		if(pos<(bufferLength-1))
		{
			txFunction(',');
		}
	}
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	ef 90       	pop	r14
    1998:	df 90       	pop	r13
    199a:	cf 90       	pop	r12
    199c:	bf 90       	pop	r11
    199e:	af 90       	pop	r10
    19a0:	9f 90       	pop	r9
    19a2:	8f 90       	pop	r8
    19a4:	7f 90       	pop	r7
    19a6:	6f 90       	pop	r6
    19a8:	5f 90       	pop	r5
    19aa:	4f 90       	pop	r4
    19ac:	3f 90       	pop	r3
    19ae:	08 95       	ret
		txFunction(sprintfBuffer[0]);
		txFunction(sprintfBuffer[1]);
		txFunction(sprintfBuffer[2]);
		if(buffer[pos]<0)
		{
			txFunction(sprintfBuffer[3]);
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	f6 01       	movw	r30, r12
    19b4:	19 95       	eicall
    19b6:	da cf       	rjmp	.-76     	; 0x196c <doubleDumpBuffer+0xbc>

000019b8 <__vector_27>:
static volatile uint8_t transmitting0=0;
static volatile uint8_t rxOverrun0=0;
volatile uint8_t hwm0=0;

SIGNAL(USART0_TX_vect)
{
    19b8:	1f 92       	push	r1
    19ba:	0f 92       	push	r0
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	0f 92       	push	r0
    19c0:	11 24       	eor	r1, r1
    19c2:	0b b6       	in	r0, 0x3b	; 59
    19c4:	0f 92       	push	r0
    19c6:	1b be       	out	0x3b, r1	; 59
    19c8:	8f 93       	push	r24
    19ca:	9f 93       	push	r25
    19cc:	ef 93       	push	r30
    19ce:	ff 93       	push	r31
	if(txCount0!=0)
    19d0:	80 91 38 03 	lds	r24, 0x0338
    19d4:	81 11       	cpse	r24, r1
    19d6:	0d c0       	rjmp	.+26     	; 0x19f2 <__vector_27+0x3a>
		txRead0%=TX_BUF_SIZE;
		txCount0--;
	}
	else
	{
		transmitting0=0;
    19d8:	10 92 37 03 	sts	0x0337, r1
	}
}
    19dc:	ff 91       	pop	r31
    19de:	ef 91       	pop	r30
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	0f 90       	pop	r0
    19e6:	0b be       	out	0x3b, r0	; 59
    19e8:	0f 90       	pop	r0
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	0f 90       	pop	r0
    19ee:	1f 90       	pop	r1
    19f0:	18 95       	reti

SIGNAL(USART0_TX_vect)
{
	if(txCount0!=0)
	{
		UDR0=txBuf0[txRead0++];
    19f2:	80 91 39 03 	lds	r24, 0x0339
    19f6:	e8 2f       	mov	r30, r24
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	e5 5c       	subi	r30, 0xC5	; 197
    19fc:	fc 4f       	sbci	r31, 0xFC	; 252
    19fe:	90 81       	ld	r25, Z
    1a00:	90 93 c6 00 	sts	0x00C6, r25
    1a04:	8f 5f       	subi	r24, 0xFF	; 255
    1a06:	80 93 39 03 	sts	0x0339, r24
		txRead0%=TX_BUF_SIZE;
    1a0a:	80 91 39 03 	lds	r24, 0x0339
    1a0e:	80 93 39 03 	sts	0x0339, r24
		txCount0--;
    1a12:	80 91 38 03 	lds	r24, 0x0338
    1a16:	81 50       	subi	r24, 0x01	; 1
    1a18:	80 93 38 03 	sts	0x0338, r24
    1a1c:	df cf       	rjmp	.-66     	; 0x19dc <__vector_27+0x24>

00001a1e <__vector_25>:
		transmitting0=0;
	}
}

SIGNAL(USART0_RX_vect)
{
    1a1e:	1f 92       	push	r1
    1a20:	0f 92       	push	r0
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	0f 92       	push	r0
    1a26:	11 24       	eor	r1, r1
    1a28:	0b b6       	in	r0, 0x3b	; 59
    1a2a:	0f 92       	push	r0
    1a2c:	1b be       	out	0x3b, r1	; 59
    1a2e:	8f 93       	push	r24
    1a30:	9f 93       	push	r25
    1a32:	ef 93       	push	r30
    1a34:	ff 93       	push	r31
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	1f 92       	push	r1
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
	if(rxCount0<RX_BUF_SIZE)
    1a40:	80 91 3b 04 	lds	r24, 0x043B
    1a44:	80 34       	cpi	r24, 0x40	; 64
    1a46:	a0 f0       	brcs	.+40     	; 0x1a70 <__vector_25+0x52>
		rxWrite0%=RX_BUF_SIZE;
		rxCount0++;
	}
	else
	{
		volatile uint8_t temp=UDR0; // force a read to clear the interrupt
    1a48:	80 91 c6 00 	lds	r24, 0x00C6
    1a4c:	89 83       	std	Y+1, r24	; 0x01
		rxOverrun0=1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	80 93 36 03 	sts	0x0336, r24
	}
}
    1a54:	0f 90       	pop	r0
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	ff 91       	pop	r31
    1a5c:	ef 91       	pop	r30
    1a5e:	9f 91       	pop	r25
    1a60:	8f 91       	pop	r24
    1a62:	0f 90       	pop	r0
    1a64:	0b be       	out	0x3b, r0	; 59
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	0f 90       	pop	r0
    1a6c:	1f 90       	pop	r1
    1a6e:	18 95       	reti

SIGNAL(USART0_RX_vect)
{
	if(rxCount0<RX_BUF_SIZE)
	{
		rxBuf0[rxWrite0++]=UDR0;
    1a70:	80 91 3d 04 	lds	r24, 0x043D
    1a74:	e8 2f       	mov	r30, r24
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	90 91 c6 00 	lds	r25, 0x00C6
    1a7c:	e2 5c       	subi	r30, 0xC2	; 194
    1a7e:	fb 4f       	sbci	r31, 0xFB	; 251
    1a80:	90 83       	st	Z, r25
    1a82:	8f 5f       	subi	r24, 0xFF	; 255
    1a84:	80 93 3d 04 	sts	0x043D, r24
		rxWrite0%=RX_BUF_SIZE;
    1a88:	80 91 3d 04 	lds	r24, 0x043D
    1a8c:	8f 73       	andi	r24, 0x3F	; 63
    1a8e:	80 93 3d 04 	sts	0x043D, r24
		rxCount0++;
    1a92:	80 91 3b 04 	lds	r24, 0x043B
    1a96:	8f 5f       	subi	r24, 0xFF	; 255
    1a98:	80 93 3b 04 	sts	0x043B, r24
    1a9c:	db cf       	rjmp	.-74     	; 0x1a54 <__vector_25+0x36>

00001a9e <usart0_Init>:
	}
}

void usart0_Init(uint16_t baudRate)
{
	UBRR0L = (uint8_t)(F_CPU/(baudRate*16L)-1);
    1a9e:	9c 01       	movw	r18, r24
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	50 e0       	ldi	r21, 0x00	; 0
    1aa4:	22 0f       	add	r18, r18
    1aa6:	33 1f       	adc	r19, r19
    1aa8:	44 1f       	adc	r20, r20
    1aaa:	55 1f       	adc	r21, r21
    1aac:	22 0f       	add	r18, r18
    1aae:	33 1f       	adc	r19, r19
    1ab0:	44 1f       	adc	r20, r20
    1ab2:	55 1f       	adc	r21, r21
    1ab4:	22 0f       	add	r18, r18
    1ab6:	33 1f       	adc	r19, r19
    1ab8:	44 1f       	adc	r20, r20
    1aba:	55 1f       	adc	r21, r21
    1abc:	22 0f       	add	r18, r18
    1abe:	33 1f       	adc	r19, r19
    1ac0:	44 1f       	adc	r20, r20
    1ac2:	55 1f       	adc	r21, r21
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	74 e2       	ldi	r23, 0x24	; 36
    1ac8:	84 ef       	ldi	r24, 0xF4	; 244
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__divmodsi4>
    1ad0:	82 2f       	mov	r24, r18
    1ad2:	81 50       	subi	r24, 0x01	; 1
    1ad4:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (F_CPU/(baudRate*16L)-1) >> 8;
    1ad8:	da 01       	movw	r26, r20
    1ada:	c9 01       	movw	r24, r18
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	a1 09       	sbc	r26, r1
    1ae0:	b1 09       	sbc	r27, r1
    1ae2:	89 2f       	mov	r24, r25
    1ae4:	9a 2f       	mov	r25, r26
    1ae6:	ab 2f       	mov	r26, r27
    1ae8:	bb 27       	eor	r27, r27
    1aea:	a7 fd       	sbrc	r26, 7
    1aec:	ba 95       	dec	r27
    1aee:	80 93 c5 00 	sts	0x00C5, r24
	UCSR0A = 0x00;
    1af2:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
    1af6:	86 e0       	ldi	r24, 0x06	; 6
    1af8:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = _BV(TXEN0)|_BV(RXEN0)|_BV(RXCIE0)|_BV(TXCIE0);
    1afc:	88 ed       	ldi	r24, 0xD8	; 216
    1afe:	80 93 c1 00 	sts	0x00C1, r24
	hwm0=0;
    1b02:	10 92 35 03 	sts	0x0335, r1
    1b06:	08 95       	ret

00001b08 <usart0_Tx>:
}

uint8_t usart0_Tx(char ch)
{
	cli();
    1b08:	f8 94       	cli

	if(!transmitting0)
    1b0a:	90 91 37 03 	lds	r25, 0x0337
    1b0e:	99 23       	and	r25, r25
    1b10:	19 f1       	breq	.+70     	; 0x1b58 <usart0_Tx+0x50>
		sei();
		return 1;
	}
	else
	{
		if(txCount0==TX_BUF_SIZE)
    1b12:	90 91 38 03 	lds	r25, 0x0338
			sei();
			return 0;
		}
		else
		{
			txBuf0[txWrite0++]=ch;
    1b16:	90 91 3a 03 	lds	r25, 0x033A
    1b1a:	e9 2f       	mov	r30, r25
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	e5 5c       	subi	r30, 0xC5	; 197
    1b20:	fc 4f       	sbci	r31, 0xFC	; 252
    1b22:	80 83       	st	Z, r24
    1b24:	9f 5f       	subi	r25, 0xFF	; 255
    1b26:	90 93 3a 03 	sts	0x033A, r25
			txWrite0%=TX_BUF_SIZE;
    1b2a:	80 91 3a 03 	lds	r24, 0x033A
    1b2e:	80 93 3a 03 	sts	0x033A, r24
			txCount0++;
    1b32:	80 91 38 03 	lds	r24, 0x0338
    1b36:	8f 5f       	subi	r24, 0xFF	; 255
    1b38:	80 93 38 03 	sts	0x0338, r24
			if(txCount0>hwm0)
    1b3c:	90 91 38 03 	lds	r25, 0x0338
    1b40:	80 91 35 03 	lds	r24, 0x0335
    1b44:	89 17       	cp	r24, r25
    1b46:	18 f0       	brcs	.+6      	; 0x1b4e <usart0_Tx+0x46>
			{
				hwm0=txCount0;
			}
			sei();
    1b48:	78 94       	sei
			return 1;
		}
	}
}
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	08 95       	ret
			txBuf0[txWrite0++]=ch;
			txWrite0%=TX_BUF_SIZE;
			txCount0++;
			if(txCount0>hwm0)
			{
				hwm0=txCount0;
    1b4e:	80 91 38 03 	lds	r24, 0x0338
    1b52:	80 93 35 03 	sts	0x0335, r24
    1b56:	f8 cf       	rjmp	.-16     	; 0x1b48 <usart0_Tx+0x40>
{
	cli();

	if(!transmitting0)
	{
		UDR0=ch;
    1b58:	80 93 c6 00 	sts	0x00C6, r24
		transmitting0=1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	80 93 37 03 	sts	0x0337, r24
		sei();
    1b62:	78 94       	sei
			}
			sei();
			return 1;
		}
	}
}
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	08 95       	ret

00001b68 <usart0_Rx>:

uint8_t usart0_Rx(char *ch)
{
	uint8_t retVal=0;

	cli();
    1b68:	f8 94       	cli

	if(rxCount0==0)
    1b6a:	20 91 3b 04 	lds	r18, 0x043B
    1b6e:	22 23       	and	r18, r18
    1b70:	d1 f0       	breq	.+52     	; 0x1ba6 <usart0_Rx+0x3e>
		return 0;
	}
	else
	{
		
		*ch=rxBuf0[rxRead0++];
    1b72:	20 91 3c 04 	lds	r18, 0x043C
    1b76:	e2 2f       	mov	r30, r18
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	e2 5c       	subi	r30, 0xC2	; 194
    1b7c:	fb 4f       	sbci	r31, 0xFB	; 251
    1b7e:	30 81       	ld	r19, Z
    1b80:	fc 01       	movw	r30, r24
    1b82:	30 83       	st	Z, r19
    1b84:	2f 5f       	subi	r18, 0xFF	; 255
    1b86:	20 93 3c 04 	sts	0x043C, r18
		rxRead0%=RX_BUF_SIZE;
    1b8a:	80 91 3c 04 	lds	r24, 0x043C
    1b8e:	8f 73       	andi	r24, 0x3F	; 63
    1b90:	80 93 3c 04 	sts	0x043C, r24
		retVal=rxCount0;
    1b94:	80 91 3b 04 	lds	r24, 0x043B
		rxCount0--;
    1b98:	90 91 3b 04 	lds	r25, 0x043B
    1b9c:	91 50       	subi	r25, 0x01	; 1
    1b9e:	90 93 3b 04 	sts	0x043B, r25
		sei();
    1ba2:	78 94       	sei
		return retVal;
	}
}
    1ba4:	08 95       	ret

	cli();

	if(rxCount0==0)
	{
		sei();
    1ba6:	78 94       	sei
		return 0;
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	08 95       	ret

00001bac <usart0_Rx_Overrun>:
	}
}

uint8_t usart0_Rx_Overrun()
{
	return rxOverrun0;
    1bac:	80 91 36 03 	lds	r24, 0x0336
}
    1bb0:	08 95       	ret

00001bb2 <__vector_38>:
static volatile uint8_t txCount1=0;
static volatile uint8_t transmitting1=0;
static volatile uint8_t rxOverrun1=0;

SIGNAL(USART1_TX_vect)
{
    1bb2:	1f 92       	push	r1
    1bb4:	0f 92       	push	r0
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	0f 92       	push	r0
    1bba:	11 24       	eor	r1, r1
    1bbc:	0b b6       	in	r0, 0x3b	; 59
    1bbe:	0f 92       	push	r0
    1bc0:	1b be       	out	0x3b, r1	; 59
    1bc2:	8f 93       	push	r24
    1bc4:	9f 93       	push	r25
    1bc6:	ef 93       	push	r30
    1bc8:	ff 93       	push	r31
	if(txCount1!=0)
    1bca:	80 91 80 04 	lds	r24, 0x0480
    1bce:	81 11       	cpse	r24, r1
    1bd0:	0d c0       	rjmp	.+26     	; 0x1bec <__vector_38+0x3a>
		txRead1%=TX_BUF_SIZE;
		txCount1--;
	}
	else
	{
		transmitting1=0;
    1bd2:	10 92 7f 04 	sts	0x047F, r1
	}
}
    1bd6:	ff 91       	pop	r31
    1bd8:	ef 91       	pop	r30
    1bda:	9f 91       	pop	r25
    1bdc:	8f 91       	pop	r24
    1bde:	0f 90       	pop	r0
    1be0:	0b be       	out	0x3b, r0	; 59
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	0f 90       	pop	r0
    1be8:	1f 90       	pop	r1
    1bea:	18 95       	reti

SIGNAL(USART1_TX_vect)
{
	if(txCount1!=0)
	{
		UDR1=txBuf1[txRead1++];
    1bec:	80 91 81 04 	lds	r24, 0x0481
    1bf0:	e8 2f       	mov	r30, r24
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	ed 57       	subi	r30, 0x7D	; 125
    1bf6:	fb 4f       	sbci	r31, 0xFB	; 251
    1bf8:	90 81       	ld	r25, Z
    1bfa:	90 93 ce 00 	sts	0x00CE, r25
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	80 93 81 04 	sts	0x0481, r24
		txRead1%=TX_BUF_SIZE;
    1c04:	80 91 81 04 	lds	r24, 0x0481
    1c08:	8f 71       	andi	r24, 0x1F	; 31
    1c0a:	80 93 81 04 	sts	0x0481, r24
		txCount1--;
    1c0e:	80 91 80 04 	lds	r24, 0x0480
    1c12:	81 50       	subi	r24, 0x01	; 1
    1c14:	80 93 80 04 	sts	0x0480, r24
    1c18:	de cf       	rjmp	.-68     	; 0x1bd6 <__vector_38+0x24>

00001c1a <__vector_36>:
		transmitting1=0;
	}
}

SIGNAL(USART1_RX_vect)
{
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	0b b6       	in	r0, 0x3b	; 59
    1c26:	0f 92       	push	r0
    1c28:	1b be       	out	0x3b, r1	; 59
    1c2a:	8f 93       	push	r24
    1c2c:	9f 93       	push	r25
    1c2e:	ef 93       	push	r30
    1c30:	ff 93       	push	r31
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	1f 92       	push	r1
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
	if(rxCount1<RX_BUF_SIZE)
    1c3c:	80 91 a3 04 	lds	r24, 0x04A3
    1c40:	80 32       	cpi	r24, 0x20	; 32
    1c42:	a0 f0       	brcs	.+40     	; 0x1c6c <__vector_36+0x52>
		rxWrite1%=RX_BUF_SIZE;
		rxCount1++;
	}
	else
	{
		volatile uint8_t temp=UDR1; // force a read to clear the interrupt
    1c44:	80 91 ce 00 	lds	r24, 0x00CE
    1c48:	89 83       	std	Y+1, r24	; 0x01
		rxOverrun1=1;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	80 93 7e 04 	sts	0x047E, r24
	}
}
    1c50:	0f 90       	pop	r0
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	ff 91       	pop	r31
    1c58:	ef 91       	pop	r30
    1c5a:	9f 91       	pop	r25
    1c5c:	8f 91       	pop	r24
    1c5e:	0f 90       	pop	r0
    1c60:	0b be       	out	0x3b, r0	; 59
    1c62:	0f 90       	pop	r0
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	0f 90       	pop	r0
    1c68:	1f 90       	pop	r1
    1c6a:	18 95       	reti

SIGNAL(USART1_RX_vect)
{
	if(rxCount1<RX_BUF_SIZE)
	{
		rxBuf1[rxWrite1++]=UDR1;
    1c6c:	80 91 a5 04 	lds	r24, 0x04A5
    1c70:	e8 2f       	mov	r30, r24
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	90 91 ce 00 	lds	r25, 0x00CE
    1c78:	ea 55       	subi	r30, 0x5A	; 90
    1c7a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c7c:	90 83       	st	Z, r25
    1c7e:	8f 5f       	subi	r24, 0xFF	; 255
    1c80:	80 93 a5 04 	sts	0x04A5, r24
		rxWrite1%=RX_BUF_SIZE;
    1c84:	80 91 a5 04 	lds	r24, 0x04A5
    1c88:	8f 71       	andi	r24, 0x1F	; 31
    1c8a:	80 93 a5 04 	sts	0x04A5, r24
		rxCount1++;
    1c8e:	80 91 a3 04 	lds	r24, 0x04A3
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	80 93 a3 04 	sts	0x04A3, r24
    1c98:	db cf       	rjmp	.-74     	; 0x1c50 <__vector_36+0x36>

00001c9a <usart1_Init>:
	}
}

void usart1_Init(uint16_t baudRate)
{
	UBRR1L = (uint8_t)(F_CPU/(baudRate*16L)-1);
    1c9a:	9c 01       	movw	r18, r24
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	22 0f       	add	r18, r18
    1ca2:	33 1f       	adc	r19, r19
    1ca4:	44 1f       	adc	r20, r20
    1ca6:	55 1f       	adc	r21, r21
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	44 1f       	adc	r20, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	22 0f       	add	r18, r18
    1cb2:	33 1f       	adc	r19, r19
    1cb4:	44 1f       	adc	r20, r20
    1cb6:	55 1f       	adc	r21, r21
    1cb8:	22 0f       	add	r18, r18
    1cba:	33 1f       	adc	r19, r19
    1cbc:	44 1f       	adc	r20, r20
    1cbe:	55 1f       	adc	r21, r21
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	74 e2       	ldi	r23, 0x24	; 36
    1cc4:	84 ef       	ldi	r24, 0xF4	; 244
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__divmodsi4>
    1ccc:	82 2f       	mov	r24, r18
    1cce:	81 50       	subi	r24, 0x01	; 1
    1cd0:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H = (F_CPU/(baudRate*16L)-1) >> 8;
    1cd4:	da 01       	movw	r26, r20
    1cd6:	c9 01       	movw	r24, r18
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	a1 09       	sbc	r26, r1
    1cdc:	b1 09       	sbc	r27, r1
    1cde:	89 2f       	mov	r24, r25
    1ce0:	9a 2f       	mov	r25, r26
    1ce2:	ab 2f       	mov	r26, r27
    1ce4:	bb 27       	eor	r27, r27
    1ce6:	a7 fd       	sbrc	r26, 7
    1ce8:	ba 95       	dec	r27
    1cea:	80 93 cd 00 	sts	0x00CD, r24
	UCSR1A = 0x00;
    1cee:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0x06;
    1cf2:	86 e0       	ldi	r24, 0x06	; 6
    1cf4:	80 93 ca 00 	sts	0x00CA, r24
	UCSR1B = _BV(TXEN1)|_BV(RXEN1)|_BV(RXCIE1)|_BV(TXCIE1);
    1cf8:	88 ed       	ldi	r24, 0xD8	; 216
    1cfa:	80 93 c9 00 	sts	0x00C9, r24
    1cfe:	08 95       	ret

00001d00 <usart1_Tx>:
}

uint8_t usart1_Tx(char ch)
{
	cli();
    1d00:	f8 94       	cli

	if(!transmitting1)
    1d02:	90 91 7f 04 	lds	r25, 0x047F
    1d06:	99 23       	and	r25, r25
    1d08:	d9 f0       	breq	.+54     	; 0x1d40 <usart1_Tx+0x40>
		sei();
		return 1;
	}
	else
	{
		if(txCount1==TX_BUF_SIZE)
    1d0a:	90 91 80 04 	lds	r25, 0x0480
    1d0e:	90 32       	cpi	r25, 0x20	; 32
    1d10:	f1 f0       	breq	.+60     	; 0x1d4e <usart1_Tx+0x4e>
			sei();
			return 0;
		}
		else
		{
			txBuf1[txWrite1++]=ch;
    1d12:	90 91 82 04 	lds	r25, 0x0482
    1d16:	e9 2f       	mov	r30, r25
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	ed 57       	subi	r30, 0x7D	; 125
    1d1c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d1e:	80 83       	st	Z, r24
    1d20:	9f 5f       	subi	r25, 0xFF	; 255
    1d22:	90 93 82 04 	sts	0x0482, r25
			txWrite1%=TX_BUF_SIZE;
    1d26:	80 91 82 04 	lds	r24, 0x0482
    1d2a:	8f 71       	andi	r24, 0x1F	; 31
    1d2c:	80 93 82 04 	sts	0x0482, r24
			txCount1++;
    1d30:	80 91 80 04 	lds	r24, 0x0480
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	80 93 80 04 	sts	0x0480, r24
			sei();
    1d3a:	78 94       	sei
			return 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    1d3e:	08 95       	ret
{
	cli();

	if(!transmitting1)
	{
		UDR1=ch;
    1d40:	80 93 ce 00 	sts	0x00CE, r24
		transmitting1=1;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	80 93 7f 04 	sts	0x047F, r24
		sei();
    1d4a:	78 94       	sei
		return 1;
    1d4c:	08 95       	ret
	}
	else
	{
		if(txCount1==TX_BUF_SIZE)
		{
			sei();
    1d4e:	78 94       	sei
			return 0;
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	08 95       	ret

00001d54 <usart1_Rx>:

uint8_t usart1_Rx(char *ch)
{
	uint8_t retVal=0;

	cli();
    1d54:	f8 94       	cli

	if(rxCount1==0)
    1d56:	20 91 a3 04 	lds	r18, 0x04A3
    1d5a:	22 23       	and	r18, r18
    1d5c:	d1 f0       	breq	.+52     	; 0x1d92 <usart1_Rx+0x3e>
		return 0;
	}
	else
	{
		
		*ch=rxBuf1[rxRead1++];
    1d5e:	20 91 a4 04 	lds	r18, 0x04A4
    1d62:	e2 2f       	mov	r30, r18
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	ea 55       	subi	r30, 0x5A	; 90
    1d68:	fb 4f       	sbci	r31, 0xFB	; 251
    1d6a:	30 81       	ld	r19, Z
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	30 83       	st	Z, r19
    1d70:	2f 5f       	subi	r18, 0xFF	; 255
    1d72:	20 93 a4 04 	sts	0x04A4, r18
		rxRead1%=RX_BUF_SIZE;
    1d76:	80 91 a4 04 	lds	r24, 0x04A4
    1d7a:	8f 71       	andi	r24, 0x1F	; 31
    1d7c:	80 93 a4 04 	sts	0x04A4, r24
		retVal=rxCount1;
    1d80:	80 91 a3 04 	lds	r24, 0x04A3
		rxCount1--;
    1d84:	90 91 a3 04 	lds	r25, 0x04A3
    1d88:	91 50       	subi	r25, 0x01	; 1
    1d8a:	90 93 a3 04 	sts	0x04A3, r25
		sei();
    1d8e:	78 94       	sei
		return retVal;
	}
}
    1d90:	08 95       	ret

	cli();

	if(rxCount1==0)
	{
		sei();
    1d92:	78 94       	sei
		return 0;
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	08 95       	ret

00001d98 <__vector_53>:
static volatile uint8_t transmitting2=0;
static volatile uint8_t rxOverrun2=0;
volatile uint8_t hwm2=0;

SIGNAL(USART2_TX_vect)
{
    1d98:	1f 92       	push	r1
    1d9a:	0f 92       	push	r0
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	0f 92       	push	r0
    1da0:	11 24       	eor	r1, r1
    1da2:	0b b6       	in	r0, 0x3b	; 59
    1da4:	0f 92       	push	r0
    1da6:	1b be       	out	0x3b, r1	; 59
    1da8:	8f 93       	push	r24
    1daa:	9f 93       	push	r25
    1dac:	ef 93       	push	r30
    1dae:	ff 93       	push	r31
	if(txCount2!=0)
    1db0:	80 91 c9 04 	lds	r24, 0x04C9
    1db4:	81 11       	cpse	r24, r1
    1db6:	0d c0       	rjmp	.+26     	; 0x1dd2 <__vector_53+0x3a>
		txRead2%=TX_BUF_SIZE;
		txCount2--;
	}
	else
	{
		transmitting2=0;
    1db8:	10 92 c8 04 	sts	0x04C8, r1
	}
}
    1dbc:	ff 91       	pop	r31
    1dbe:	ef 91       	pop	r30
    1dc0:	9f 91       	pop	r25
    1dc2:	8f 91       	pop	r24
    1dc4:	0f 90       	pop	r0
    1dc6:	0b be       	out	0x3b, r0	; 59
    1dc8:	0f 90       	pop	r0
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	0f 90       	pop	r0
    1dce:	1f 90       	pop	r1
    1dd0:	18 95       	reti

SIGNAL(USART2_TX_vect)
{
	if(txCount2!=0)
	{
		UDR2=txBuf2[txRead2++];
    1dd2:	80 91 ca 04 	lds	r24, 0x04CA
    1dd6:	e8 2f       	mov	r30, r24
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	e4 53       	subi	r30, 0x34	; 52
    1ddc:	fb 4f       	sbci	r31, 0xFB	; 251
    1dde:	90 81       	ld	r25, Z
    1de0:	90 93 d6 00 	sts	0x00D6, r25
    1de4:	8f 5f       	subi	r24, 0xFF	; 255
    1de6:	80 93 ca 04 	sts	0x04CA, r24
		txRead2%=TX_BUF_SIZE;
    1dea:	80 91 ca 04 	lds	r24, 0x04CA
    1dee:	8f 77       	andi	r24, 0x7F	; 127
    1df0:	80 93 ca 04 	sts	0x04CA, r24
		txCount2--;
    1df4:	80 91 c9 04 	lds	r24, 0x04C9
    1df8:	81 50       	subi	r24, 0x01	; 1
    1dfa:	80 93 c9 04 	sts	0x04C9, r24
    1dfe:	de cf       	rjmp	.-68     	; 0x1dbc <__vector_53+0x24>

00001e00 <__vector_51>:
		transmitting2=0;
	}
}

SIGNAL(USART2_RX_vect)
{
    1e00:	1f 92       	push	r1
    1e02:	0f 92       	push	r0
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	0f 92       	push	r0
    1e08:	11 24       	eor	r1, r1
    1e0a:	0b b6       	in	r0, 0x3b	; 59
    1e0c:	0f 92       	push	r0
    1e0e:	1b be       	out	0x3b, r1	; 59
    1e10:	2f 93       	push	r18
    1e12:	3f 93       	push	r19
    1e14:	4f 93       	push	r20
    1e16:	5f 93       	push	r21
    1e18:	6f 93       	push	r22
    1e1a:	7f 93       	push	r23
    1e1c:	8f 93       	push	r24
    1e1e:	9f 93       	push	r25
    1e20:	af 93       	push	r26
    1e22:	bf 93       	push	r27
    1e24:	ef 93       	push	r30
    1e26:	ff 93       	push	r31
		volatile uint8_t temp=UDR2; // force a read to clear the interrupt
		rxOverrun2=1;
	}
	*/

	if(controlState==ControlLoggerPassthrough)
    1e28:	80 91 2d 03 	lds	r24, 0x032D
    1e2c:	90 91 2e 03 	lds	r25, 0x032E
    1e30:	82 30       	cpi	r24, 0x02	; 2
    1e32:	91 05       	cpc	r25, r1
    1e34:	61 f1       	breq	.+88     	; 0x1e8e <__vector_51+0x8e>
	{
		usart0_Tx(UDR2);
	}
	else if(controlState==ControlRecoverFileListA)
    1e36:	85 30       	cpi	r24, 0x05	; 5
    1e38:	91 05       	cpc	r25, r1
    1e3a:	b9 f0       	breq	.+46     	; 0x1e6a <__vector_51+0x6a>
		if(ch==0x0a)
		{
			controlState=ControlRecoverFileListB;
		}
	}
	else if(controlState==ControlRecoverFileListB)
    1e3c:	06 97       	sbiw	r24, 0x06	; 6
    1e3e:	01 f1       	breq	.+64     	; 0x1e80 <__vector_51+0x80>
			usart0_Tx(ch);
		}
	}
	else
	{
		uint8_t temp=UDR2;
    1e40:	80 91 d6 00 	lds	r24, 0x00D6
	}
}
    1e44:	ff 91       	pop	r31
    1e46:	ef 91       	pop	r30
    1e48:	bf 91       	pop	r27
    1e4a:	af 91       	pop	r26
    1e4c:	9f 91       	pop	r25
    1e4e:	8f 91       	pop	r24
    1e50:	7f 91       	pop	r23
    1e52:	6f 91       	pop	r22
    1e54:	5f 91       	pop	r21
    1e56:	4f 91       	pop	r20
    1e58:	3f 91       	pop	r19
    1e5a:	2f 91       	pop	r18
    1e5c:	0f 90       	pop	r0
    1e5e:	0b be       	out	0x3b, r0	; 59
    1e60:	0f 90       	pop	r0
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	0f 90       	pop	r0
    1e66:	1f 90       	pop	r1
    1e68:	18 95       	reti
		usart0_Tx(UDR2);
	}
	else if(controlState==ControlRecoverFileListA)
	{
		// strip off the echo of the ls command
		char ch=UDR2;
    1e6a:	80 91 d6 00 	lds	r24, 0x00D6

		if(ch==0x0a)
    1e6e:	8a 30       	cpi	r24, 0x0A	; 10
    1e70:	49 f7       	brne	.-46     	; 0x1e44 <__vector_51+0x44>
		{
			controlState=ControlRecoverFileListB;
    1e72:	86 e0       	ldi	r24, 0x06	; 6
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	90 93 2e 03 	sts	0x032E, r25
    1e7a:	80 93 2d 03 	sts	0x032D, r24
    1e7e:	e2 cf       	rjmp	.-60     	; 0x1e44 <__vector_51+0x44>
	}
	else if(controlState==ControlRecoverFileListB)
	{
		// pass back the response to the ls command and
		// return to idle when the command prompt is seen
		char ch=UDR2;
    1e80:	80 91 d6 00 	lds	r24, 0x00D6

		if(ch=='>')
    1e84:	8e 33       	cpi	r24, 0x3E	; 62
    1e86:	41 f0       	breq	.+16     	; 0x1e98 <__vector_51+0x98>
			usart0_Tx(0x0d);
			controlState=ControlIdle;
		}
		else
		{
			usart0_Tx(ch);
    1e88:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
    1e8c:	db cf       	rjmp	.-74     	; 0x1e44 <__vector_51+0x44>
	}
	*/

	if(controlState==ControlLoggerPassthrough)
	{
		usart0_Tx(UDR2);
    1e8e:	80 91 d6 00 	lds	r24, 0x00D6
    1e92:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
    1e96:	d6 cf       	rjmp	.-84     	; 0x1e44 <__vector_51+0x44>
		char ch=UDR2;

		if(ch=='>')
		{
			// send an easy to find terminator
			usart0_Tx('#');
    1e98:	83 e2       	ldi	r24, 0x23	; 35
    1e9a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
			usart0_Tx(0x0a);
    1e9e:	8a e0       	ldi	r24, 0x0A	; 10
    1ea0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
			usart0_Tx(0x0d);
    1ea4:	8d e0       	ldi	r24, 0x0D	; 13
    1ea6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <usart0_Tx>
			controlState=ControlIdle;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	90 93 2e 03 	sts	0x032E, r25
    1eb2:	80 93 2d 03 	sts	0x032D, r24
    1eb6:	c6 cf       	rjmp	.-116    	; 0x1e44 <__vector_51+0x44>

00001eb8 <usart2_Init>:
	}
}

void usart2_Init(uint16_t baudRate)
{
	UBRR2L = (uint8_t)(F_CPU/(baudRate*16L)-1);
    1eb8:	9c 01       	movw	r18, r24
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	22 0f       	add	r18, r18
    1ec0:	33 1f       	adc	r19, r19
    1ec2:	44 1f       	adc	r20, r20
    1ec4:	55 1f       	adc	r21, r21
    1ec6:	22 0f       	add	r18, r18
    1ec8:	33 1f       	adc	r19, r19
    1eca:	44 1f       	adc	r20, r20
    1ecc:	55 1f       	adc	r21, r21
    1ece:	22 0f       	add	r18, r18
    1ed0:	33 1f       	adc	r19, r19
    1ed2:	44 1f       	adc	r20, r20
    1ed4:	55 1f       	adc	r21, r21
    1ed6:	22 0f       	add	r18, r18
    1ed8:	33 1f       	adc	r19, r19
    1eda:	44 1f       	adc	r20, r20
    1edc:	55 1f       	adc	r21, r21
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	74 e2       	ldi	r23, 0x24	; 36
    1ee2:	84 ef       	ldi	r24, 0xF4	; 244
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__divmodsi4>
    1eea:	82 2f       	mov	r24, r18
    1eec:	81 50       	subi	r24, 0x01	; 1
    1eee:	80 93 d4 00 	sts	0x00D4, r24
	UBRR2H = (F_CPU/(baudRate*16L)-1) >> 8;
    1ef2:	da 01       	movw	r26, r20
    1ef4:	c9 01       	movw	r24, r18
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	a1 09       	sbc	r26, r1
    1efa:	b1 09       	sbc	r27, r1
    1efc:	89 2f       	mov	r24, r25
    1efe:	9a 2f       	mov	r25, r26
    1f00:	ab 2f       	mov	r26, r27
    1f02:	bb 27       	eor	r27, r27
    1f04:	a7 fd       	sbrc	r26, 7
    1f06:	ba 95       	dec	r27
    1f08:	80 93 d5 00 	sts	0x00D5, r24
	UCSR2A = 0x00;
    1f0c:	10 92 d0 00 	sts	0x00D0, r1
	UCSR2C = 0x06;
    1f10:	86 e0       	ldi	r24, 0x06	; 6
    1f12:	80 93 d2 00 	sts	0x00D2, r24
	UCSR2B = _BV(TXEN0)|_BV(RXEN0)|_BV(RXCIE0)|_BV(TXCIE0);
    1f16:	88 ed       	ldi	r24, 0xD8	; 216
    1f18:	80 93 d1 00 	sts	0x00D1, r24
	hwm2=0;
    1f1c:	10 92 c6 04 	sts	0x04C6, r1
    1f20:	08 95       	ret

00001f22 <usart2_Tx>:
}

uint8_t usart2_Tx(char ch)
{
	cli();
    1f22:	f8 94       	cli

	if(!transmitting2)
    1f24:	90 91 c8 04 	lds	r25, 0x04C8
    1f28:	99 23       	and	r25, r25
    1f2a:	29 f1       	breq	.+74     	; 0x1f76 <usart2_Tx+0x54>
		sei();
		return 1;
	}
	else
	{
		if(txCount2==TX_BUF_SIZE)
    1f2c:	90 91 c9 04 	lds	r25, 0x04C9
    1f30:	90 38       	cpi	r25, 0x80	; 128
    1f32:	41 f1       	breq	.+80     	; 0x1f84 <usart2_Tx+0x62>
			sei();
			return 0;
		}
		else
		{
			txBuf2[txWrite2++]=ch;
    1f34:	90 91 cb 04 	lds	r25, 0x04CB
    1f38:	e9 2f       	mov	r30, r25
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	e4 53       	subi	r30, 0x34	; 52
    1f3e:	fb 4f       	sbci	r31, 0xFB	; 251
    1f40:	80 83       	st	Z, r24
    1f42:	9f 5f       	subi	r25, 0xFF	; 255
    1f44:	90 93 cb 04 	sts	0x04CB, r25
			txWrite2%=TX_BUF_SIZE;
    1f48:	80 91 cb 04 	lds	r24, 0x04CB
    1f4c:	8f 77       	andi	r24, 0x7F	; 127
    1f4e:	80 93 cb 04 	sts	0x04CB, r24
			txCount2++;
    1f52:	80 91 c9 04 	lds	r24, 0x04C9
    1f56:	8f 5f       	subi	r24, 0xFF	; 255
    1f58:	80 93 c9 04 	sts	0x04C9, r24
			if(txCount2>hwm2)
    1f5c:	90 91 c9 04 	lds	r25, 0x04C9
    1f60:	80 91 c6 04 	lds	r24, 0x04C6
    1f64:	89 17       	cp	r24, r25
    1f66:	20 f4       	brcc	.+8      	; 0x1f70 <usart2_Tx+0x4e>
			{
				hwm2=txCount2;
    1f68:	80 91 c9 04 	lds	r24, 0x04C9
    1f6c:	80 93 c6 04 	sts	0x04C6, r24
			}
			sei();
    1f70:	78 94       	sei
			return 1;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    1f74:	08 95       	ret
{
	cli();

	if(!transmitting2)
	{
		UDR2=ch;
    1f76:	80 93 d6 00 	sts	0x00D6, r24
		transmitting2=1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	80 93 c8 04 	sts	0x04C8, r24
		sei();
    1f80:	78 94       	sei
		return 1;
    1f82:	08 95       	ret
	}
	else
	{
		if(txCount2==TX_BUF_SIZE)
		{
			sei();
    1f84:	78 94       	sei
			return 0;
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	08 95       	ret

00001f8a <usart2_Rx>:

uint8_t usart2_Rx(char *ch)
{
	uint8_t retVal=0;

	cli();
    1f8a:	f8 94       	cli

	if(rxCount2==0)
    1f8c:	20 91 4c 05 	lds	r18, 0x054C
    1f90:	22 23       	and	r18, r18
    1f92:	d1 f0       	breq	.+52     	; 0x1fc8 <usart2_Rx+0x3e>
		return 0;
	}
	else
	{
		
		*ch=rxBuf2[rxRead2++];
    1f94:	20 91 4d 05 	lds	r18, 0x054D
    1f98:	e2 2f       	mov	r30, r18
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	e1 5b       	subi	r30, 0xB1	; 177
    1f9e:	fa 4f       	sbci	r31, 0xFA	; 250
    1fa0:	30 81       	ld	r19, Z
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	30 83       	st	Z, r19
    1fa6:	2f 5f       	subi	r18, 0xFF	; 255
    1fa8:	20 93 4d 05 	sts	0x054D, r18
		rxRead2%=RX_BUF_SIZE;
    1fac:	80 91 4d 05 	lds	r24, 0x054D
    1fb0:	8f 77       	andi	r24, 0x7F	; 127
    1fb2:	80 93 4d 05 	sts	0x054D, r24
		retVal=rxCount2;
    1fb6:	80 91 4c 05 	lds	r24, 0x054C
		rxCount2--;
    1fba:	90 91 4c 05 	lds	r25, 0x054C
    1fbe:	91 50       	subi	r25, 0x01	; 1
    1fc0:	90 93 4c 05 	sts	0x054C, r25
		sei();
    1fc4:	78 94       	sei
		return retVal;
	}
}
    1fc6:	08 95       	ret

	cli();

	if(rxCount2==0)
	{
		sei();
    1fc8:	78 94       	sei
		return 0;
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	08 95       	ret

00001fce <__vector_56>:
static volatile uint8_t txCount3=0;
static volatile uint8_t transmitting3=0;
static volatile uint8_t rxOverrun3=0;

SIGNAL(USART3_TX_vect)
{
    1fce:	1f 92       	push	r1
    1fd0:	0f 92       	push	r0
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	0f 92       	push	r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	0b b6       	in	r0, 0x3b	; 59
    1fda:	0f 92       	push	r0
    1fdc:	1b be       	out	0x3b, r1	; 59
    1fde:	8f 93       	push	r24
    1fe0:	9f 93       	push	r25
    1fe2:	ef 93       	push	r30
    1fe4:	ff 93       	push	r31
	if(txCount3!=0)
    1fe6:	80 91 d1 05 	lds	r24, 0x05D1
    1fea:	81 11       	cpse	r24, r1
    1fec:	0d c0       	rjmp	.+26     	; 0x2008 <__vector_56+0x3a>
		txRead3%=TX_BUF_SIZE;
		txCount3--;
	}
	else
	{
		transmitting3=0;
    1fee:	10 92 d0 05 	sts	0x05D0, r1
	}
}
    1ff2:	ff 91       	pop	r31
    1ff4:	ef 91       	pop	r30
    1ff6:	9f 91       	pop	r25
    1ff8:	8f 91       	pop	r24
    1ffa:	0f 90       	pop	r0
    1ffc:	0b be       	out	0x3b, r0	; 59
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	0f 90       	pop	r0
    2004:	1f 90       	pop	r1
    2006:	18 95       	reti

SIGNAL(USART3_TX_vect)
{
	if(txCount3!=0)
	{
		UDR3=txBuf3[txRead3++];
    2008:	80 91 d2 05 	lds	r24, 0x05D2
    200c:	e8 2f       	mov	r30, r24
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	ec 52       	subi	r30, 0x2C	; 44
    2012:	fa 4f       	sbci	r31, 0xFA	; 250
    2014:	90 81       	ld	r25, Z
    2016:	90 93 36 01 	sts	0x0136, r25
    201a:	8f 5f       	subi	r24, 0xFF	; 255
    201c:	80 93 d2 05 	sts	0x05D2, r24
		txRead3%=TX_BUF_SIZE;
    2020:	80 91 d2 05 	lds	r24, 0x05D2
    2024:	8f 71       	andi	r24, 0x1F	; 31
    2026:	80 93 d2 05 	sts	0x05D2, r24
		txCount3--;
    202a:	80 91 d1 05 	lds	r24, 0x05D1
    202e:	81 50       	subi	r24, 0x01	; 1
    2030:	80 93 d1 05 	sts	0x05D1, r24
    2034:	de cf       	rjmp	.-68     	; 0x1ff2 <__vector_56+0x24>

00002036 <__vector_54>:
		transmitting3=0;
	}
}

SIGNAL(USART3_RX_vect)
{
    2036:	1f 92       	push	r1
    2038:	0f 92       	push	r0
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	0f 92       	push	r0
    203e:	11 24       	eor	r1, r1
    2040:	0b b6       	in	r0, 0x3b	; 59
    2042:	0f 92       	push	r0
    2044:	1b be       	out	0x3b, r1	; 59
    2046:	2f 93       	push	r18
    2048:	3f 93       	push	r19
    204a:	4f 93       	push	r20
    204c:	5f 93       	push	r21
    204e:	6f 93       	push	r22
    2050:	7f 93       	push	r23
    2052:	8f 93       	push	r24
    2054:	9f 93       	push	r25
    2056:	af 93       	push	r26
    2058:	bf 93       	push	r27
    205a:	ef 93       	push	r30
    205c:	ff 93       	push	r31
	processGPSCharacter(UDR3);
    205e:	80 91 36 01 	lds	r24, 0x0136
    2062:	0e 94 70 08 	call	0x10e0	; 0x10e0 <processGPSCharacter>
//	{
//		volatile uint8_t temp=UDR3; // force a read to clear the interrupt
//		rxOverrun3=1;
//	}

}
    2066:	ff 91       	pop	r31
    2068:	ef 91       	pop	r30
    206a:	bf 91       	pop	r27
    206c:	af 91       	pop	r26
    206e:	9f 91       	pop	r25
    2070:	8f 91       	pop	r24
    2072:	7f 91       	pop	r23
    2074:	6f 91       	pop	r22
    2076:	5f 91       	pop	r21
    2078:	4f 91       	pop	r20
    207a:	3f 91       	pop	r19
    207c:	2f 91       	pop	r18
    207e:	0f 90       	pop	r0
    2080:	0b be       	out	0x3b, r0	; 59
    2082:	0f 90       	pop	r0
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	0f 90       	pop	r0
    2088:	1f 90       	pop	r1
    208a:	18 95       	reti

0000208c <usart3_Init>:

void usart3_Init(uint16_t baudRate)
{
	UBRR3L = (uint8_t)(F_CPU/(baudRate*16L)-1);
    208c:	9c 01       	movw	r18, r24
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	22 0f       	add	r18, r18
    2094:	33 1f       	adc	r19, r19
    2096:	44 1f       	adc	r20, r20
    2098:	55 1f       	adc	r21, r21
    209a:	22 0f       	add	r18, r18
    209c:	33 1f       	adc	r19, r19
    209e:	44 1f       	adc	r20, r20
    20a0:	55 1f       	adc	r21, r21
    20a2:	22 0f       	add	r18, r18
    20a4:	33 1f       	adc	r19, r19
    20a6:	44 1f       	adc	r20, r20
    20a8:	55 1f       	adc	r21, r21
    20aa:	22 0f       	add	r18, r18
    20ac:	33 1f       	adc	r19, r19
    20ae:	44 1f       	adc	r20, r20
    20b0:	55 1f       	adc	r21, r21
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	74 e2       	ldi	r23, 0x24	; 36
    20b6:	84 ef       	ldi	r24, 0xF4	; 244
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__divmodsi4>
    20be:	82 2f       	mov	r24, r18
    20c0:	81 50       	subi	r24, 0x01	; 1
    20c2:	80 93 34 01 	sts	0x0134, r24
	UBRR3H = (F_CPU/(baudRate*16L)-1) >> 8;
    20c6:	da 01       	movw	r26, r20
    20c8:	c9 01       	movw	r24, r18
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	a1 09       	sbc	r26, r1
    20ce:	b1 09       	sbc	r27, r1
    20d0:	89 2f       	mov	r24, r25
    20d2:	9a 2f       	mov	r25, r26
    20d4:	ab 2f       	mov	r26, r27
    20d6:	bb 27       	eor	r27, r27
    20d8:	a7 fd       	sbrc	r26, 7
    20da:	ba 95       	dec	r27
    20dc:	80 93 35 01 	sts	0x0135, r24
	UCSR3A = 0x00;
    20e0:	10 92 30 01 	sts	0x0130, r1
	UCSR3C = 0x06;
    20e4:	86 e0       	ldi	r24, 0x06	; 6
    20e6:	80 93 32 01 	sts	0x0132, r24
	UCSR3B = _BV(TXEN0)|_BV(RXEN0)|_BV(RXCIE0)|_BV(TXCIE0);
    20ea:	88 ed       	ldi	r24, 0xD8	; 216
    20ec:	80 93 31 01 	sts	0x0131, r24
    20f0:	08 95       	ret

000020f2 <usart3_Tx>:
}

uint8_t usart3_Tx(char ch)
{
	cli();
    20f2:	f8 94       	cli

	if(!transmitting3)
    20f4:	90 91 d0 05 	lds	r25, 0x05D0
    20f8:	99 23       	and	r25, r25
    20fa:	d9 f0       	breq	.+54     	; 0x2132 <usart3_Tx+0x40>
		sei();
		return 1;
	}
	else
	{
		if(txCount3==TX_BUF_SIZE)
    20fc:	90 91 d1 05 	lds	r25, 0x05D1
    2100:	90 32       	cpi	r25, 0x20	; 32
    2102:	f1 f0       	breq	.+60     	; 0x2140 <usart3_Tx+0x4e>
			sei();
			return 0;
		}
		else
		{
			txBuf3[txWrite3++]=ch;
    2104:	90 91 d3 05 	lds	r25, 0x05D3
    2108:	e9 2f       	mov	r30, r25
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	ec 52       	subi	r30, 0x2C	; 44
    210e:	fa 4f       	sbci	r31, 0xFA	; 250
    2110:	80 83       	st	Z, r24
    2112:	9f 5f       	subi	r25, 0xFF	; 255
    2114:	90 93 d3 05 	sts	0x05D3, r25
			txWrite3%=TX_BUF_SIZE;
    2118:	80 91 d3 05 	lds	r24, 0x05D3
    211c:	8f 71       	andi	r24, 0x1F	; 31
    211e:	80 93 d3 05 	sts	0x05D3, r24
			txCount3++;
    2122:	80 91 d1 05 	lds	r24, 0x05D1
    2126:	8f 5f       	subi	r24, 0xFF	; 255
    2128:	80 93 d1 05 	sts	0x05D1, r24
			sei();
    212c:	78 94       	sei
			return 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    2130:	08 95       	ret
{
	cli();

	if(!transmitting3)
	{
		UDR3=ch;
    2132:	80 93 36 01 	sts	0x0136, r24
		transmitting3=1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	80 93 d0 05 	sts	0x05D0, r24
		sei();
    213c:	78 94       	sei
		return 1;
    213e:	08 95       	ret
	}
	else
	{
		if(txCount3==TX_BUF_SIZE)
		{
			sei();
    2140:	78 94       	sei
			return 0;
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	08 95       	ret

00002146 <usart3_Rx>:
    2146:	f8 94       	cli
    2148:	20 91 f4 05 	lds	r18, 0x05F4
    214c:	22 23       	and	r18, r18
    214e:	d1 f0       	breq	.+52     	; 0x2184 <usart3_Rx+0x3e>
    2150:	20 91 f5 05 	lds	r18, 0x05F5
    2154:	e2 2f       	mov	r30, r18
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	e9 50       	subi	r30, 0x09	; 9
    215a:	fa 4f       	sbci	r31, 0xFA	; 250
    215c:	30 81       	ld	r19, Z
    215e:	fc 01       	movw	r30, r24
    2160:	30 83       	st	Z, r19
    2162:	2f 5f       	subi	r18, 0xFF	; 255
    2164:	20 93 f5 05 	sts	0x05F5, r18
    2168:	80 91 f5 05 	lds	r24, 0x05F5
    216c:	8f 77       	andi	r24, 0x7F	; 127
    216e:	80 93 f5 05 	sts	0x05F5, r24
    2172:	80 91 f4 05 	lds	r24, 0x05F4
    2176:	90 91 f4 05 	lds	r25, 0x05F4
    217a:	91 50       	subi	r25, 0x01	; 1
    217c:	90 93 f4 05 	sts	0x05F4, r25
    2180:	78 94       	sei
    2182:	08 95       	ret
    2184:	78 94       	sei
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	08 95       	ret

0000218a <__ltsf2>:
    218a:	a8 e1       	ldi	r26, 0x18	; 24
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	eb ec       	ldi	r30, 0xCB	; 203
    2190:	f0 e1       	ldi	r31, 0x10	; 16
    2192:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__prologue_saves__+0x20>
    2196:	6d 8b       	std	Y+21, r22	; 0x15
    2198:	7e 8b       	std	Y+22, r23	; 0x16
    219a:	8f 8b       	std	Y+23, r24	; 0x17
    219c:	98 8f       	std	Y+24, r25	; 0x18
    219e:	29 8b       	std	Y+17, r18	; 0x11
    21a0:	3a 8b       	std	Y+18, r19	; 0x12
    21a2:	4b 8b       	std	Y+19, r20	; 0x13
    21a4:	5c 8b       	std	Y+20, r21	; 0x14
    21a6:	be 01       	movw	r22, r28
    21a8:	67 5f       	subi	r22, 0xF7	; 247
    21aa:	7f 4f       	sbci	r23, 0xFF	; 255
    21ac:	ce 01       	movw	r24, r28
    21ae:	45 96       	adiw	r24, 0x15	; 21
    21b0:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__unpack_f>
    21b4:	be 01       	movw	r22, r28
    21b6:	6f 5f       	subi	r22, 0xFF	; 255
    21b8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ba:	ce 01       	movw	r24, r28
    21bc:	41 96       	adiw	r24, 0x11	; 17
    21be:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__unpack_f>
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	82 30       	cpi	r24, 0x02	; 2
    21c6:	58 f0       	brcs	.+22     	; 0x21de <__ltsf2+0x54>
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	82 30       	cpi	r24, 0x02	; 2
    21cc:	40 f0       	brcs	.+16     	; 0x21de <__ltsf2+0x54>
    21ce:	be 01       	movw	r22, r28
    21d0:	6f 5f       	subi	r22, 0xFF	; 255
    21d2:	7f 4f       	sbci	r23, 0xFF	; 255
    21d4:	ce 01       	movw	r24, r28
    21d6:	09 96       	adiw	r24, 0x09	; 9
    21d8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__fpcmp_parts_f>
    21dc:	01 c0       	rjmp	.+2      	; 0x21e0 <__ltsf2+0x56>
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	68 96       	adiw	r28, 0x18	; 24
    21e2:	e2 e0       	ldi	r30, 0x02	; 2
    21e4:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <__epilogue_restores__+0x20>

000021e8 <__unpack_f>:
    21e8:	cf 92       	push	r12
    21ea:	df 92       	push	r13
    21ec:	ef 92       	push	r14
    21ee:	dc 01       	movw	r26, r24
    21f0:	fb 01       	movw	r30, r22
    21f2:	cc 90       	ld	r12, X
    21f4:	11 96       	adiw	r26, 0x01	; 1
    21f6:	dc 90       	ld	r13, X
    21f8:	11 97       	sbiw	r26, 0x01	; 1
    21fa:	12 96       	adiw	r26, 0x02	; 2
    21fc:	8c 91       	ld	r24, X
    21fe:	12 97       	sbiw	r26, 0x02	; 2
    2200:	3f e7       	ldi	r19, 0x7F	; 127
    2202:	e3 2e       	mov	r14, r19
    2204:	e8 22       	and	r14, r24
    2206:	6e 2d       	mov	r22, r14
    2208:	a6 01       	movw	r20, r12
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	98 2f       	mov	r25, r24
    220e:	99 1f       	adc	r25, r25
    2210:	99 27       	eor	r25, r25
    2212:	99 1f       	adc	r25, r25
    2214:	13 96       	adiw	r26, 0x03	; 3
    2216:	2c 91       	ld	r18, X
    2218:	82 2f       	mov	r24, r18
    221a:	88 0f       	add	r24, r24
    221c:	89 2b       	or	r24, r25
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	27 fb       	bst	r18, 7
    2222:	22 27       	eor	r18, r18
    2224:	20 f9       	bld	r18, 0
    2226:	21 83       	std	Z+1, r18	; 0x01
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	29 f5       	brne	.+74     	; 0x2276 <__stack+0x77>
    222c:	41 15       	cp	r20, r1
    222e:	51 05       	cpc	r21, r1
    2230:	61 05       	cpc	r22, r1
    2232:	71 05       	cpc	r23, r1
    2234:	11 f4       	brne	.+4      	; 0x223a <__stack+0x3b>
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	27 c0       	rjmp	.+78     	; 0x2288 <__stack+0x89>
    223a:	82 e8       	ldi	r24, 0x82	; 130
    223c:	9f ef       	ldi	r25, 0xFF	; 255
    223e:	93 83       	std	Z+3, r25	; 0x03
    2240:	82 83       	std	Z+2, r24	; 0x02
    2242:	27 e0       	ldi	r18, 0x07	; 7
    2244:	44 0f       	add	r20, r20
    2246:	55 1f       	adc	r21, r21
    2248:	66 1f       	adc	r22, r22
    224a:	77 1f       	adc	r23, r23
    224c:	2a 95       	dec	r18
    224e:	d1 f7       	brne	.-12     	; 0x2244 <__stack+0x45>
    2250:	83 e0       	ldi	r24, 0x03	; 3
    2252:	80 83       	st	Z, r24
    2254:	09 c0       	rjmp	.+18     	; 0x2268 <__stack+0x69>
    2256:	44 0f       	add	r20, r20
    2258:	55 1f       	adc	r21, r21
    225a:	66 1f       	adc	r22, r22
    225c:	77 1f       	adc	r23, r23
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	93 83       	std	Z+3, r25	; 0x03
    2266:	82 83       	std	Z+2, r24	; 0x02
    2268:	41 15       	cp	r20, r1
    226a:	51 05       	cpc	r21, r1
    226c:	61 05       	cpc	r22, r1
    226e:	80 e4       	ldi	r24, 0x40	; 64
    2270:	78 07       	cpc	r23, r24
    2272:	88 f3       	brcs	.-30     	; 0x2256 <__stack+0x57>
    2274:	20 c0       	rjmp	.+64     	; 0x22b6 <__stack+0xb7>
    2276:	8f 3f       	cpi	r24, 0xFF	; 255
    2278:	91 05       	cpc	r25, r1
    227a:	79 f4       	brne	.+30     	; 0x229a <__stack+0x9b>
    227c:	41 15       	cp	r20, r1
    227e:	51 05       	cpc	r21, r1
    2280:	61 05       	cpc	r22, r1
    2282:	71 05       	cpc	r23, r1
    2284:	19 f4       	brne	.+6      	; 0x228c <__stack+0x8d>
    2286:	84 e0       	ldi	r24, 0x04	; 4
    2288:	80 83       	st	Z, r24
    228a:	19 c0       	rjmp	.+50     	; 0x22be <__stack+0xbf>
    228c:	e4 fe       	sbrs	r14, 4
    228e:	03 c0       	rjmp	.+6      	; 0x2296 <__stack+0x97>
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	80 83       	st	Z, r24
    2294:	10 c0       	rjmp	.+32     	; 0x22b6 <__stack+0xb7>
    2296:	10 82       	st	Z, r1
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <__stack+0xb7>
    229a:	8f 57       	subi	r24, 0x7F	; 127
    229c:	91 09       	sbc	r25, r1
    229e:	93 83       	std	Z+3, r25	; 0x03
    22a0:	82 83       	std	Z+2, r24	; 0x02
    22a2:	83 e0       	ldi	r24, 0x03	; 3
    22a4:	80 83       	st	Z, r24
    22a6:	87 e0       	ldi	r24, 0x07	; 7
    22a8:	44 0f       	add	r20, r20
    22aa:	55 1f       	adc	r21, r21
    22ac:	66 1f       	adc	r22, r22
    22ae:	77 1f       	adc	r23, r23
    22b0:	8a 95       	dec	r24
    22b2:	d1 f7       	brne	.-12     	; 0x22a8 <__stack+0xa9>
    22b4:	70 64       	ori	r23, 0x40	; 64
    22b6:	44 83       	std	Z+4, r20	; 0x04
    22b8:	55 83       	std	Z+5, r21	; 0x05
    22ba:	66 83       	std	Z+6, r22	; 0x06
    22bc:	77 83       	std	Z+7, r23	; 0x07
    22be:	ef 90       	pop	r14
    22c0:	df 90       	pop	r13
    22c2:	cf 90       	pop	r12
    22c4:	08 95       	ret

000022c6 <__fpcmp_parts_f>:
    22c6:	cf 93       	push	r28
    22c8:	fc 01       	movw	r30, r24
    22ca:	db 01       	movw	r26, r22
    22cc:	90 81       	ld	r25, Z
    22ce:	92 30       	cpi	r25, 0x02	; 2
    22d0:	08 f4       	brcc	.+2      	; 0x22d4 <__fpcmp_parts_f+0xe>
    22d2:	52 c0       	rjmp	.+164    	; 0x2378 <__fpcmp_parts_f+0xb2>
    22d4:	8c 91       	ld	r24, X
    22d6:	82 30       	cpi	r24, 0x02	; 2
    22d8:	08 f4       	brcc	.+2      	; 0x22dc <__fpcmp_parts_f+0x16>
    22da:	4e c0       	rjmp	.+156    	; 0x2378 <__fpcmp_parts_f+0xb2>
    22dc:	94 30       	cpi	r25, 0x04	; 4
    22de:	71 f4       	brne	.+28     	; 0x22fc <__fpcmp_parts_f+0x36>
    22e0:	84 30       	cpi	r24, 0x04	; 4
    22e2:	39 f4       	brne	.+14     	; 0x22f2 <__fpcmp_parts_f+0x2c>
    22e4:	11 96       	adiw	r26, 0x01	; 1
    22e6:	2c 91       	ld	r18, X
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	81 81       	ldd	r24, Z+1	; 0x01
    22ec:	28 1b       	sub	r18, r24
    22ee:	31 09       	sbc	r19, r1
    22f0:	48 c0       	rjmp	.+144    	; 0x2382 <__fpcmp_parts_f+0xbc>
    22f2:	81 81       	ldd	r24, Z+1	; 0x01
    22f4:	88 23       	and	r24, r24
    22f6:	09 f4       	brne	.+2      	; 0x22fa <__fpcmp_parts_f+0x34>
    22f8:	3f c0       	rjmp	.+126    	; 0x2378 <__fpcmp_parts_f+0xb2>
    22fa:	3b c0       	rjmp	.+118    	; 0x2372 <__fpcmp_parts_f+0xac>
    22fc:	84 30       	cpi	r24, 0x04	; 4
    22fe:	29 f4       	brne	.+10     	; 0x230a <__fpcmp_parts_f+0x44>
    2300:	11 96       	adiw	r26, 0x01	; 1
    2302:	8c 91       	ld	r24, X
    2304:	81 11       	cpse	r24, r1
    2306:	38 c0       	rjmp	.+112    	; 0x2378 <__fpcmp_parts_f+0xb2>
    2308:	34 c0       	rjmp	.+104    	; 0x2372 <__fpcmp_parts_f+0xac>
    230a:	92 30       	cpi	r25, 0x02	; 2
    230c:	19 f4       	brne	.+6      	; 0x2314 <__fpcmp_parts_f+0x4e>
    230e:	82 30       	cpi	r24, 0x02	; 2
    2310:	b9 f7       	brne	.-18     	; 0x2300 <__fpcmp_parts_f+0x3a>
    2312:	35 c0       	rjmp	.+106    	; 0x237e <__fpcmp_parts_f+0xb8>
    2314:	82 30       	cpi	r24, 0x02	; 2
    2316:	69 f3       	breq	.-38     	; 0x22f2 <__fpcmp_parts_f+0x2c>
    2318:	c1 81       	ldd	r28, Z+1	; 0x01
    231a:	11 96       	adiw	r26, 0x01	; 1
    231c:	8c 91       	ld	r24, X
    231e:	11 97       	sbiw	r26, 0x01	; 1
    2320:	c8 13       	cpse	r28, r24
    2322:	1d c0       	rjmp	.+58     	; 0x235e <__fpcmp_parts_f+0x98>
    2324:	22 81       	ldd	r18, Z+2	; 0x02
    2326:	33 81       	ldd	r19, Z+3	; 0x03
    2328:	12 96       	adiw	r26, 0x02	; 2
    232a:	8d 91       	ld	r24, X+
    232c:	9c 91       	ld	r25, X
    232e:	13 97       	sbiw	r26, 0x03	; 3
    2330:	82 17       	cp	r24, r18
    2332:	93 07       	cpc	r25, r19
    2334:	0c f4       	brge	.+2      	; 0x2338 <__fpcmp_parts_f+0x72>
    2336:	13 c0       	rjmp	.+38     	; 0x235e <__fpcmp_parts_f+0x98>
    2338:	28 17       	cp	r18, r24
    233a:	39 07       	cpc	r19, r25
    233c:	0c f4       	brge	.+2      	; 0x2340 <__fpcmp_parts_f+0x7a>
    233e:	17 c0       	rjmp	.+46     	; 0x236e <__fpcmp_parts_f+0xa8>
    2340:	44 81       	ldd	r20, Z+4	; 0x04
    2342:	55 81       	ldd	r21, Z+5	; 0x05
    2344:	66 81       	ldd	r22, Z+6	; 0x06
    2346:	77 81       	ldd	r23, Z+7	; 0x07
    2348:	14 96       	adiw	r26, 0x04	; 4
    234a:	8d 91       	ld	r24, X+
    234c:	9d 91       	ld	r25, X+
    234e:	0d 90       	ld	r0, X+
    2350:	bc 91       	ld	r27, X
    2352:	a0 2d       	mov	r26, r0
    2354:	84 17       	cp	r24, r20
    2356:	95 07       	cpc	r25, r21
    2358:	a6 07       	cpc	r26, r22
    235a:	b7 07       	cpc	r27, r23
    235c:	18 f4       	brcc	.+6      	; 0x2364 <__fpcmp_parts_f+0x9e>
    235e:	c1 11       	cpse	r28, r1
    2360:	08 c0       	rjmp	.+16     	; 0x2372 <__fpcmp_parts_f+0xac>
    2362:	0a c0       	rjmp	.+20     	; 0x2378 <__fpcmp_parts_f+0xb2>
    2364:	48 17       	cp	r20, r24
    2366:	59 07       	cpc	r21, r25
    2368:	6a 07       	cpc	r22, r26
    236a:	7b 07       	cpc	r23, r27
    236c:	40 f4       	brcc	.+16     	; 0x237e <__fpcmp_parts_f+0xb8>
    236e:	c1 11       	cpse	r28, r1
    2370:	03 c0       	rjmp	.+6      	; 0x2378 <__fpcmp_parts_f+0xb2>
    2372:	2f ef       	ldi	r18, 0xFF	; 255
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	05 c0       	rjmp	.+10     	; 0x2382 <__fpcmp_parts_f+0xbc>
    2378:	21 e0       	ldi	r18, 0x01	; 1
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <__fpcmp_parts_f+0xbc>
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	c9 01       	movw	r24, r18
    2384:	cf 91       	pop	r28
    2386:	08 95       	ret

00002388 <vfprintf>:
    2388:	2f 92       	push	r2
    238a:	3f 92       	push	r3
    238c:	4f 92       	push	r4
    238e:	5f 92       	push	r5
    2390:	6f 92       	push	r6
    2392:	7f 92       	push	r7
    2394:	8f 92       	push	r8
    2396:	9f 92       	push	r9
    2398:	af 92       	push	r10
    239a:	bf 92       	push	r11
    239c:	cf 92       	push	r12
    239e:	df 92       	push	r13
    23a0:	ef 92       	push	r14
    23a2:	ff 92       	push	r15
    23a4:	0f 93       	push	r16
    23a6:	1f 93       	push	r17
    23a8:	cf 93       	push	r28
    23aa:	df 93       	push	r29
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	63 97       	sbiw	r28, 0x13	; 19
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	7c 01       	movw	r14, r24
    23be:	5b 01       	movw	r10, r22
    23c0:	8a 01       	movw	r16, r20
    23c2:	fc 01       	movw	r30, r24
    23c4:	17 82       	std	Z+7, r1	; 0x07
    23c6:	16 82       	std	Z+6, r1	; 0x06
    23c8:	83 81       	ldd	r24, Z+3	; 0x03
    23ca:	81 fd       	sbrc	r24, 1
    23cc:	03 c0       	rjmp	.+6      	; 0x23d4 <vfprintf+0x4c>
    23ce:	6d c3       	rjmp	.+1754   	; 0x2aaa <vfprintf+0x722>
    23d0:	86 01       	movw	r16, r12
    23d2:	05 c0       	rjmp	.+10     	; 0x23de <vfprintf+0x56>
    23d4:	88 24       	eor	r8, r8
    23d6:	83 94       	inc	r8
    23d8:	91 2c       	mov	r9, r1
    23da:	8c 0e       	add	r8, r28
    23dc:	9d 1e       	adc	r9, r29
    23de:	f7 01       	movw	r30, r14
    23e0:	93 81       	ldd	r25, Z+3	; 0x03
    23e2:	f5 01       	movw	r30, r10
    23e4:	93 fd       	sbrc	r25, 3
    23e6:	85 91       	lpm	r24, Z+
    23e8:	93 ff       	sbrs	r25, 3
    23ea:	81 91       	ld	r24, Z+
    23ec:	5f 01       	movw	r10, r30
    23ee:	88 23       	and	r24, r24
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <vfprintf+0x6c>
    23f2:	57 c3       	rjmp	.+1710   	; 0x2aa2 <vfprintf+0x71a>
    23f4:	85 32       	cpi	r24, 0x25	; 37
    23f6:	39 f4       	brne	.+14     	; 0x2406 <vfprintf+0x7e>
    23f8:	93 fd       	sbrc	r25, 3
    23fa:	85 91       	lpm	r24, Z+
    23fc:	93 ff       	sbrs	r25, 3
    23fe:	81 91       	ld	r24, Z+
    2400:	5f 01       	movw	r10, r30
    2402:	85 32       	cpi	r24, 0x25	; 37
    2404:	31 f4       	brne	.+12     	; 0x2412 <vfprintf+0x8a>
    2406:	b7 01       	movw	r22, r14
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    240e:	68 01       	movw	r12, r16
    2410:	df cf       	rjmp	.-66     	; 0x23d0 <vfprintf+0x48>
    2412:	41 2c       	mov	r4, r1
    2414:	51 2c       	mov	r5, r1
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	20 32       	cpi	r18, 0x20	; 32
    241a:	a8 f4       	brcc	.+42     	; 0x2446 <vfprintf+0xbe>
    241c:	8b 32       	cpi	r24, 0x2B	; 43
    241e:	61 f0       	breq	.+24     	; 0x2438 <vfprintf+0xb0>
    2420:	28 f4       	brcc	.+10     	; 0x242c <vfprintf+0xa4>
    2422:	80 32       	cpi	r24, 0x20	; 32
    2424:	51 f0       	breq	.+20     	; 0x243a <vfprintf+0xb2>
    2426:	83 32       	cpi	r24, 0x23	; 35
    2428:	71 f4       	brne	.+28     	; 0x2446 <vfprintf+0xbe>
    242a:	0b c0       	rjmp	.+22     	; 0x2442 <vfprintf+0xba>
    242c:	8d 32       	cpi	r24, 0x2D	; 45
    242e:	39 f0       	breq	.+14     	; 0x243e <vfprintf+0xb6>
    2430:	80 33       	cpi	r24, 0x30	; 48
    2432:	49 f4       	brne	.+18     	; 0x2446 <vfprintf+0xbe>
    2434:	21 60       	ori	r18, 0x01	; 1
    2436:	28 c0       	rjmp	.+80     	; 0x2488 <vfprintf+0x100>
    2438:	22 60       	ori	r18, 0x02	; 2
    243a:	24 60       	ori	r18, 0x04	; 4
    243c:	25 c0       	rjmp	.+74     	; 0x2488 <vfprintf+0x100>
    243e:	28 60       	ori	r18, 0x08	; 8
    2440:	23 c0       	rjmp	.+70     	; 0x2488 <vfprintf+0x100>
    2442:	20 61       	ori	r18, 0x10	; 16
    2444:	21 c0       	rjmp	.+66     	; 0x2488 <vfprintf+0x100>
    2446:	27 fd       	sbrc	r18, 7
    2448:	27 c0       	rjmp	.+78     	; 0x2498 <vfprintf+0x110>
    244a:	38 2f       	mov	r19, r24
    244c:	30 53       	subi	r19, 0x30	; 48
    244e:	3a 30       	cpi	r19, 0x0A	; 10
    2450:	78 f4       	brcc	.+30     	; 0x2470 <vfprintf+0xe8>
    2452:	26 ff       	sbrs	r18, 6
    2454:	06 c0       	rjmp	.+12     	; 0x2462 <vfprintf+0xda>
    2456:	fa e0       	ldi	r31, 0x0A	; 10
    2458:	4f 9e       	mul	r4, r31
    245a:	30 0d       	add	r19, r0
    245c:	11 24       	eor	r1, r1
    245e:	43 2e       	mov	r4, r19
    2460:	13 c0       	rjmp	.+38     	; 0x2488 <vfprintf+0x100>
    2462:	8a e0       	ldi	r24, 0x0A	; 10
    2464:	58 9e       	mul	r5, r24
    2466:	30 0d       	add	r19, r0
    2468:	11 24       	eor	r1, r1
    246a:	53 2e       	mov	r5, r19
    246c:	20 62       	ori	r18, 0x20	; 32
    246e:	0c c0       	rjmp	.+24     	; 0x2488 <vfprintf+0x100>
    2470:	8e 32       	cpi	r24, 0x2E	; 46
    2472:	21 f4       	brne	.+8      	; 0x247c <vfprintf+0xf4>
    2474:	26 fd       	sbrc	r18, 6
    2476:	15 c3       	rjmp	.+1578   	; 0x2aa2 <vfprintf+0x71a>
    2478:	20 64       	ori	r18, 0x40	; 64
    247a:	06 c0       	rjmp	.+12     	; 0x2488 <vfprintf+0x100>
    247c:	8c 36       	cpi	r24, 0x6C	; 108
    247e:	11 f4       	brne	.+4      	; 0x2484 <vfprintf+0xfc>
    2480:	20 68       	ori	r18, 0x80	; 128
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <vfprintf+0x100>
    2484:	88 36       	cpi	r24, 0x68	; 104
    2486:	41 f4       	brne	.+16     	; 0x2498 <vfprintf+0x110>
    2488:	f5 01       	movw	r30, r10
    248a:	93 fd       	sbrc	r25, 3
    248c:	85 91       	lpm	r24, Z+
    248e:	93 ff       	sbrs	r25, 3
    2490:	81 91       	ld	r24, Z+
    2492:	5f 01       	movw	r10, r30
    2494:	81 11       	cpse	r24, r1
    2496:	c0 cf       	rjmp	.-128    	; 0x2418 <vfprintf+0x90>
    2498:	98 2f       	mov	r25, r24
    249a:	95 54       	subi	r25, 0x45	; 69
    249c:	93 30       	cpi	r25, 0x03	; 3
    249e:	18 f4       	brcc	.+6      	; 0x24a6 <vfprintf+0x11e>
    24a0:	20 61       	ori	r18, 0x10	; 16
    24a2:	80 5e       	subi	r24, 0xE0	; 224
    24a4:	06 c0       	rjmp	.+12     	; 0x24b2 <vfprintf+0x12a>
    24a6:	98 2f       	mov	r25, r24
    24a8:	95 56       	subi	r25, 0x65	; 101
    24aa:	93 30       	cpi	r25, 0x03	; 3
    24ac:	08 f0       	brcs	.+2      	; 0x24b0 <vfprintf+0x128>
    24ae:	a1 c1       	rjmp	.+834    	; 0x27f2 <vfprintf+0x46a>
    24b0:	2f 7e       	andi	r18, 0xEF	; 239
    24b2:	26 fd       	sbrc	r18, 6
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <vfprintf+0x132>
    24b6:	56 e0       	ldi	r21, 0x06	; 6
    24b8:	45 2e       	mov	r4, r21
    24ba:	4f e3       	ldi	r20, 0x3F	; 63
    24bc:	74 2e       	mov	r7, r20
    24be:	72 22       	and	r7, r18
    24c0:	85 36       	cpi	r24, 0x65	; 101
    24c2:	19 f4       	brne	.+6      	; 0x24ca <vfprintf+0x142>
    24c4:	f0 e4       	ldi	r31, 0x40	; 64
    24c6:	7f 2a       	or	r7, r31
    24c8:	07 c0       	rjmp	.+14     	; 0x24d8 <vfprintf+0x150>
    24ca:	86 36       	cpi	r24, 0x66	; 102
    24cc:	19 f4       	brne	.+6      	; 0x24d4 <vfprintf+0x14c>
    24ce:	20 e8       	ldi	r18, 0x80	; 128
    24d0:	72 2a       	or	r7, r18
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <vfprintf+0x150>
    24d4:	41 10       	cpse	r4, r1
    24d6:	4a 94       	dec	r4
    24d8:	77 fe       	sbrs	r7, 7
    24da:	07 c0       	rjmp	.+14     	; 0x24ea <vfprintf+0x162>
    24dc:	3b e3       	ldi	r19, 0x3B	; 59
    24de:	34 15       	cp	r19, r4
    24e0:	48 f0       	brcs	.+18     	; 0x24f4 <vfprintf+0x16c>
    24e2:	34 2c       	mov	r3, r4
    24e4:	33 94       	inc	r3
    24e6:	27 e0       	ldi	r18, 0x07	; 7
    24e8:	0d c0       	rjmp	.+26     	; 0x2504 <vfprintf+0x17c>
    24ea:	87 e0       	ldi	r24, 0x07	; 7
    24ec:	84 15       	cp	r24, r4
    24ee:	30 f0       	brcs	.+12     	; 0x24fc <vfprintf+0x174>
    24f0:	24 2d       	mov	r18, r4
    24f2:	07 c0       	rjmp	.+14     	; 0x2502 <vfprintf+0x17a>
    24f4:	27 e0       	ldi	r18, 0x07	; 7
    24f6:	3c e3       	ldi	r19, 0x3C	; 60
    24f8:	33 2e       	mov	r3, r19
    24fa:	04 c0       	rjmp	.+8      	; 0x2504 <vfprintf+0x17c>
    24fc:	27 e0       	ldi	r18, 0x07	; 7
    24fe:	97 e0       	ldi	r25, 0x07	; 7
    2500:	49 2e       	mov	r4, r25
    2502:	31 2c       	mov	r3, r1
    2504:	68 01       	movw	r12, r16
    2506:	94 e0       	ldi	r25, 0x04	; 4
    2508:	c9 0e       	add	r12, r25
    250a:	d1 1c       	adc	r13, r1
    250c:	f8 01       	movw	r30, r16
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	03 2d       	mov	r16, r3
    2518:	a4 01       	movw	r20, r8
    251a:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__ftoa_engine>
    251e:	8c 01       	movw	r16, r24
    2520:	29 81       	ldd	r18, Y+1	; 0x01
    2522:	2c 87       	std	Y+12, r18	; 0x0c
    2524:	20 ff       	sbrs	r18, 0
    2526:	02 c0       	rjmp	.+4      	; 0x252c <vfprintf+0x1a4>
    2528:	23 ff       	sbrs	r18, 3
    252a:	07 c0       	rjmp	.+14     	; 0x253a <vfprintf+0x1b2>
    252c:	71 fc       	sbrc	r7, 1
    252e:	08 c0       	rjmp	.+16     	; 0x2540 <vfprintf+0x1b8>
    2530:	72 fe       	sbrs	r7, 2
    2532:	09 c0       	rjmp	.+18     	; 0x2546 <vfprintf+0x1be>
    2534:	80 e2       	ldi	r24, 0x20	; 32
    2536:	68 2e       	mov	r6, r24
    2538:	07 c0       	rjmp	.+14     	; 0x2548 <vfprintf+0x1c0>
    253a:	bd e2       	ldi	r27, 0x2D	; 45
    253c:	6b 2e       	mov	r6, r27
    253e:	04 c0       	rjmp	.+8      	; 0x2548 <vfprintf+0x1c0>
    2540:	ab e2       	ldi	r26, 0x2B	; 43
    2542:	6a 2e       	mov	r6, r26
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <vfprintf+0x1c0>
    2546:	61 2c       	mov	r6, r1
    2548:	8c 85       	ldd	r24, Y+12	; 0x0c
    254a:	8c 70       	andi	r24, 0x0C	; 12
    254c:	a1 f1       	breq	.+104    	; 0x25b6 <vfprintf+0x22e>
    254e:	66 20       	and	r6, r6
    2550:	11 f0       	breq	.+4      	; 0x2556 <vfprintf+0x1ce>
    2552:	84 e0       	ldi	r24, 0x04	; 4
    2554:	01 c0       	rjmp	.+2      	; 0x2558 <vfprintf+0x1d0>
    2556:	83 e0       	ldi	r24, 0x03	; 3
    2558:	85 15       	cp	r24, r5
    255a:	10 f0       	brcs	.+4      	; 0x2560 <vfprintf+0x1d8>
    255c:	51 2c       	mov	r5, r1
    255e:	0b c0       	rjmp	.+22     	; 0x2576 <vfprintf+0x1ee>
    2560:	58 1a       	sub	r5, r24
    2562:	73 fc       	sbrc	r7, 3
    2564:	08 c0       	rjmp	.+16     	; 0x2576 <vfprintf+0x1ee>
    2566:	b7 01       	movw	r22, r14
    2568:	80 e2       	ldi	r24, 0x20	; 32
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2570:	5a 94       	dec	r5
    2572:	c9 f7       	brne	.-14     	; 0x2566 <vfprintf+0x1de>
    2574:	f3 cf       	rjmp	.-26     	; 0x255c <vfprintf+0x1d4>
    2576:	66 20       	and	r6, r6
    2578:	29 f0       	breq	.+10     	; 0x2584 <vfprintf+0x1fc>
    257a:	b7 01       	movw	r22, r14
    257c:	86 2d       	mov	r24, r6
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2584:	3c 85       	ldd	r19, Y+12	; 0x0c
    2586:	33 fd       	sbrc	r19, 3
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <vfprintf+0x208>
    258a:	08 ee       	ldi	r16, 0xE8	; 232
    258c:	10 e0       	ldi	r17, 0x00	; 0
    258e:	0c c0       	rjmp	.+24     	; 0x25a8 <vfprintf+0x220>
    2590:	04 ee       	ldi	r16, 0xE4	; 228
    2592:	10 e0       	ldi	r17, 0x00	; 0
    2594:	09 c0       	rjmp	.+18     	; 0x25a8 <vfprintf+0x220>
    2596:	71 10       	cpse	r7, r1
    2598:	80 52       	subi	r24, 0x20	; 32
    259a:	b7 01       	movw	r22, r14
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    25a2:	0f 5f       	subi	r16, 0xFF	; 255
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <vfprintf+0x224>
    25a8:	80 e1       	ldi	r24, 0x10	; 16
    25aa:	78 22       	and	r7, r24
    25ac:	f8 01       	movw	r30, r16
    25ae:	84 91       	lpm	r24, Z+
    25b0:	81 11       	cpse	r24, r1
    25b2:	f1 cf       	rjmp	.-30     	; 0x2596 <vfprintf+0x20e>
    25b4:	73 c2       	rjmp	.+1254   	; 0x2a9c <vfprintf+0x714>
    25b6:	77 fe       	sbrs	r7, 7
    25b8:	0e c0       	rjmp	.+28     	; 0x25d6 <vfprintf+0x24e>
    25ba:	30 0e       	add	r3, r16
    25bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    25be:	24 ff       	sbrs	r18, 4
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <vfprintf+0x242>
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	81 33       	cpi	r24, 0x31	; 49
    25c6:	09 f4       	brne	.+2      	; 0x25ca <vfprintf+0x242>
    25c8:	3a 94       	dec	r3
    25ca:	13 14       	cp	r1, r3
    25cc:	4c f5       	brge	.+82     	; 0x2620 <vfprintf+0x298>
    25ce:	38 e0       	ldi	r19, 0x08	; 8
    25d0:	33 15       	cp	r19, r3
    25d2:	48 f1       	brcs	.+82     	; 0x2626 <vfprintf+0x29e>
    25d4:	2c c0       	rjmp	.+88     	; 0x262e <vfprintf+0x2a6>
    25d6:	76 fc       	sbrc	r7, 6
    25d8:	2a c0       	rjmp	.+84     	; 0x262e <vfprintf+0x2a6>
    25da:	24 2d       	mov	r18, r4
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	20 17       	cp	r18, r16
    25e0:	31 07       	cpc	r19, r17
    25e2:	44 f0       	brlt	.+16     	; 0x25f4 <vfprintf+0x26c>
    25e4:	0c 3f       	cpi	r16, 0xFC	; 252
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	18 07       	cpc	r17, r24
    25ea:	24 f0       	brlt	.+8      	; 0x25f4 <vfprintf+0x26c>
    25ec:	90 e8       	ldi	r25, 0x80	; 128
    25ee:	79 2a       	or	r7, r25
    25f0:	01 c0       	rjmp	.+2      	; 0x25f4 <vfprintf+0x26c>
    25f2:	4a 94       	dec	r4
    25f4:	44 20       	and	r4, r4
    25f6:	49 f0       	breq	.+18     	; 0x260a <vfprintf+0x282>
    25f8:	e2 e0       	ldi	r30, 0x02	; 2
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	ec 0f       	add	r30, r28
    25fe:	fd 1f       	adc	r31, r29
    2600:	e4 0d       	add	r30, r4
    2602:	f1 1d       	adc	r31, r1
    2604:	80 81       	ld	r24, Z
    2606:	80 33       	cpi	r24, 0x30	; 48
    2608:	a1 f3       	breq	.-24     	; 0x25f2 <vfprintf+0x26a>
    260a:	77 fe       	sbrs	r7, 7
    260c:	10 c0       	rjmp	.+32     	; 0x262e <vfprintf+0x2a6>
    260e:	34 2c       	mov	r3, r4
    2610:	33 94       	inc	r3
    2612:	24 2d       	mov	r18, r4
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	02 17       	cp	r16, r18
    2618:	13 07       	cpc	r17, r19
    261a:	44 f4       	brge	.+16     	; 0x262c <vfprintf+0x2a4>
    261c:	40 1a       	sub	r4, r16
    261e:	07 c0       	rjmp	.+14     	; 0x262e <vfprintf+0x2a6>
    2620:	33 24       	eor	r3, r3
    2622:	33 94       	inc	r3
    2624:	04 c0       	rjmp	.+8      	; 0x262e <vfprintf+0x2a6>
    2626:	f8 e0       	ldi	r31, 0x08	; 8
    2628:	3f 2e       	mov	r3, r31
    262a:	01 c0       	rjmp	.+2      	; 0x262e <vfprintf+0x2a6>
    262c:	41 2c       	mov	r4, r1
    262e:	77 fe       	sbrs	r7, 7
    2630:	07 c0       	rjmp	.+14     	; 0x2640 <vfprintf+0x2b8>
    2632:	10 16       	cp	r1, r16
    2634:	11 06       	cpc	r1, r17
    2636:	3c f4       	brge	.+14     	; 0x2646 <vfprintf+0x2be>
    2638:	98 01       	movw	r18, r16
    263a:	2f 5f       	subi	r18, 0xFF	; 255
    263c:	3f 4f       	sbci	r19, 0xFF	; 255
    263e:	05 c0       	rjmp	.+10     	; 0x264a <vfprintf+0x2c2>
    2640:	25 e0       	ldi	r18, 0x05	; 5
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	02 c0       	rjmp	.+4      	; 0x264a <vfprintf+0x2c2>
    2646:	21 e0       	ldi	r18, 0x01	; 1
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	66 20       	and	r6, r6
    264c:	11 f0       	breq	.+4      	; 0x2652 <vfprintf+0x2ca>
    264e:	2f 5f       	subi	r18, 0xFF	; 255
    2650:	3f 4f       	sbci	r19, 0xFF	; 255
    2652:	44 20       	and	r4, r4
    2654:	31 f0       	breq	.+12     	; 0x2662 <vfprintf+0x2da>
    2656:	44 2d       	mov	r20, r4
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	4f 5f       	subi	r20, 0xFF	; 255
    265c:	5f 4f       	sbci	r21, 0xFF	; 255
    265e:	24 0f       	add	r18, r20
    2660:	35 1f       	adc	r19, r21
    2662:	45 2d       	mov	r20, r5
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	24 17       	cp	r18, r20
    2668:	35 07       	cpc	r19, r21
    266a:	14 f4       	brge	.+4      	; 0x2670 <vfprintf+0x2e8>
    266c:	52 1a       	sub	r5, r18
    266e:	01 c0       	rjmp	.+2      	; 0x2672 <vfprintf+0x2ea>
    2670:	51 2c       	mov	r5, r1
    2672:	87 2d       	mov	r24, r7
    2674:	89 70       	andi	r24, 0x09	; 9
    2676:	49 f4       	brne	.+18     	; 0x268a <vfprintf+0x302>
    2678:	06 c0       	rjmp	.+12     	; 0x2686 <vfprintf+0x2fe>
    267a:	b7 01       	movw	r22, r14
    267c:	80 e2       	ldi	r24, 0x20	; 32
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2684:	5a 94       	dec	r5
    2686:	51 10       	cpse	r5, r1
    2688:	f8 cf       	rjmp	.-16     	; 0x267a <vfprintf+0x2f2>
    268a:	66 20       	and	r6, r6
    268c:	29 f0       	breq	.+10     	; 0x2698 <vfprintf+0x310>
    268e:	b7 01       	movw	r22, r14
    2690:	86 2d       	mov	r24, r6
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2698:	73 fc       	sbrc	r7, 3
    269a:	09 c0       	rjmp	.+18     	; 0x26ae <vfprintf+0x326>
    269c:	06 c0       	rjmp	.+12     	; 0x26aa <vfprintf+0x322>
    269e:	b7 01       	movw	r22, r14
    26a0:	80 e3       	ldi	r24, 0x30	; 48
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    26a8:	5a 94       	dec	r5
    26aa:	51 10       	cpse	r5, r1
    26ac:	f8 cf       	rjmp	.-16     	; 0x269e <vfprintf+0x316>
    26ae:	77 fe       	sbrs	r7, 7
    26b0:	53 c0       	rjmp	.+166    	; 0x2758 <vfprintf+0x3d0>
    26b2:	38 01       	movw	r6, r16
    26b4:	17 ff       	sbrs	r17, 7
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <vfprintf+0x334>
    26b8:	61 2c       	mov	r6, r1
    26ba:	71 2c       	mov	r7, r1
    26bc:	1e 86       	std	Y+14, r1	; 0x0e
    26be:	1d 86       	std	Y+13, r1	; 0x0d
    26c0:	98 01       	movw	r18, r16
    26c2:	23 19       	sub	r18, r3
    26c4:	31 09       	sbc	r19, r1
    26c6:	38 8b       	std	Y+16, r19	; 0x10
    26c8:	2f 87       	std	Y+15, r18	; 0x0f
    26ca:	18 01       	movw	r2, r16
    26cc:	26 18       	sub	r2, r6
    26ce:	37 08       	sbc	r3, r7
    26d0:	28 0c       	add	r2, r8
    26d2:	39 1c       	adc	r3, r9
    26d4:	64 2d       	mov	r22, r4
    26d6:	70 e0       	ldi	r23, 0x00	; 0
    26d8:	22 27       	eor	r18, r18
    26da:	33 27       	eor	r19, r19
    26dc:	26 1b       	sub	r18, r22
    26de:	37 0b       	sbc	r19, r23
    26e0:	3a 8b       	std	Y+18, r19	; 0x12
    26e2:	29 8b       	std	Y+17, r18	; 0x11
    26e4:	3f ef       	ldi	r19, 0xFF	; 255
    26e6:	63 16       	cp	r6, r19
    26e8:	73 06       	cpc	r7, r19
    26ea:	29 f4       	brne	.+10     	; 0x26f6 <vfprintf+0x36e>
    26ec:	b7 01       	movw	r22, r14
    26ee:	8e e2       	ldi	r24, 0x2E	; 46
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    26f6:	06 15       	cp	r16, r6
    26f8:	17 05       	cpc	r17, r7
    26fa:	5c f0       	brlt	.+22     	; 0x2712 <vfprintf+0x38a>
    26fc:	2f 85       	ldd	r18, Y+15	; 0x0f
    26fe:	38 89       	ldd	r19, Y+16	; 0x10
    2700:	26 15       	cp	r18, r6
    2702:	37 05       	cpc	r19, r7
    2704:	34 f4       	brge	.+12     	; 0x2712 <vfprintf+0x38a>
    2706:	ed 85       	ldd	r30, Y+13	; 0x0d
    2708:	fe 85       	ldd	r31, Y+14	; 0x0e
    270a:	e2 0d       	add	r30, r2
    270c:	f3 1d       	adc	r31, r3
    270e:	81 81       	ldd	r24, Z+1	; 0x01
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <vfprintf+0x38c>
    2712:	80 e3       	ldi	r24, 0x30	; 48
    2714:	31 e0       	ldi	r19, 0x01	; 1
    2716:	63 1a       	sub	r6, r19
    2718:	71 08       	sbc	r7, r1
    271a:	2d 85       	ldd	r18, Y+13	; 0x0d
    271c:	3e 85       	ldd	r19, Y+14	; 0x0e
    271e:	2f 5f       	subi	r18, 0xFF	; 255
    2720:	3f 4f       	sbci	r19, 0xFF	; 255
    2722:	3e 87       	std	Y+14, r19	; 0x0e
    2724:	2d 87       	std	Y+13, r18	; 0x0d
    2726:	29 89       	ldd	r18, Y+17	; 0x11
    2728:	3a 89       	ldd	r19, Y+18	; 0x12
    272a:	62 16       	cp	r6, r18
    272c:	73 06       	cpc	r7, r19
    272e:	2c f0       	brlt	.+10     	; 0x273a <vfprintf+0x3b2>
    2730:	b7 01       	movw	r22, r14
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2738:	d5 cf       	rjmp	.-86     	; 0x26e4 <vfprintf+0x35c>
    273a:	60 16       	cp	r6, r16
    273c:	71 06       	cpc	r7, r17
    273e:	49 f4       	brne	.+18     	; 0x2752 <vfprintf+0x3ca>
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
    2742:	96 33       	cpi	r25, 0x36	; 54
    2744:	28 f4       	brcc	.+10     	; 0x2750 <vfprintf+0x3c8>
    2746:	95 33       	cpi	r25, 0x35	; 53
    2748:	21 f4       	brne	.+8      	; 0x2752 <vfprintf+0x3ca>
    274a:	3c 85       	ldd	r19, Y+12	; 0x0c
    274c:	34 fd       	sbrc	r19, 4
    274e:	01 c0       	rjmp	.+2      	; 0x2752 <vfprintf+0x3ca>
    2750:	81 e3       	ldi	r24, 0x31	; 49
    2752:	b7 01       	movw	r22, r14
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	4a c0       	rjmp	.+148    	; 0x27ec <vfprintf+0x464>
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	81 33       	cpi	r24, 0x31	; 49
    275c:	19 f0       	breq	.+6      	; 0x2764 <vfprintf+0x3dc>
    275e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2760:	2f 7e       	andi	r18, 0xEF	; 239
    2762:	2c 87       	std	Y+12, r18	; 0x0c
    2764:	b7 01       	movw	r22, r14
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    276c:	41 10       	cpse	r4, r1
    276e:	05 c0       	rjmp	.+10     	; 0x277a <vfprintf+0x3f2>
    2770:	74 fe       	sbrs	r7, 4
    2772:	16 c0       	rjmp	.+44     	; 0x27a0 <vfprintf+0x418>
    2774:	85 e4       	ldi	r24, 0x45	; 69
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	15 c0       	rjmp	.+42     	; 0x27a4 <vfprintf+0x41c>
    277a:	b7 01       	movw	r22, r14
    277c:	8e e2       	ldi	r24, 0x2E	; 46
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2784:	e2 e0       	ldi	r30, 0x02	; 2
    2786:	6e 2e       	mov	r6, r30
    2788:	f4 01       	movw	r30, r8
    278a:	e6 0d       	add	r30, r6
    278c:	f1 1d       	adc	r31, r1
    278e:	63 94       	inc	r6
    2790:	b7 01       	movw	r22, r14
    2792:	80 81       	ld	r24, Z
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    279a:	4a 94       	dec	r4
    279c:	a9 f7       	brne	.-22     	; 0x2788 <vfprintf+0x400>
    279e:	e8 cf       	rjmp	.-48     	; 0x2770 <vfprintf+0x3e8>
    27a0:	85 e6       	ldi	r24, 0x65	; 101
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	b7 01       	movw	r22, r14
    27a6:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    27aa:	17 fd       	sbrc	r17, 7
    27ac:	06 c0       	rjmp	.+12     	; 0x27ba <vfprintf+0x432>
    27ae:	01 15       	cp	r16, r1
    27b0:	11 05       	cpc	r17, r1
    27b2:	41 f4       	brne	.+16     	; 0x27c4 <vfprintf+0x43c>
    27b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    27b6:	34 ff       	sbrs	r19, 4
    27b8:	05 c0       	rjmp	.+10     	; 0x27c4 <vfprintf+0x43c>
    27ba:	11 95       	neg	r17
    27bc:	01 95       	neg	r16
    27be:	11 09       	sbc	r17, r1
    27c0:	8d e2       	ldi	r24, 0x2D	; 45
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <vfprintf+0x43e>
    27c4:	8b e2       	ldi	r24, 0x2B	; 43
    27c6:	b7 01       	movw	r22, r14
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    27ce:	80 e3       	ldi	r24, 0x30	; 48
    27d0:	03 c0       	rjmp	.+6      	; 0x27d8 <vfprintf+0x450>
    27d2:	8f 5f       	subi	r24, 0xFF	; 255
    27d4:	0a 50       	subi	r16, 0x0A	; 10
    27d6:	11 09       	sbc	r17, r1
    27d8:	0a 30       	cpi	r16, 0x0A	; 10
    27da:	11 05       	cpc	r17, r1
    27dc:	d4 f7       	brge	.-12     	; 0x27d2 <vfprintf+0x44a>
    27de:	b7 01       	movw	r22, r14
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    27e6:	b7 01       	movw	r22, r14
    27e8:	c8 01       	movw	r24, r16
    27ea:	c0 96       	adiw	r24, 0x30	; 48
    27ec:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    27f0:	55 c1       	rjmp	.+682    	; 0x2a9c <vfprintf+0x714>
    27f2:	83 36       	cpi	r24, 0x63	; 99
    27f4:	31 f0       	breq	.+12     	; 0x2802 <vfprintf+0x47a>
    27f6:	83 37       	cpi	r24, 0x73	; 115
    27f8:	81 f0       	breq	.+32     	; 0x281a <vfprintf+0x492>
    27fa:	83 35       	cpi	r24, 0x53	; 83
    27fc:	09 f0       	breq	.+2      	; 0x2800 <vfprintf+0x478>
    27fe:	5e c0       	rjmp	.+188    	; 0x28bc <vfprintf+0x534>
    2800:	24 c0       	rjmp	.+72     	; 0x284a <vfprintf+0x4c2>
    2802:	68 01       	movw	r12, r16
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	c8 0e       	add	r12, r24
    2808:	d1 1c       	adc	r13, r1
    280a:	f8 01       	movw	r30, r16
    280c:	80 81       	ld	r24, Z
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	66 24       	eor	r6, r6
    2812:	63 94       	inc	r6
    2814:	71 2c       	mov	r7, r1
    2816:	84 01       	movw	r16, r8
    2818:	14 c0       	rjmp	.+40     	; 0x2842 <vfprintf+0x4ba>
    281a:	68 01       	movw	r12, r16
    281c:	f2 e0       	ldi	r31, 0x02	; 2
    281e:	cf 0e       	add	r12, r31
    2820:	d1 1c       	adc	r13, r1
    2822:	f8 01       	movw	r30, r16
    2824:	00 81       	ld	r16, Z
    2826:	11 81       	ldd	r17, Z+1	; 0x01
    2828:	26 ff       	sbrs	r18, 6
    282a:	03 c0       	rjmp	.+6      	; 0x2832 <vfprintf+0x4aa>
    282c:	64 2d       	mov	r22, r4
    282e:	70 e0       	ldi	r23, 0x00	; 0
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <vfprintf+0x4ae>
    2832:	6f ef       	ldi	r22, 0xFF	; 255
    2834:	7f ef       	ldi	r23, 0xFF	; 255
    2836:	c8 01       	movw	r24, r16
    2838:	2b 8b       	std	Y+19, r18	; 0x13
    283a:	0e 94 01 17 	call	0x2e02	; 0x2e02 <strnlen>
    283e:	3c 01       	movw	r6, r24
    2840:	2b 89       	ldd	r18, Y+19	; 0x13
    2842:	6f e7       	ldi	r22, 0x7F	; 127
    2844:	46 2e       	mov	r4, r22
    2846:	42 22       	and	r4, r18
    2848:	17 c0       	rjmp	.+46     	; 0x2878 <vfprintf+0x4f0>
    284a:	68 01       	movw	r12, r16
    284c:	f2 e0       	ldi	r31, 0x02	; 2
    284e:	cf 0e       	add	r12, r31
    2850:	d1 1c       	adc	r13, r1
    2852:	f8 01       	movw	r30, r16
    2854:	00 81       	ld	r16, Z
    2856:	11 81       	ldd	r17, Z+1	; 0x01
    2858:	26 ff       	sbrs	r18, 6
    285a:	03 c0       	rjmp	.+6      	; 0x2862 <vfprintf+0x4da>
    285c:	64 2d       	mov	r22, r4
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <vfprintf+0x4de>
    2862:	6f ef       	ldi	r22, 0xFF	; 255
    2864:	7f ef       	ldi	r23, 0xFF	; 255
    2866:	c8 01       	movw	r24, r16
    2868:	2b 8b       	std	Y+19, r18	; 0x13
    286a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <strnlen_P>
    286e:	3c 01       	movw	r6, r24
    2870:	2b 89       	ldd	r18, Y+19	; 0x13
    2872:	50 e8       	ldi	r21, 0x80	; 128
    2874:	45 2e       	mov	r4, r21
    2876:	42 2a       	or	r4, r18
    2878:	43 fc       	sbrc	r4, 3
    287a:	1c c0       	rjmp	.+56     	; 0x28b4 <vfprintf+0x52c>
    287c:	06 c0       	rjmp	.+12     	; 0x288a <vfprintf+0x502>
    287e:	b7 01       	movw	r22, r14
    2880:	80 e2       	ldi	r24, 0x20	; 32
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2888:	5a 94       	dec	r5
    288a:	85 2d       	mov	r24, r5
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	68 16       	cp	r6, r24
    2890:	79 06       	cpc	r7, r25
    2892:	a8 f3       	brcs	.-22     	; 0x287e <vfprintf+0x4f6>
    2894:	0f c0       	rjmp	.+30     	; 0x28b4 <vfprintf+0x52c>
    2896:	f8 01       	movw	r30, r16
    2898:	47 fc       	sbrc	r4, 7
    289a:	85 91       	lpm	r24, Z+
    289c:	47 fe       	sbrs	r4, 7
    289e:	81 91       	ld	r24, Z+
    28a0:	8f 01       	movw	r16, r30
    28a2:	b7 01       	movw	r22, r14
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    28aa:	51 10       	cpse	r5, r1
    28ac:	5a 94       	dec	r5
    28ae:	f1 e0       	ldi	r31, 0x01	; 1
    28b0:	6f 1a       	sub	r6, r31
    28b2:	71 08       	sbc	r7, r1
    28b4:	61 14       	cp	r6, r1
    28b6:	71 04       	cpc	r7, r1
    28b8:	71 f7       	brne	.-36     	; 0x2896 <vfprintf+0x50e>
    28ba:	f0 c0       	rjmp	.+480    	; 0x2a9c <vfprintf+0x714>
    28bc:	84 36       	cpi	r24, 0x64	; 100
    28be:	11 f0       	breq	.+4      	; 0x28c4 <vfprintf+0x53c>
    28c0:	89 36       	cpi	r24, 0x69	; 105
    28c2:	61 f5       	brne	.+88     	; 0x291c <vfprintf+0x594>
    28c4:	68 01       	movw	r12, r16
    28c6:	27 ff       	sbrs	r18, 7
    28c8:	09 c0       	rjmp	.+18     	; 0x28dc <vfprintf+0x554>
    28ca:	34 e0       	ldi	r19, 0x04	; 4
    28cc:	c3 0e       	add	r12, r19
    28ce:	d1 1c       	adc	r13, r1
    28d0:	f8 01       	movw	r30, r16
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	0a c0       	rjmp	.+20     	; 0x28f0 <vfprintf+0x568>
    28dc:	f2 e0       	ldi	r31, 0x02	; 2
    28de:	cf 0e       	add	r12, r31
    28e0:	d1 1c       	adc	r13, r1
    28e2:	f8 01       	movw	r30, r16
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	88 27       	eor	r24, r24
    28ea:	77 fd       	sbrc	r23, 7
    28ec:	80 95       	com	r24
    28ee:	98 2f       	mov	r25, r24
    28f0:	4f e6       	ldi	r20, 0x6F	; 111
    28f2:	74 2e       	mov	r7, r20
    28f4:	72 22       	and	r7, r18
    28f6:	97 ff       	sbrs	r25, 7
    28f8:	09 c0       	rjmp	.+18     	; 0x290c <vfprintf+0x584>
    28fa:	90 95       	com	r25
    28fc:	80 95       	com	r24
    28fe:	70 95       	com	r23
    2900:	61 95       	neg	r22
    2902:	7f 4f       	sbci	r23, 0xFF	; 255
    2904:	8f 4f       	sbci	r24, 0xFF	; 255
    2906:	9f 4f       	sbci	r25, 0xFF	; 255
    2908:	f0 e8       	ldi	r31, 0x80	; 128
    290a:	7f 2a       	or	r7, r31
    290c:	2a e0       	ldi	r18, 0x0A	; 10
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	a4 01       	movw	r20, r8
    2912:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__ultoa_invert>
    2916:	68 2e       	mov	r6, r24
    2918:	68 18       	sub	r6, r8
    291a:	47 c0       	rjmp	.+142    	; 0x29aa <vfprintf+0x622>
    291c:	85 37       	cpi	r24, 0x75	; 117
    291e:	31 f4       	brne	.+12     	; 0x292c <vfprintf+0x5a4>
    2920:	3f ee       	ldi	r19, 0xEF	; 239
    2922:	73 2e       	mov	r7, r19
    2924:	72 22       	and	r7, r18
    2926:	2a e0       	ldi	r18, 0x0A	; 10
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	24 c0       	rjmp	.+72     	; 0x2974 <vfprintf+0x5ec>
    292c:	99 ef       	ldi	r25, 0xF9	; 249
    292e:	79 2e       	mov	r7, r25
    2930:	72 22       	and	r7, r18
    2932:	8f 36       	cpi	r24, 0x6F	; 111
    2934:	b9 f0       	breq	.+46     	; 0x2964 <vfprintf+0x5dc>
    2936:	20 f4       	brcc	.+8      	; 0x2940 <vfprintf+0x5b8>
    2938:	88 35       	cpi	r24, 0x58	; 88
    293a:	09 f0       	breq	.+2      	; 0x293e <vfprintf+0x5b6>
    293c:	b2 c0       	rjmp	.+356    	; 0x2aa2 <vfprintf+0x71a>
    293e:	0d c0       	rjmp	.+26     	; 0x295a <vfprintf+0x5d2>
    2940:	80 37       	cpi	r24, 0x70	; 112
    2942:	21 f0       	breq	.+8      	; 0x294c <vfprintf+0x5c4>
    2944:	88 37       	cpi	r24, 0x78	; 120
    2946:	09 f0       	breq	.+2      	; 0x294a <vfprintf+0x5c2>
    2948:	ac c0       	rjmp	.+344    	; 0x2aa2 <vfprintf+0x71a>
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <vfprintf+0x5c8>
    294c:	20 e1       	ldi	r18, 0x10	; 16
    294e:	72 2a       	or	r7, r18
    2950:	74 fe       	sbrs	r7, 4
    2952:	0b c0       	rjmp	.+22     	; 0x296a <vfprintf+0x5e2>
    2954:	34 e0       	ldi	r19, 0x04	; 4
    2956:	73 2a       	or	r7, r19
    2958:	08 c0       	rjmp	.+16     	; 0x296a <vfprintf+0x5e2>
    295a:	24 ff       	sbrs	r18, 4
    295c:	09 c0       	rjmp	.+18     	; 0x2970 <vfprintf+0x5e8>
    295e:	86 e0       	ldi	r24, 0x06	; 6
    2960:	78 2a       	or	r7, r24
    2962:	06 c0       	rjmp	.+12     	; 0x2970 <vfprintf+0x5e8>
    2964:	28 e0       	ldi	r18, 0x08	; 8
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	05 c0       	rjmp	.+10     	; 0x2974 <vfprintf+0x5ec>
    296a:	20 e1       	ldi	r18, 0x10	; 16
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <vfprintf+0x5ec>
    2970:	20 e1       	ldi	r18, 0x10	; 16
    2972:	32 e0       	ldi	r19, 0x02	; 2
    2974:	68 01       	movw	r12, r16
    2976:	77 fe       	sbrs	r7, 7
    2978:	09 c0       	rjmp	.+18     	; 0x298c <vfprintf+0x604>
    297a:	94 e0       	ldi	r25, 0x04	; 4
    297c:	c9 0e       	add	r12, r25
    297e:	d1 1c       	adc	r13, r1
    2980:	f8 01       	movw	r30, r16
    2982:	60 81       	ld	r22, Z
    2984:	71 81       	ldd	r23, Z+1	; 0x01
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	93 81       	ldd	r25, Z+3	; 0x03
    298a:	08 c0       	rjmp	.+16     	; 0x299c <vfprintf+0x614>
    298c:	f2 e0       	ldi	r31, 0x02	; 2
    298e:	cf 0e       	add	r12, r31
    2990:	d1 1c       	adc	r13, r1
    2992:	f8 01       	movw	r30, r16
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	a4 01       	movw	r20, r8
    299e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__ultoa_invert>
    29a2:	68 2e       	mov	r6, r24
    29a4:	68 18       	sub	r6, r8
    29a6:	ff e7       	ldi	r31, 0x7F	; 127
    29a8:	7f 22       	and	r7, r31
    29aa:	76 fe       	sbrs	r7, 6
    29ac:	0b c0       	rjmp	.+22     	; 0x29c4 <vfprintf+0x63c>
    29ae:	07 2d       	mov	r16, r7
    29b0:	0e 7f       	andi	r16, 0xFE	; 254
    29b2:	64 14       	cp	r6, r4
    29b4:	50 f4       	brcc	.+20     	; 0x29ca <vfprintf+0x642>
    29b6:	74 fe       	sbrs	r7, 4
    29b8:	0a c0       	rjmp	.+20     	; 0x29ce <vfprintf+0x646>
    29ba:	72 fc       	sbrc	r7, 2
    29bc:	08 c0       	rjmp	.+16     	; 0x29ce <vfprintf+0x646>
    29be:	07 2d       	mov	r16, r7
    29c0:	0e 7e       	andi	r16, 0xEE	; 238
    29c2:	05 c0       	rjmp	.+10     	; 0x29ce <vfprintf+0x646>
    29c4:	16 2d       	mov	r17, r6
    29c6:	07 2d       	mov	r16, r7
    29c8:	03 c0       	rjmp	.+6      	; 0x29d0 <vfprintf+0x648>
    29ca:	16 2d       	mov	r17, r6
    29cc:	01 c0       	rjmp	.+2      	; 0x29d0 <vfprintf+0x648>
    29ce:	14 2d       	mov	r17, r4
    29d0:	04 ff       	sbrs	r16, 4
    29d2:	0c c0       	rjmp	.+24     	; 0x29ec <vfprintf+0x664>
    29d4:	fe 01       	movw	r30, r28
    29d6:	e6 0d       	add	r30, r6
    29d8:	f1 1d       	adc	r31, r1
    29da:	80 81       	ld	r24, Z
    29dc:	80 33       	cpi	r24, 0x30	; 48
    29de:	11 f4       	brne	.+4      	; 0x29e4 <vfprintf+0x65c>
    29e0:	09 7e       	andi	r16, 0xE9	; 233
    29e2:	08 c0       	rjmp	.+16     	; 0x29f4 <vfprintf+0x66c>
    29e4:	02 ff       	sbrs	r16, 2
    29e6:	05 c0       	rjmp	.+10     	; 0x29f2 <vfprintf+0x66a>
    29e8:	1e 5f       	subi	r17, 0xFE	; 254
    29ea:	04 c0       	rjmp	.+8      	; 0x29f4 <vfprintf+0x66c>
    29ec:	80 2f       	mov	r24, r16
    29ee:	86 78       	andi	r24, 0x86	; 134
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <vfprintf+0x66c>
    29f2:	1f 5f       	subi	r17, 0xFF	; 255
    29f4:	03 fd       	sbrc	r16, 3
    29f6:	12 c0       	rjmp	.+36     	; 0x2a1c <vfprintf+0x694>
    29f8:	00 ff       	sbrs	r16, 0
    29fa:	0d c0       	rjmp	.+26     	; 0x2a16 <vfprintf+0x68e>
    29fc:	46 2c       	mov	r4, r6
    29fe:	15 15       	cp	r17, r5
    2a00:	50 f4       	brcc	.+20     	; 0x2a16 <vfprintf+0x68e>
    2a02:	45 0c       	add	r4, r5
    2a04:	41 1a       	sub	r4, r17
    2a06:	15 2d       	mov	r17, r5
    2a08:	06 c0       	rjmp	.+12     	; 0x2a16 <vfprintf+0x68e>
    2a0a:	b7 01       	movw	r22, r14
    2a0c:	80 e2       	ldi	r24, 0x20	; 32
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2a14:	1f 5f       	subi	r17, 0xFF	; 255
    2a16:	15 15       	cp	r17, r5
    2a18:	c0 f3       	brcs	.-16     	; 0x2a0a <vfprintf+0x682>
    2a1a:	04 c0       	rjmp	.+8      	; 0x2a24 <vfprintf+0x69c>
    2a1c:	15 15       	cp	r17, r5
    2a1e:	10 f4       	brcc	.+4      	; 0x2a24 <vfprintf+0x69c>
    2a20:	51 1a       	sub	r5, r17
    2a22:	01 c0       	rjmp	.+2      	; 0x2a26 <vfprintf+0x69e>
    2a24:	51 2c       	mov	r5, r1
    2a26:	04 ff       	sbrs	r16, 4
    2a28:	10 c0       	rjmp	.+32     	; 0x2a4a <vfprintf+0x6c2>
    2a2a:	b7 01       	movw	r22, r14
    2a2c:	80 e3       	ldi	r24, 0x30	; 48
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2a34:	02 ff       	sbrs	r16, 2
    2a36:	1e c0       	rjmp	.+60     	; 0x2a74 <vfprintf+0x6ec>
    2a38:	01 ff       	sbrs	r16, 1
    2a3a:	03 c0       	rjmp	.+6      	; 0x2a42 <vfprintf+0x6ba>
    2a3c:	88 e5       	ldi	r24, 0x58	; 88
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <vfprintf+0x6be>
    2a42:	88 e7       	ldi	r24, 0x78	; 120
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	b7 01       	movw	r22, r14
    2a48:	0c c0       	rjmp	.+24     	; 0x2a62 <vfprintf+0x6da>
    2a4a:	80 2f       	mov	r24, r16
    2a4c:	86 78       	andi	r24, 0x86	; 134
    2a4e:	91 f0       	breq	.+36     	; 0x2a74 <vfprintf+0x6ec>
    2a50:	01 fd       	sbrc	r16, 1
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <vfprintf+0x6d0>
    2a54:	80 e2       	ldi	r24, 0x20	; 32
    2a56:	01 c0       	rjmp	.+2      	; 0x2a5a <vfprintf+0x6d2>
    2a58:	8b e2       	ldi	r24, 0x2B	; 43
    2a5a:	07 fd       	sbrc	r16, 7
    2a5c:	8d e2       	ldi	r24, 0x2D	; 45
    2a5e:	b7 01       	movw	r22, r14
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2a66:	06 c0       	rjmp	.+12     	; 0x2a74 <vfprintf+0x6ec>
    2a68:	b7 01       	movw	r22, r14
    2a6a:	80 e3       	ldi	r24, 0x30	; 48
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2a72:	4a 94       	dec	r4
    2a74:	64 14       	cp	r6, r4
    2a76:	c0 f3       	brcs	.-16     	; 0x2a68 <vfprintf+0x6e0>
    2a78:	6a 94       	dec	r6
    2a7a:	f4 01       	movw	r30, r8
    2a7c:	e6 0d       	add	r30, r6
    2a7e:	f1 1d       	adc	r31, r1
    2a80:	b7 01       	movw	r22, r14
    2a82:	80 81       	ld	r24, Z
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2a8a:	61 10       	cpse	r6, r1
    2a8c:	f5 cf       	rjmp	.-22     	; 0x2a78 <vfprintf+0x6f0>
    2a8e:	06 c0       	rjmp	.+12     	; 0x2a9c <vfprintf+0x714>
    2a90:	b7 01       	movw	r22, r14
    2a92:	80 e2       	ldi	r24, 0x20	; 32
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <fputc>
    2a9a:	5a 94       	dec	r5
    2a9c:	51 10       	cpse	r5, r1
    2a9e:	f8 cf       	rjmp	.-16     	; 0x2a90 <vfprintf+0x708>
    2aa0:	97 cc       	rjmp	.-1746   	; 0x23d0 <vfprintf+0x48>
    2aa2:	f7 01       	movw	r30, r14
    2aa4:	26 81       	ldd	r18, Z+6	; 0x06
    2aa6:	37 81       	ldd	r19, Z+7	; 0x07
    2aa8:	02 c0       	rjmp	.+4      	; 0x2aae <vfprintf+0x726>
    2aaa:	2f ef       	ldi	r18, 0xFF	; 255
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	c9 01       	movw	r24, r18
    2ab0:	63 96       	adiw	r28, 0x13	; 19
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	ef 90       	pop	r14
    2ac8:	df 90       	pop	r13
    2aca:	cf 90       	pop	r12
    2acc:	bf 90       	pop	r11
    2ace:	af 90       	pop	r10
    2ad0:	9f 90       	pop	r9
    2ad2:	8f 90       	pop	r8
    2ad4:	7f 90       	pop	r7
    2ad6:	6f 90       	pop	r6
    2ad8:	5f 90       	pop	r5
    2ada:	4f 90       	pop	r4
    2adc:	3f 90       	pop	r3
    2ade:	2f 90       	pop	r2
    2ae0:	08 95       	ret

00002ae2 <main>:
int main(void)
{
	//
	// init IO ports
	//
	DDRB=0xff; // all outputs
    2ae2:	8f ef       	ldi	r24, 0xFF	; 255
    2ae4:	84 b9       	out	0x04, r24	; 4
	DDRE=0x02; // all inputs TX0 output
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	8d b9       	out	0x0d, r24	; 13
	DDRJ=0x02; // all inputs TX3 output
    2aea:	80 93 04 01 	sts	0x0104, r24
	DDRF=0x00; // all inputs
    2aee:	10 ba       	out	0x10, r1	; 16

	// input pins and input interrupts
	DDRK=0x00; // all inputs
    2af0:	10 92 07 01 	sts	0x0107, r1
	PCMSK2=_BV(PCINT23)|_BV(PCINT22); // enable interrupts on PCINT23:22
    2af4:	80 ec       	ldi	r24, 0xC0	; 192
    2af6:	80 93 6d 00 	sts	0x006D, r24
	PCICR=_BV(PCIE2); // enable PCINT23:16
    2afa:	84 e0       	ldi	r24, 0x04	; 4
    2afc:	80 93 68 00 	sts	0x0068, r24

	sei();
    2b00:	78 94       	sei
	usart0_Init(57600);
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	91 ee       	ldi	r25, 0xE1	; 225
    2b06:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <usart0_Init>
	//usart1_Init();
	usart2_Init(57600);
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	91 ee       	ldi	r25, 0xE1	; 225
    2b0e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <usart2_Init>
	adcInit();
    2b12:	0e 94 df 03 	call	0x7be	; 0x7be <adcInit>
	timersInit();
    2b16:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <timersInit>

	initGPS(usart3_Init,usart3_Tx);
    2b1a:	69 e7       	ldi	r22, 0x79	; 121
    2b1c:	70 e1       	ldi	r23, 0x10	; 16
    2b1e:	86 e4       	ldi	r24, 0x46	; 70
    2b20:	90 e1       	ldi	r25, 0x10	; 16
    2b22:	0e 94 17 04 	call	0x82e	; 0x82e <initGPS>

	while (1)
	{
		control();
    2b26:	0e 94 14 02 	call	0x428	; 0x428 <control>
    2b2a:	fd cf       	rjmp	.-6      	; 0x2b26 <main+0x44>

00002b2c <__usmulhisi3>:
    2b2c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__umulhisi3>

00002b30 <__usmulhisi3_tail>:
    2b30:	b7 ff       	sbrs	r27, 7
    2b32:	08 95       	ret
    2b34:	82 1b       	sub	r24, r18
    2b36:	93 0b       	sbc	r25, r19
    2b38:	08 95       	ret

00002b3a <__divmodsi4>:
    2b3a:	05 2e       	mov	r0, r21
    2b3c:	97 fb       	bst	r25, 7
    2b3e:	16 f4       	brtc	.+4      	; 0x2b44 <__divmodsi4+0xa>
    2b40:	00 94       	com	r0
    2b42:	07 d0       	rcall	.+14     	; 0x2b52 <__divmodsi4_neg1>
    2b44:	57 fd       	sbrc	r21, 7
    2b46:	0d d0       	rcall	.+26     	; 0x2b62 <__divmodsi4_neg2>
    2b48:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <__udivmodsi4>
    2b4c:	07 fc       	sbrc	r0, 7
    2b4e:	09 d0       	rcall	.+18     	; 0x2b62 <__divmodsi4_neg2>
    2b50:	7e f4       	brtc	.+30     	; 0x2b70 <__divmodsi4_exit>

00002b52 <__divmodsi4_neg1>:
    2b52:	90 95       	com	r25
    2b54:	80 95       	com	r24
    2b56:	70 95       	com	r23
    2b58:	61 95       	neg	r22
    2b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b60:	08 95       	ret

00002b62 <__divmodsi4_neg2>:
    2b62:	50 95       	com	r21
    2b64:	40 95       	com	r20
    2b66:	30 95       	com	r19
    2b68:	21 95       	neg	r18
    2b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6c:	4f 4f       	sbci	r20, 0xFF	; 255
    2b6e:	5f 4f       	sbci	r21, 0xFF	; 255

00002b70 <__divmodsi4_exit>:
    2b70:	08 95       	ret

00002b72 <__umulhisi3>:
    2b72:	a2 9f       	mul	r26, r18
    2b74:	b0 01       	movw	r22, r0
    2b76:	b3 9f       	mul	r27, r19
    2b78:	c0 01       	movw	r24, r0
    2b7a:	a3 9f       	mul	r26, r19
    2b7c:	01 d0       	rcall	.+2      	; 0x2b80 <__umulhisi3+0xe>
    2b7e:	b2 9f       	mul	r27, r18
    2b80:	70 0d       	add	r23, r0
    2b82:	81 1d       	adc	r24, r1
    2b84:	11 24       	eor	r1, r1
    2b86:	91 1d       	adc	r25, r1
    2b88:	08 95       	ret

00002b8a <__udivmodsi4>:
    2b8a:	a1 e2       	ldi	r26, 0x21	; 33
    2b8c:	1a 2e       	mov	r1, r26
    2b8e:	aa 1b       	sub	r26, r26
    2b90:	bb 1b       	sub	r27, r27
    2b92:	fd 01       	movw	r30, r26
    2b94:	0d c0       	rjmp	.+26     	; 0x2bb0 <__udivmodsi4_ep>

00002b96 <__udivmodsi4_loop>:
    2b96:	aa 1f       	adc	r26, r26
    2b98:	bb 1f       	adc	r27, r27
    2b9a:	ee 1f       	adc	r30, r30
    2b9c:	ff 1f       	adc	r31, r31
    2b9e:	a2 17       	cp	r26, r18
    2ba0:	b3 07       	cpc	r27, r19
    2ba2:	e4 07       	cpc	r30, r20
    2ba4:	f5 07       	cpc	r31, r21
    2ba6:	20 f0       	brcs	.+8      	; 0x2bb0 <__udivmodsi4_ep>
    2ba8:	a2 1b       	sub	r26, r18
    2baa:	b3 0b       	sbc	r27, r19
    2bac:	e4 0b       	sbc	r30, r20
    2bae:	f5 0b       	sbc	r31, r21

00002bb0 <__udivmodsi4_ep>:
    2bb0:	66 1f       	adc	r22, r22
    2bb2:	77 1f       	adc	r23, r23
    2bb4:	88 1f       	adc	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	1a 94       	dec	r1
    2bba:	69 f7       	brne	.-38     	; 0x2b96 <__udivmodsi4_loop>
    2bbc:	60 95       	com	r22
    2bbe:	70 95       	com	r23
    2bc0:	80 95       	com	r24
    2bc2:	90 95       	com	r25
    2bc4:	9b 01       	movw	r18, r22
    2bc6:	ac 01       	movw	r20, r24
    2bc8:	bd 01       	movw	r22, r26
    2bca:	cf 01       	movw	r24, r30
    2bcc:	08 95       	ret

00002bce <__prologue_saves__>:
    2bce:	2f 92       	push	r2
    2bd0:	3f 92       	push	r3
    2bd2:	4f 92       	push	r4
    2bd4:	5f 92       	push	r5
    2bd6:	6f 92       	push	r6
    2bd8:	7f 92       	push	r7
    2bda:	8f 92       	push	r8
    2bdc:	9f 92       	push	r9
    2bde:	af 92       	push	r10
    2be0:	bf 92       	push	r11
    2be2:	cf 92       	push	r12
    2be4:	df 92       	push	r13
    2be6:	ef 92       	push	r14
    2be8:	ff 92       	push	r15
    2bea:	0f 93       	push	r16
    2bec:	1f 93       	push	r17
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	ca 1b       	sub	r28, r26
    2bf8:	db 0b       	sbc	r29, r27
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	19 94       	eijmp

00002c06 <__epilogue_restores__>:
    2c06:	2a 88       	ldd	r2, Y+18	; 0x12
    2c08:	39 88       	ldd	r3, Y+17	; 0x11
    2c0a:	48 88       	ldd	r4, Y+16	; 0x10
    2c0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c10:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c12:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c14:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c16:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c18:	b9 84       	ldd	r11, Y+9	; 0x09
    2c1a:	c8 84       	ldd	r12, Y+8	; 0x08
    2c1c:	df 80       	ldd	r13, Y+7	; 0x07
    2c1e:	ee 80       	ldd	r14, Y+6	; 0x06
    2c20:	fd 80       	ldd	r15, Y+5	; 0x05
    2c22:	0c 81       	ldd	r16, Y+4	; 0x04
    2c24:	1b 81       	ldd	r17, Y+3	; 0x03
    2c26:	aa 81       	ldd	r26, Y+2	; 0x02
    2c28:	b9 81       	ldd	r27, Y+1	; 0x01
    2c2a:	ce 0f       	add	r28, r30
    2c2c:	d1 1d       	adc	r29, r1
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	ed 01       	movw	r28, r26
    2c3a:	08 95       	ret

00002c3c <__ftoa_engine>:
    2c3c:	28 30       	cpi	r18, 0x08	; 8
    2c3e:	08 f0       	brcs	.+2      	; 0x2c42 <__ftoa_engine+0x6>
    2c40:	27 e0       	ldi	r18, 0x07	; 7
    2c42:	33 27       	eor	r19, r19
    2c44:	da 01       	movw	r26, r20
    2c46:	99 0f       	add	r25, r25
    2c48:	31 1d       	adc	r19, r1
    2c4a:	87 fd       	sbrc	r24, 7
    2c4c:	91 60       	ori	r25, 0x01	; 1
    2c4e:	00 96       	adiw	r24, 0x00	; 0
    2c50:	61 05       	cpc	r22, r1
    2c52:	71 05       	cpc	r23, r1
    2c54:	39 f4       	brne	.+14     	; 0x2c64 <__ftoa_engine+0x28>
    2c56:	32 60       	ori	r19, 0x02	; 2
    2c58:	2e 5f       	subi	r18, 0xFE	; 254
    2c5a:	3d 93       	st	X+, r19
    2c5c:	30 e3       	ldi	r19, 0x30	; 48
    2c5e:	2a 95       	dec	r18
    2c60:	e1 f7       	brne	.-8      	; 0x2c5a <__ftoa_engine+0x1e>
    2c62:	08 95       	ret
    2c64:	9f 3f       	cpi	r25, 0xFF	; 255
    2c66:	30 f0       	brcs	.+12     	; 0x2c74 <__ftoa_engine+0x38>
    2c68:	80 38       	cpi	r24, 0x80	; 128
    2c6a:	71 05       	cpc	r23, r1
    2c6c:	61 05       	cpc	r22, r1
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <__ftoa_engine+0x36>
    2c70:	3c 5f       	subi	r19, 0xFC	; 252
    2c72:	3c 5f       	subi	r19, 0xFC	; 252
    2c74:	3d 93       	st	X+, r19
    2c76:	91 30       	cpi	r25, 0x01	; 1
    2c78:	08 f0       	brcs	.+2      	; 0x2c7c <__ftoa_engine+0x40>
    2c7a:	80 68       	ori	r24, 0x80	; 128
    2c7c:	91 1d       	adc	r25, r1
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	1f 93       	push	r17
    2c84:	0f 93       	push	r16
    2c86:	ff 92       	push	r15
    2c88:	ef 92       	push	r14
    2c8a:	19 2f       	mov	r17, r25
    2c8c:	98 7f       	andi	r25, 0xF8	; 248
    2c8e:	96 95       	lsr	r25
    2c90:	e9 2f       	mov	r30, r25
    2c92:	96 95       	lsr	r25
    2c94:	96 95       	lsr	r25
    2c96:	e9 0f       	add	r30, r25
    2c98:	ff 27       	eor	r31, r31
    2c9a:	ea 5b       	subi	r30, 0xBA	; 186
    2c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c9e:	99 27       	eor	r25, r25
    2ca0:	33 27       	eor	r19, r19
    2ca2:	ee 24       	eor	r14, r14
    2ca4:	ff 24       	eor	r15, r15
    2ca6:	a7 01       	movw	r20, r14
    2ca8:	e7 01       	movw	r28, r14
    2caa:	05 90       	lpm	r0, Z+
    2cac:	08 94       	sec
    2cae:	07 94       	ror	r0
    2cb0:	28 f4       	brcc	.+10     	; 0x2cbc <__ftoa_engine+0x80>
    2cb2:	36 0f       	add	r19, r22
    2cb4:	e7 1e       	adc	r14, r23
    2cb6:	f8 1e       	adc	r15, r24
    2cb8:	49 1f       	adc	r20, r25
    2cba:	51 1d       	adc	r21, r1
    2cbc:	66 0f       	add	r22, r22
    2cbe:	77 1f       	adc	r23, r23
    2cc0:	88 1f       	adc	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	06 94       	lsr	r0
    2cc6:	a1 f7       	brne	.-24     	; 0x2cb0 <__ftoa_engine+0x74>
    2cc8:	05 90       	lpm	r0, Z+
    2cca:	07 94       	ror	r0
    2ccc:	28 f4       	brcc	.+10     	; 0x2cd8 <__ftoa_engine+0x9c>
    2cce:	e7 0e       	add	r14, r23
    2cd0:	f8 1e       	adc	r15, r24
    2cd2:	49 1f       	adc	r20, r25
    2cd4:	56 1f       	adc	r21, r22
    2cd6:	c1 1d       	adc	r28, r1
    2cd8:	77 0f       	add	r23, r23
    2cda:	88 1f       	adc	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	66 1f       	adc	r22, r22
    2ce0:	06 94       	lsr	r0
    2ce2:	a1 f7       	brne	.-24     	; 0x2ccc <__ftoa_engine+0x90>
    2ce4:	05 90       	lpm	r0, Z+
    2ce6:	07 94       	ror	r0
    2ce8:	28 f4       	brcc	.+10     	; 0x2cf4 <__ftoa_engine+0xb8>
    2cea:	f8 0e       	add	r15, r24
    2cec:	49 1f       	adc	r20, r25
    2cee:	56 1f       	adc	r21, r22
    2cf0:	c7 1f       	adc	r28, r23
    2cf2:	d1 1d       	adc	r29, r1
    2cf4:	88 0f       	add	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	66 1f       	adc	r22, r22
    2cfa:	77 1f       	adc	r23, r23
    2cfc:	06 94       	lsr	r0
    2cfe:	a1 f7       	brne	.-24     	; 0x2ce8 <__ftoa_engine+0xac>
    2d00:	05 90       	lpm	r0, Z+
    2d02:	07 94       	ror	r0
    2d04:	20 f4       	brcc	.+8      	; 0x2d0e <__ftoa_engine+0xd2>
    2d06:	49 0f       	add	r20, r25
    2d08:	56 1f       	adc	r21, r22
    2d0a:	c7 1f       	adc	r28, r23
    2d0c:	d8 1f       	adc	r29, r24
    2d0e:	99 0f       	add	r25, r25
    2d10:	66 1f       	adc	r22, r22
    2d12:	77 1f       	adc	r23, r23
    2d14:	88 1f       	adc	r24, r24
    2d16:	06 94       	lsr	r0
    2d18:	a9 f7       	brne	.-22     	; 0x2d04 <__ftoa_engine+0xc8>
    2d1a:	84 91       	lpm	r24, Z+
    2d1c:	10 95       	com	r17
    2d1e:	17 70       	andi	r17, 0x07	; 7
    2d20:	41 f0       	breq	.+16     	; 0x2d32 <__ftoa_engine+0xf6>
    2d22:	d6 95       	lsr	r29
    2d24:	c7 95       	ror	r28
    2d26:	57 95       	ror	r21
    2d28:	47 95       	ror	r20
    2d2a:	f7 94       	ror	r15
    2d2c:	e7 94       	ror	r14
    2d2e:	1a 95       	dec	r17
    2d30:	c1 f7       	brne	.-16     	; 0x2d22 <__ftoa_engine+0xe6>
    2d32:	ec ee       	ldi	r30, 0xEC	; 236
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	68 94       	set
    2d38:	15 90       	lpm	r1, Z+
    2d3a:	15 91       	lpm	r17, Z+
    2d3c:	35 91       	lpm	r19, Z+
    2d3e:	65 91       	lpm	r22, Z+
    2d40:	95 91       	lpm	r25, Z+
    2d42:	05 90       	lpm	r0, Z+
    2d44:	7f e2       	ldi	r23, 0x2F	; 47
    2d46:	73 95       	inc	r23
    2d48:	e1 18       	sub	r14, r1
    2d4a:	f1 0a       	sbc	r15, r17
    2d4c:	43 0b       	sbc	r20, r19
    2d4e:	56 0b       	sbc	r21, r22
    2d50:	c9 0b       	sbc	r28, r25
    2d52:	d0 09       	sbc	r29, r0
    2d54:	c0 f7       	brcc	.-16     	; 0x2d46 <__ftoa_engine+0x10a>
    2d56:	e1 0c       	add	r14, r1
    2d58:	f1 1e       	adc	r15, r17
    2d5a:	43 1f       	adc	r20, r19
    2d5c:	56 1f       	adc	r21, r22
    2d5e:	c9 1f       	adc	r28, r25
    2d60:	d0 1d       	adc	r29, r0
    2d62:	7e f4       	brtc	.+30     	; 0x2d82 <__ftoa_engine+0x146>
    2d64:	70 33       	cpi	r23, 0x30	; 48
    2d66:	11 f4       	brne	.+4      	; 0x2d6c <__ftoa_engine+0x130>
    2d68:	8a 95       	dec	r24
    2d6a:	e6 cf       	rjmp	.-52     	; 0x2d38 <__ftoa_engine+0xfc>
    2d6c:	e8 94       	clt
    2d6e:	01 50       	subi	r16, 0x01	; 1
    2d70:	30 f0       	brcs	.+12     	; 0x2d7e <__ftoa_engine+0x142>
    2d72:	08 0f       	add	r16, r24
    2d74:	0a f4       	brpl	.+2      	; 0x2d78 <__ftoa_engine+0x13c>
    2d76:	00 27       	eor	r16, r16
    2d78:	02 17       	cp	r16, r18
    2d7a:	08 f4       	brcc	.+2      	; 0x2d7e <__ftoa_engine+0x142>
    2d7c:	20 2f       	mov	r18, r16
    2d7e:	23 95       	inc	r18
    2d80:	02 2f       	mov	r16, r18
    2d82:	7a 33       	cpi	r23, 0x3A	; 58
    2d84:	28 f0       	brcs	.+10     	; 0x2d90 <__ftoa_engine+0x154>
    2d86:	79 e3       	ldi	r23, 0x39	; 57
    2d88:	7d 93       	st	X+, r23
    2d8a:	2a 95       	dec	r18
    2d8c:	e9 f7       	brne	.-6      	; 0x2d88 <__ftoa_engine+0x14c>
    2d8e:	10 c0       	rjmp	.+32     	; 0x2db0 <__ftoa_engine+0x174>
    2d90:	7d 93       	st	X+, r23
    2d92:	2a 95       	dec	r18
    2d94:	89 f6       	brne	.-94     	; 0x2d38 <__ftoa_engine+0xfc>
    2d96:	06 94       	lsr	r0
    2d98:	97 95       	ror	r25
    2d9a:	67 95       	ror	r22
    2d9c:	37 95       	ror	r19
    2d9e:	17 95       	ror	r17
    2da0:	17 94       	ror	r1
    2da2:	e1 18       	sub	r14, r1
    2da4:	f1 0a       	sbc	r15, r17
    2da6:	43 0b       	sbc	r20, r19
    2da8:	56 0b       	sbc	r21, r22
    2daa:	c9 0b       	sbc	r28, r25
    2dac:	d0 09       	sbc	r29, r0
    2dae:	98 f0       	brcs	.+38     	; 0x2dd6 <__ftoa_engine+0x19a>
    2db0:	23 95       	inc	r18
    2db2:	7e 91       	ld	r23, -X
    2db4:	73 95       	inc	r23
    2db6:	7a 33       	cpi	r23, 0x3A	; 58
    2db8:	08 f0       	brcs	.+2      	; 0x2dbc <__ftoa_engine+0x180>
    2dba:	70 e3       	ldi	r23, 0x30	; 48
    2dbc:	7c 93       	st	X, r23
    2dbe:	20 13       	cpse	r18, r16
    2dc0:	b8 f7       	brcc	.-18     	; 0x2db0 <__ftoa_engine+0x174>
    2dc2:	7e 91       	ld	r23, -X
    2dc4:	70 61       	ori	r23, 0x10	; 16
    2dc6:	7d 93       	st	X+, r23
    2dc8:	30 f0       	brcs	.+12     	; 0x2dd6 <__ftoa_engine+0x19a>
    2dca:	83 95       	inc	r24
    2dcc:	71 e3       	ldi	r23, 0x31	; 49
    2dce:	7d 93       	st	X+, r23
    2dd0:	70 e3       	ldi	r23, 0x30	; 48
    2dd2:	2a 95       	dec	r18
    2dd4:	e1 f7       	brne	.-8      	; 0x2dce <__ftoa_engine+0x192>
    2dd6:	11 24       	eor	r1, r1
    2dd8:	ef 90       	pop	r14
    2dda:	ff 90       	pop	r15
    2ddc:	0f 91       	pop	r16
    2dde:	1f 91       	pop	r17
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	99 27       	eor	r25, r25
    2de6:	87 fd       	sbrc	r24, 7
    2de8:	90 95       	com	r25
    2dea:	08 95       	ret

00002dec <strnlen_P>:
    2dec:	fc 01       	movw	r30, r24
    2dee:	05 90       	lpm	r0, Z+
    2df0:	61 50       	subi	r22, 0x01	; 1
    2df2:	70 40       	sbci	r23, 0x00	; 0
    2df4:	01 10       	cpse	r0, r1
    2df6:	d8 f7       	brcc	.-10     	; 0x2dee <strnlen_P+0x2>
    2df8:	80 95       	com	r24
    2dfa:	90 95       	com	r25
    2dfc:	8e 0f       	add	r24, r30
    2dfe:	9f 1f       	adc	r25, r31
    2e00:	08 95       	ret

00002e02 <strnlen>:
    2e02:	fc 01       	movw	r30, r24
    2e04:	61 50       	subi	r22, 0x01	; 1
    2e06:	70 40       	sbci	r23, 0x00	; 0
    2e08:	01 90       	ld	r0, Z+
    2e0a:	01 10       	cpse	r0, r1
    2e0c:	d8 f7       	brcc	.-10     	; 0x2e04 <strnlen+0x2>
    2e0e:	80 95       	com	r24
    2e10:	90 95       	com	r25
    2e12:	8e 0f       	add	r24, r30
    2e14:	9f 1f       	adc	r25, r31
    2e16:	08 95       	ret

00002e18 <fputc>:
    2e18:	0f 93       	push	r16
    2e1a:	1f 93       	push	r17
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	8c 01       	movw	r16, r24
    2e22:	eb 01       	movw	r28, r22
    2e24:	8b 81       	ldd	r24, Y+3	; 0x03
    2e26:	81 fd       	sbrc	r24, 1
    2e28:	03 c0       	rjmp	.+6      	; 0x2e30 <fputc+0x18>
    2e2a:	0f ef       	ldi	r16, 0xFF	; 255
    2e2c:	1f ef       	ldi	r17, 0xFF	; 255
    2e2e:	1a c0       	rjmp	.+52     	; 0x2e64 <fputc+0x4c>
    2e30:	82 ff       	sbrs	r24, 2
    2e32:	0d c0       	rjmp	.+26     	; 0x2e4e <fputc+0x36>
    2e34:	2e 81       	ldd	r18, Y+6	; 0x06
    2e36:	3f 81       	ldd	r19, Y+7	; 0x07
    2e38:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3c:	28 17       	cp	r18, r24
    2e3e:	39 07       	cpc	r19, r25
    2e40:	64 f4       	brge	.+24     	; 0x2e5a <fputc+0x42>
    2e42:	e8 81       	ld	r30, Y
    2e44:	f9 81       	ldd	r31, Y+1	; 0x01
    2e46:	01 93       	st	Z+, r16
    2e48:	f9 83       	std	Y+1, r31	; 0x01
    2e4a:	e8 83       	st	Y, r30
    2e4c:	06 c0       	rjmp	.+12     	; 0x2e5a <fputc+0x42>
    2e4e:	e8 85       	ldd	r30, Y+8	; 0x08
    2e50:	f9 85       	ldd	r31, Y+9	; 0x09
    2e52:	80 2f       	mov	r24, r16
    2e54:	19 95       	eicall
    2e56:	89 2b       	or	r24, r25
    2e58:	41 f7       	brne	.-48     	; 0x2e2a <fputc+0x12>
    2e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e5c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e5e:	01 96       	adiw	r24, 0x01	; 1
    2e60:	9f 83       	std	Y+7, r25	; 0x07
    2e62:	8e 83       	std	Y+6, r24	; 0x06
    2e64:	c8 01       	movw	r24, r16
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	1f 91       	pop	r17
    2e6c:	0f 91       	pop	r16
    2e6e:	08 95       	ret

00002e70 <sprintf>:
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	60 97       	sbiw	r28, 0x10	; 16
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	08 8d       	ldd	r16, Y+24	; 0x18
    2e8a:	19 8d       	ldd	r17, Y+25	; 0x19
    2e8c:	86 e0       	ldi	r24, 0x06	; 6
    2e8e:	8c 83       	std	Y+4, r24	; 0x04
    2e90:	1a 83       	std	Y+2, r17	; 0x02
    2e92:	09 83       	std	Y+1, r16	; 0x01
    2e94:	8f ef       	ldi	r24, 0xFF	; 255
    2e96:	9f e7       	ldi	r25, 0x7F	; 127
    2e98:	9e 83       	std	Y+6, r25	; 0x06
    2e9a:	8d 83       	std	Y+5, r24	; 0x05
    2e9c:	ae 01       	movw	r20, r28
    2e9e:	44 5e       	subi	r20, 0xE4	; 228
    2ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ea2:	58 8b       	std	Y+16, r21	; 0x10
    2ea4:	4f 87       	std	Y+15, r20	; 0x0f
    2ea6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ea8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2eaa:	ce 01       	movw	r24, r28
    2eac:	01 96       	adiw	r24, 0x01	; 1
    2eae:	0e 94 c4 11 	call	0x2388	; 0x2388 <vfprintf>
    2eb2:	ef 81       	ldd	r30, Y+7	; 0x07
    2eb4:	f8 85       	ldd	r31, Y+8	; 0x08
    2eb6:	e0 0f       	add	r30, r16
    2eb8:	f1 1f       	adc	r31, r17
    2eba:	10 82       	st	Z, r1
    2ebc:	60 96       	adiw	r28, 0x10	; 16
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	df 91       	pop	r29
    2eca:	cf 91       	pop	r28
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	08 95       	ret

00002ed2 <__ultoa_invert>:
    2ed2:	fa 01       	movw	r30, r20
    2ed4:	aa 27       	eor	r26, r26
    2ed6:	28 30       	cpi	r18, 0x08	; 8
    2ed8:	51 f1       	breq	.+84     	; 0x2f2e <__ultoa_invert+0x5c>
    2eda:	20 31       	cpi	r18, 0x10	; 16
    2edc:	81 f1       	breq	.+96     	; 0x2f3e <__ultoa_invert+0x6c>
    2ede:	e8 94       	clt
    2ee0:	6f 93       	push	r22
    2ee2:	6e 7f       	andi	r22, 0xFE	; 254
    2ee4:	6e 5f       	subi	r22, 0xFE	; 254
    2ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee8:	8f 4f       	sbci	r24, 0xFF	; 255
    2eea:	9f 4f       	sbci	r25, 0xFF	; 255
    2eec:	af 4f       	sbci	r26, 0xFF	; 255
    2eee:	b1 e0       	ldi	r27, 0x01	; 1
    2ef0:	3e d0       	rcall	.+124    	; 0x2f6e <__ultoa_invert+0x9c>
    2ef2:	b4 e0       	ldi	r27, 0x04	; 4
    2ef4:	3c d0       	rcall	.+120    	; 0x2f6e <__ultoa_invert+0x9c>
    2ef6:	67 0f       	add	r22, r23
    2ef8:	78 1f       	adc	r23, r24
    2efa:	89 1f       	adc	r24, r25
    2efc:	9a 1f       	adc	r25, r26
    2efe:	a1 1d       	adc	r26, r1
    2f00:	68 0f       	add	r22, r24
    2f02:	79 1f       	adc	r23, r25
    2f04:	8a 1f       	adc	r24, r26
    2f06:	91 1d       	adc	r25, r1
    2f08:	a1 1d       	adc	r26, r1
    2f0a:	6a 0f       	add	r22, r26
    2f0c:	71 1d       	adc	r23, r1
    2f0e:	81 1d       	adc	r24, r1
    2f10:	91 1d       	adc	r25, r1
    2f12:	a1 1d       	adc	r26, r1
    2f14:	20 d0       	rcall	.+64     	; 0x2f56 <__ultoa_invert+0x84>
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <__ultoa_invert+0x48>
    2f18:	68 94       	set
    2f1a:	3f 91       	pop	r19
    2f1c:	2a e0       	ldi	r18, 0x0A	; 10
    2f1e:	26 9f       	mul	r18, r22
    2f20:	11 24       	eor	r1, r1
    2f22:	30 19       	sub	r19, r0
    2f24:	30 5d       	subi	r19, 0xD0	; 208
    2f26:	31 93       	st	Z+, r19
    2f28:	de f6       	brtc	.-74     	; 0x2ee0 <__ultoa_invert+0xe>
    2f2a:	cf 01       	movw	r24, r30
    2f2c:	08 95       	ret
    2f2e:	46 2f       	mov	r20, r22
    2f30:	47 70       	andi	r20, 0x07	; 7
    2f32:	40 5d       	subi	r20, 0xD0	; 208
    2f34:	41 93       	st	Z+, r20
    2f36:	b3 e0       	ldi	r27, 0x03	; 3
    2f38:	0f d0       	rcall	.+30     	; 0x2f58 <__ultoa_invert+0x86>
    2f3a:	c9 f7       	brne	.-14     	; 0x2f2e <__ultoa_invert+0x5c>
    2f3c:	f6 cf       	rjmp	.-20     	; 0x2f2a <__ultoa_invert+0x58>
    2f3e:	46 2f       	mov	r20, r22
    2f40:	4f 70       	andi	r20, 0x0F	; 15
    2f42:	40 5d       	subi	r20, 0xD0	; 208
    2f44:	4a 33       	cpi	r20, 0x3A	; 58
    2f46:	18 f0       	brcs	.+6      	; 0x2f4e <__ultoa_invert+0x7c>
    2f48:	49 5d       	subi	r20, 0xD9	; 217
    2f4a:	31 fd       	sbrc	r19, 1
    2f4c:	40 52       	subi	r20, 0x20	; 32
    2f4e:	41 93       	st	Z+, r20
    2f50:	02 d0       	rcall	.+4      	; 0x2f56 <__ultoa_invert+0x84>
    2f52:	a9 f7       	brne	.-22     	; 0x2f3e <__ultoa_invert+0x6c>
    2f54:	ea cf       	rjmp	.-44     	; 0x2f2a <__ultoa_invert+0x58>
    2f56:	b4 e0       	ldi	r27, 0x04	; 4
    2f58:	a6 95       	lsr	r26
    2f5a:	97 95       	ror	r25
    2f5c:	87 95       	ror	r24
    2f5e:	77 95       	ror	r23
    2f60:	67 95       	ror	r22
    2f62:	ba 95       	dec	r27
    2f64:	c9 f7       	brne	.-14     	; 0x2f58 <__ultoa_invert+0x86>
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	61 05       	cpc	r22, r1
    2f6a:	71 05       	cpc	r23, r1
    2f6c:	08 95       	ret
    2f6e:	9b 01       	movw	r18, r22
    2f70:	ac 01       	movw	r20, r24
    2f72:	0a 2e       	mov	r0, r26
    2f74:	06 94       	lsr	r0
    2f76:	57 95       	ror	r21
    2f78:	47 95       	ror	r20
    2f7a:	37 95       	ror	r19
    2f7c:	27 95       	ror	r18
    2f7e:	ba 95       	dec	r27
    2f80:	c9 f7       	brne	.-14     	; 0x2f74 <__ultoa_invert+0xa2>
    2f82:	62 0f       	add	r22, r18
    2f84:	73 1f       	adc	r23, r19
    2f86:	84 1f       	adc	r24, r20
    2f88:	95 1f       	adc	r25, r21
    2f8a:	a0 1d       	adc	r26, r0
    2f8c:	08 95       	ret

00002f8e <__eerd_byte_m2560>:
    2f8e:	f9 99       	sbic	0x1f, 1	; 31
    2f90:	fe cf       	rjmp	.-4      	; 0x2f8e <__eerd_byte_m2560>
    2f92:	92 bd       	out	0x22, r25	; 34
    2f94:	81 bd       	out	0x21, r24	; 33
    2f96:	f8 9a       	sbi	0x1f, 0	; 31
    2f98:	99 27       	eor	r25, r25
    2f9a:	80 b5       	in	r24, 0x20	; 32
    2f9c:	08 95       	ret

00002f9e <__eewr_byte_m2560>:
    2f9e:	26 2f       	mov	r18, r22

00002fa0 <__eewr_r18_m2560>:
    2fa0:	f9 99       	sbic	0x1f, 1	; 31
    2fa2:	fe cf       	rjmp	.-4      	; 0x2fa0 <__eewr_r18_m2560>
    2fa4:	1f ba       	out	0x1f, r1	; 31
    2fa6:	92 bd       	out	0x22, r25	; 34
    2fa8:	81 bd       	out	0x21, r24	; 33
    2faa:	20 bd       	out	0x20, r18	; 32
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	fa 9a       	sbi	0x1f, 2	; 31
    2fb2:	f9 9a       	sbi	0x1f, 1	; 31
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	01 96       	adiw	r24, 0x01	; 1
    2fb8:	08 95       	ret

00002fba <_exit>:
    2fba:	f8 94       	cli

00002fbc <__stop_program>:
    2fbc:	ff cf       	rjmp	.-2      	; 0x2fbc <__stop_program>
