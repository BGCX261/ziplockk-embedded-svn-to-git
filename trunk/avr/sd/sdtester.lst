
sdtester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002a3e  00002ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000231  00800080  00800080  00002af2  2**0
                  ALLOC
  3 .stab         0000423c  00000000  00000000  00002af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b4c  00000000  00000000  00006d30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__ctors_end>
       4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       8:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
       c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      10:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      14:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      18:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      1c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      20:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      24:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      28:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      2c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      30:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      34:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      38:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      3c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      40:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      44:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      48:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      4c:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>
      50:	0c 94 8b 02 	jmp	0x516	; 0x516 <__bad_interrupt>

00000054 <__c.1753>:
      54:	20 46 72 65 65 20 4d 65 6d 6f 72 79 3a 20 00         Free Memory: .

00000063 <__c.1746>:
      63:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

00000072 <__c.1719>:
      72:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      82:	20 63 6c 75 73 74 65 72 00                           cluster.

0000008b <__c.1717>:
      8b:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
      9b:	68 61 69 6e 00                                      hain.

000000a0 <__c.1709>:
      a0:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 00         File Created!.

000000af <__c.1704>:
      af:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

000000bf <__c.1701>:
      bf:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      cf:	21 00                                               !.

000000d1 <__c.1692>:
      d1:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
      e1:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

000000eb <__c.1690>:
      eb:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      fb:	21 00                                               !.

000000fd <__c.1688>:
      fd:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

0000010e <__c.1684>:
     10e:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
     11e:	78 69 73 74 69 6e 67 2c 20 61 70 70 65 6e 64 69     xisting, appendi
     12e:	6e 67 20 64 61 74 61 2e 2e 00                       ng data...

00000138 <__c.1643>:
     138:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     148:	2e 2e 00                                            ...

0000014b <__c.1631>:
     14b:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     15b:	20 63 6c 75 73 74 65 72 00                           cluster.

00000164 <__c.1610>:
     164:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     174:	20 63 6c 75 73 74 65 72 00                           cluster.

0000017d <__c.1602>:
     17d:	52 4f 4f 54 00                                      ROOT.

00000182 <__c.1600>:
     182:	44 49 52 00                                         DIR.

00000186 <__c.1598>:
     186:	20 20 20 00                                            .

0000018a <__c.1596>:
     18a:	46 49 4c 45 00                                      FILE.

0000018f <__c.1594>:
     18f:	20 20 20 00                                            .

00000193 <__c.1588>:
     193:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000001a1 <__c.1586>:
     1a1:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000001ac <__c.1581>:
     1ac:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     1bc:	69 73 74 21 00                                      ist!.

000001c1 <__c.1681>:
     1c1:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

000001d2 <__c.1676>:
     1d2:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     1e2:	6f 6e 67 2e 2e 00                                   ong...

000001e8 <__c.1669>:
     1e8:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
     1f8:	20 00                                                .

000001fa <__c.1663>:
     1fa:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

0000020b <__c.1658>:
     20b:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

00000219 <__c.1655>:
     219:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
     229:	21 00                                               !.

0000022b <__c.1653>:
     22b:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

0000023a <__c.1649>:
     23a:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
     24a:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

00000254 <__c.1645>:
     254:	45 72 61 73 65 64 21 00                             Erased!.

0000025c <__c.1643>:
     25c:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

0000026b <__c.1640>:
     26b:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     27b:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     28b:	39 29 3a 00                                         9):.

0000028f <__c.1637>:
     28f:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     29f:	73 61 62 6c 65 64 21 00                             sabled!.

000002a7 <__c.1635>:
     2a7:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     2b7:	28 30 2d 39 29 3a 20 00                             (0-9): .

000002bf <__c.1633>:
     2bf:	3e 20 39 20 3a 20 52 65 61 64 20 53 44 20 4d 65     > 9 : Read SD Me
     2cf:	6d 6f 72 79 20 43 61 70 61 63 69 74 79 20 28 54     mory Capacity (T
     2df:	6f 74 61 6c 2f 46 72 65 65 29 00                    otal/Free).

000002ea <__c.1631>:
     2ea:	3e 20 38 20 3a 20 44 65 6c 65 74 65 20 46 69 6c     > 8 : Delete Fil
     2fa:	65 00                                               e.

000002fc <__c.1629>:
     2fc:	3e 20 37 20 3a 20 57 72 69 74 65 20 46 69 6c 65     > 7 : Write File
	...

0000030d <__c.1627>:
     30d:	3e 20 36 20 3a 20 52 65 61 64 20 46 69 6c 65 00     > 6 : Read File.

0000031d <__c.1625>:
     31d:	3e 20 35 20 3a 20 47 65 74 20 66 69 6c 65 20 6c     > 5 : Get file l
     32d:	69 73 74 00                                         ist.

00000331 <__c.1623>:
     331:	3e 20 32 20 3a 20 52 65 61 64 20 73 69 6e 67 6c     > 2 : Read singl
     341:	65 20 42 6c 6f 63 6b 00                             e Block.

00000349 <__c.1621>:
     349:	3e 20 31 20 3a 20 57 72 69 74 65 20 73 69 6e 67     > 1 : Write sing
     359:	6c 65 20 42 6c 6f 63 6b 00                          le Block.

00000362 <__c.1619>:
     362:	3e 20 30 20 3a 20 45 72 61 73 65 20 42 6c 6f 63     > 0 : Erase Bloc
     372:	6b 73 00                                            ks.

00000375 <__c.1617>:
     375:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

00000386 <__c.1615>:
     386:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

00000397 <__c.1613>:
     397:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     3a7:	44 65 74 65 63 74 65 64 21 00                       Detected!.

000003b1 <__c.1610>:
     3b1:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     3c1:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     3d1:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000003dc <__c.1607>:
     3dc:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     3ec:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

000003f9 <__c.1603>:
     3f9:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     409:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     419:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00000424 <__c.1599>:
     424:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     434:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00000441 <__c.1597>:
     441:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     451:	63 74 65 64 2e 2e 00                                cted...

00000458 <__c.1592>:
     458:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     468:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     478:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00           *************.

00000486 <__c.1590>:
     486:	20 20 20 20 44 68 61 72 6d 61 6e 69 27 73 20 6d         Dharmani's m
     496:	69 63 72 6f 53 44 20 43 61 72 64 20 54 65 73 74     icroSD Card Test
     4a6:	69 6e 67 2e 2e 20 20 00                             ing..  .

000004ae <__c.1588>:
     4ae:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4be:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4ce:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00           *************.

000004dc <__ctors_end>:
     4dc:	11 24       	eor	r1, r1
     4de:	1f be       	out	0x3f, r1	; 63
     4e0:	cf e5       	ldi	r28, 0x5F	; 95
     4e2:	d4 e0       	ldi	r29, 0x04	; 4
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	cd bf       	out	0x3d, r28	; 61

000004e8 <__do_copy_data>:
     4e8:	10 e0       	ldi	r17, 0x00	; 0
     4ea:	a0 e6       	ldi	r26, 0x60	; 96
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	ee e3       	ldi	r30, 0x3E	; 62
     4f0:	fa e2       	ldi	r31, 0x2A	; 42
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__do_copy_data+0x10>
     4f4:	05 90       	lpm	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	a0 38       	cpi	r26, 0x80	; 128
     4fa:	b1 07       	cpc	r27, r17
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <__do_copy_data+0xc>

000004fe <__do_clear_bss>:
     4fe:	12 e0       	ldi	r17, 0x02	; 2
     500:	a0 e8       	ldi	r26, 0x80	; 128
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	01 c0       	rjmp	.+2      	; 0x508 <.do_clear_bss_start>

00000506 <.do_clear_bss_loop>:
     506:	1d 92       	st	X+, r1

00000508 <.do_clear_bss_start>:
     508:	a1 3b       	cpi	r26, 0xB1	; 177
     50a:	b1 07       	cpc	r27, r17
     50c:	e1 f7       	brne	.-8      	; 0x506 <.do_clear_bss_loop>
     50e:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <main>
     512:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <_exit>

00000516 <__bad_interrupt>:
     516:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000051a <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     522:	20 91 9a 02 	lds	r18, 0x029A
     526:	30 91 9b 02 	lds	r19, 0x029B
     52a:	e0 90 84 00 	lds	r14, 0x0084
     52e:	f0 90 85 00 	lds	r15, 0x0085
     532:	00 91 86 00 	lds	r16, 0x0086
     536:	10 91 87 00 	lds	r17, 0x0087
     53a:	62 50       	subi	r22, 0x02	; 2
     53c:	70 40       	sbci	r23, 0x00	; 0
     53e:	80 40       	sbci	r24, 0x00	; 0
     540:	90 40       	sbci	r25, 0x00	; 0
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
     54a:	9b 01       	movw	r18, r22
     54c:	ac 01       	movw	r20, r24
     54e:	2e 0d       	add	r18, r14
     550:	3f 1d       	adc	r19, r15
     552:	40 1f       	adc	r20, r16
     554:	51 1f       	adc	r21, r17
}
     556:	b9 01       	movw	r22, r18
     558:	ca 01       	movw	r24, r20
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	08 95       	ret

00000564 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     564:	4f 92       	push	r4
     566:	5f 92       	push	r5
     568:	6f 92       	push	r6
     56a:	7f 92       	push	r7
     56c:	9f 92       	push	r9
     56e:	af 92       	push	r10
     570:	bf 92       	push	r11
     572:	cf 92       	push	r12
     574:	df 92       	push	r13
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	5b 01       	movw	r10, r22
     584:	6c 01       	movw	r12, r24
     586:	94 2e       	mov	r9, r20
     588:	28 01       	movw	r4, r16
     58a:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     58c:	e0 90 a5 02 	lds	r14, 0x02A5
     590:	f0 90 a6 02 	lds	r15, 0x02A6
     594:	aa 0c       	add	r10, r10
     596:	bb 1c       	adc	r11, r11
     598:	cc 1c       	adc	r12, r12
     59a:	dd 1c       	adc	r13, r13
     59c:	aa 0c       	add	r10, r10
     59e:	bb 1c       	adc	r11, r11
     5a0:	cc 1c       	adc	r12, r12
     5a2:	dd 1c       	adc	r13, r13
     5a4:	20 91 8c 00 	lds	r18, 0x008C
     5a8:	30 91 8d 00 	lds	r19, 0x008D
     5ac:	00 e0       	ldi	r16, 0x00	; 0
     5ae:	10 e0       	ldi	r17, 0x00	; 0
     5b0:	80 91 9c 02 	lds	r24, 0x029C
     5b4:	90 91 9d 02 	lds	r25, 0x029D
     5b8:	a0 91 9e 02 	lds	r26, 0x029E
     5bc:	b0 91 9f 02 	lds	r27, 0x029F
     5c0:	e8 0e       	add	r14, r24
     5c2:	f9 1e       	adc	r15, r25
     5c4:	0a 1f       	adc	r16, r26
     5c6:	1b 1f       	adc	r17, r27
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	c6 01       	movw	r24, r12
     5ce:	b5 01       	movw	r22, r10
     5d0:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__udivmodsi4>
     5d4:	e2 0e       	add	r14, r18
     5d6:	f3 1e       	adc	r15, r19
     5d8:	04 1f       	adc	r16, r20
     5da:	15 1f       	adc	r17, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     5dc:	20 91 8c 00 	lds	r18, 0x008C
     5e0:	30 91 8d 00 	lds	r19, 0x008D
     5e4:	40 e0       	ldi	r20, 0x00	; 0
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	c6 01       	movw	r24, r12
     5ea:	b5 01       	movw	r22, r10
     5ec:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__udivmodsi4>
     5f0:	eb 01       	movw	r28, r22
     5f2:	8a e0       	ldi	r24, 0x0A	; 10
     5f4:	a8 2e       	mov	r10, r24

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     5f6:	c8 01       	movw	r24, r16
     5f8:	b7 01       	movw	r22, r14
     5fa:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>
     5fe:	88 23       	and	r24, r24
     600:	11 f0       	breq	.+4      	; 0x606 <getSetNextCluster+0xa2>
     602:	aa 94       	dec	r10

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     604:	c1 f7       	brne	.-16     	; 0x5f6 <getSetNextCluster+0x92>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     606:	c6 56       	subi	r28, 0x66	; 102
     608:	df 4f       	sbci	r29, 0xFF	; 255

if(get_set == GET)
     60a:	99 20       	and	r9, r9
     60c:	b9 f4       	brne	.+46     	; 0x63c <getSetNextCluster+0xd8>
  return ((*FATEntryValue) & 0x0fffffff);
     60e:	28 81       	ld	r18, Y
     610:	39 81       	ldd	r19, Y+1	; 0x01
     612:	4a 81       	ldd	r20, Y+2	; 0x02
     614:	5b 81       	ldd	r21, Y+3	; 0x03
     616:	5f 70       	andi	r21, 0x0F	; 15
*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT

SD_writeSingleBlock(FATEntrySector);

return (0);
}
     618:	b9 01       	movw	r22, r18
     61a:	ca 01       	movw	r24, r20
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	cf 90       	pop	r12
     62c:	bf 90       	pop	r11
     62e:	af 90       	pop	r10
     630:	9f 90       	pop	r9
     632:	7f 90       	pop	r7
     634:	6f 90       	pop	r6
     636:	5f 90       	pop	r5
     638:	4f 90       	pop	r4
     63a:	08 95       	ret

if(get_set == GET)
  return ((*FATEntryValue) & 0x0fffffff);


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     63c:	48 82       	st	Y, r4
     63e:	59 82       	std	Y+1, r5	; 0x01
     640:	6a 82       	std	Y+2, r6	; 0x02
     642:	7b 82       	std	Y+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     644:	c8 01       	movw	r24, r16
     646:	b7 01       	movw	r22, r14
     648:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <SD_writeSingleBlock>

return (0);
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	e1 cf       	rjmp	.-62     	; 0x618 <getSetNextCluster+0xb4>

00000656 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	c8 2e       	mov	r12, r24
     664:	d6 2e       	mov	r13, r22
     666:	79 01       	movw	r14, r18
     668:	8a 01       	movw	r16, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     66a:	60 91 9c 02 	lds	r22, 0x029C
     66e:	70 91 9d 02 	lds	r23, 0x029D
     672:	80 91 9e 02 	lds	r24, 0x029E
     676:	90 91 9f 02 	lds	r25, 0x029F
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	8f 4f       	sbci	r24, 0xFF	; 255
     680:	9f 4f       	sbci	r25, 0xFF	; 255
     682:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     686:	80 91 9a 00 	lds	r24, 0x009A
     68a:	90 91 9b 00 	lds	r25, 0x009B
     68e:	a0 91 9c 00 	lds	r26, 0x009C
     692:	b0 91 9d 00 	lds	r27, 0x009D
     696:	82 35       	cpi	r24, 0x52	; 82
     698:	22 e5       	ldi	r18, 0x52	; 82
     69a:	92 07       	cpc	r25, r18
     69c:	21 e6       	ldi	r18, 0x61	; 97
     69e:	a2 07       	cpc	r26, r18
     6a0:	21 e4       	ldi	r18, 0x41	; 65
     6a2:	b2 07       	cpc	r27, r18
     6a4:	69 f0       	breq	.+26     	; 0x6c0 <getSetFreeCluster+0x6a>
  return 0xffffffff;
     6a6:	2f ef       	ldi	r18, 0xFF	; 255
     6a8:	3f ef       	ldi	r19, 0xFF	; 255
     6aa:	4f ef       	ldi	r20, 0xFF	; 255
     6ac:	5f ef       	ldi	r21, 0xFF	; 255
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
     6ae:	b9 01       	movw	r22, r18
     6b0:	ca 01       	movw	r24, r20
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	df 90       	pop	r13
     6bc:	cf 90       	pop	r12
     6be:	08 95       	ret
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     6c0:	80 91 7e 02 	lds	r24, 0x027E
     6c4:	90 91 7f 02 	lds	r25, 0x027F
     6c8:	a0 91 80 02 	lds	r26, 0x0280
     6cc:	b0 91 81 02 	lds	r27, 0x0281
     6d0:	82 37       	cpi	r24, 0x72	; 114
     6d2:	22 e7       	ldi	r18, 0x72	; 114
     6d4:	92 07       	cpc	r25, r18
     6d6:	21 e4       	ldi	r18, 0x41	; 65
     6d8:	a2 07       	cpc	r26, r18
     6da:	21 e6       	ldi	r18, 0x61	; 97
     6dc:	b2 07       	cpc	r27, r18
     6de:	19 f7       	brne	.-58     	; 0x6a6 <getSetFreeCluster+0x50>
     6e0:	80 91 96 02 	lds	r24, 0x0296
     6e4:	90 91 97 02 	lds	r25, 0x0297
     6e8:	a0 91 98 02 	lds	r26, 0x0298
     6ec:	b0 91 99 02 	lds	r27, 0x0299
     6f0:	80 30       	cpi	r24, 0x00	; 0
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	92 07       	cpc	r25, r18
     6f6:	25 e5       	ldi	r18, 0x55	; 85
     6f8:	a2 07       	cpc	r26, r18
     6fa:	2a ea       	ldi	r18, 0xAA	; 170
     6fc:	b2 07       	cpc	r27, r18
     6fe:	99 f6       	brne	.-90     	; 0x6a6 <getSetFreeCluster+0x50>
  return 0xffffffff;

 if(get_set == GET)
     700:	dd 20       	and	r13, r13
     702:	f1 f0       	breq	.+60     	; 0x740 <getSetFreeCluster+0xea>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     704:	2c 2d       	mov	r18, r12
     706:	21 30       	cpi	r18, 0x01	; 1
     708:	39 f1       	breq	.+78     	; 0x758 <getSetFreeCluster+0x102>
      FS->freeClusterCount = FSEntry;
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     70a:	e0 92 86 02 	sts	0x0286, r14
     70e:	f0 92 87 02 	sts	0x0287, r15
     712:	00 93 88 02 	sts	0x0288, r16
     716:	10 93 89 02 	sts	0x0289, r17
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     71a:	60 91 9c 02 	lds	r22, 0x029C
     71e:	70 91 9d 02 	lds	r23, 0x029D
     722:	80 91 9e 02 	lds	r24, 0x029E
     726:	90 91 9f 02 	lds	r25, 0x029F
     72a:	6f 5f       	subi	r22, 0xFF	; 255
     72c:	7f 4f       	sbci	r23, 0xFF	; 255
     72e:	8f 4f       	sbci	r24, 0xFF	; 255
     730:	9f 4f       	sbci	r25, 0xFF	; 255
     732:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <SD_writeSingleBlock>
 }
 return 0xffffffff;
     736:	2f ef       	ldi	r18, 0xFF	; 255
     738:	3f ef       	ldi	r19, 0xFF	; 255
     73a:	4f ef       	ldi	r20, 0xFF	; 255
     73c:	5f ef       	ldi	r21, 0xFF	; 255
     73e:	b7 cf       	rjmp	.-146    	; 0x6ae <getSetFreeCluster+0x58>
if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;

 if(get_set == GET)
 {
   if(totOrNext == TOTAL_FREE)
     740:	8c 2d       	mov	r24, r12
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	91 f0       	breq	.+36     	; 0x76a <getSetFreeCluster+0x114>
      return(FS->freeClusterCount);
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     746:	20 91 86 02 	lds	r18, 0x0286
     74a:	30 91 87 02 	lds	r19, 0x0287
     74e:	40 91 88 02 	lds	r20, 0x0288
     752:	50 91 89 02 	lds	r21, 0x0289
     756:	ab cf       	rjmp	.-170    	; 0x6ae <getSetFreeCluster+0x58>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
      FS->freeClusterCount = FSEntry;
     758:	e0 92 82 02 	sts	0x0282, r14
     75c:	f0 92 83 02 	sts	0x0283, r15
     760:	00 93 84 02 	sts	0x0284, r16
     764:	10 93 85 02 	sts	0x0285, r17
     768:	d8 cf       	rjmp	.-80     	; 0x71a <getSetFreeCluster+0xc4>
  return 0xffffffff;

 if(get_set == GET)
 {
   if(totOrNext == TOTAL_FREE)
      return(FS->freeClusterCount);
     76a:	20 91 82 02 	lds	r18, 0x0282
     76e:	30 91 83 02 	lds	r19, 0x0283
     772:	40 91 84 02 	lds	r20, 0x0284
     776:	50 91 85 02 	lds	r21, 0x0285
     77a:	99 cf       	rjmp	.-206    	; 0x6ae <getSetFreeCluster+0x58>

0000077c <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     78c:	10 92 9c 02 	sts	0x029C, r1
     790:	10 92 9d 02 	sts	0x029D, r1
     794:	10 92 9e 02 	sts	0x029E, r1
     798:	10 92 9f 02 	sts	0x029F, r1

SD_readSingleBlock(0);
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     7a8:	80 91 9a 00 	lds	r24, 0x009A
     7ac:	89 3e       	cpi	r24, 0xE9	; 233
     7ae:	61 f1       	breq	.+88     	; 0x808 <getBootSectorData+0x8c>
     7b0:	8b 3e       	cpi	r24, 0xEB	; 235
     7b2:	51 f1       	breq	.+84     	; 0x808 <getBootSectorData+0x8c>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     7b4:	80 91 98 02 	lds	r24, 0x0298
     7b8:	90 91 99 02 	lds	r25, 0x0299
     7bc:	2a ea       	ldi	r18, 0xAA	; 170
     7be:	85 35       	cpi	r24, 0x55	; 85
     7c0:	92 07       	cpc	r25, r18
     7c2:	51 f0       	breq	.+20     	; 0x7d8 <getBootSectorData+0x5c>
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     7c4:	81 e0       	ldi	r24, 0x01	; 1
if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
return 0;
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	08 95       	ret
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     7d8:	60 91 60 02 	lds	r22, 0x0260
     7dc:	70 91 61 02 	lds	r23, 0x0261
     7e0:	80 91 62 02 	lds	r24, 0x0262
     7e4:	90 91 63 02 	lds	r25, 0x0263
     7e8:	60 93 9c 02 	sts	0x029C, r22
     7ec:	70 93 9d 02 	sts	0x029D, r23
     7f0:	80 93 9e 02 	sts	0x029E, r24
     7f4:	90 93 9f 02 	sts	0x029F, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     7f8:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     7fc:	80 91 9a 00 	lds	r24, 0x009A
     800:	89 3e       	cpi	r24, 0xE9	; 233
     802:	11 f0       	breq	.+4      	; 0x808 <getBootSectorData+0x8c>
     804:	8b 3e       	cpi	r24, 0xEB	; 235
     806:	f1 f6       	brne	.-68     	; 0x7c4 <getBootSectorData+0x48>
}

bytesPerSector = bpb->bytesPerSector;
     808:	80 91 a5 00 	lds	r24, 0x00A5
     80c:	90 91 a6 00 	lds	r25, 0x00A6
     810:	90 93 8d 00 	sts	0x008D, r25
     814:	80 93 8c 00 	sts	0x008C, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     818:	80 91 a7 00 	lds	r24, 0x00A7
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	90 93 9b 02 	sts	0x029B, r25
     822:	80 93 9a 02 	sts	0x029A, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     826:	c0 90 a8 00 	lds	r12, 0x00A8
     82a:	d0 90 a9 00 	lds	r13, 0x00A9
     82e:	d0 92 a6 02 	sts	0x02A6, r13
     832:	c0 92 a5 02 	sts	0x02A5, r12
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     836:	80 91 c6 00 	lds	r24, 0x00C6
     83a:	90 91 c7 00 	lds	r25, 0x00C7
     83e:	a0 91 c8 00 	lds	r26, 0x00C8
     842:	b0 91 c9 00 	lds	r27, 0x00C9
     846:	80 93 92 00 	sts	0x0092, r24
     84a:	90 93 93 00 	sts	0x0093, r25
     84e:	a0 93 94 00 	sts	0x0094, r26
     852:	b0 93 95 00 	sts	0x0095, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     856:	c0 91 a5 02 	lds	r28, 0x02A5
     85a:	d0 91 a6 02 	lds	r29, 0x02A6
     85e:	60 91 aa 00 	lds	r22, 0x00AA
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	20 91 be 00 	lds	r18, 0x00BE
     86c:	30 91 bf 00 	lds	r19, 0x00BF
     870:	40 91 c0 00 	lds	r20, 0x00C0
     874:	50 91 c1 00 	lds	r21, 0x00C1
     878:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
     87c:	8b 01       	movw	r16, r22
     87e:	9c 01       	movw	r18, r24
     880:	ce 01       	movw	r24, r28
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	40 91 b6 00 	lds	r20, 0x00B6
     88a:	50 91 b7 00 	lds	r21, 0x00B7
     88e:	60 91 b8 00 	lds	r22, 0x00B8
     892:	70 91 b9 00 	lds	r23, 0x00B9
     896:	84 0f       	add	r24, r20
     898:	95 1f       	adc	r25, r21
     89a:	a6 1f       	adc	r26, r22
     89c:	b7 1f       	adc	r27, r23
     89e:	80 0f       	add	r24, r16
     8a0:	91 1f       	adc	r25, r17
     8a2:	a2 1f       	adc	r26, r18
     8a4:	b3 1f       	adc	r27, r19
     8a6:	80 93 84 00 	sts	0x0084, r24
     8aa:	90 93 85 00 	sts	0x0085, r25
     8ae:	a0 93 86 00 	sts	0x0086, r26
     8b2:	b0 93 87 00 	sts	0x0087, r27

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     8b6:	40 91 9a 02 	lds	r20, 0x029A
     8ba:	50 91 9b 02 	lds	r21, 0x029B
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
     8be:	ee 24       	eor	r14, r14
     8c0:	ff 24       	eor	r15, r15
     8c2:	60 91 ba 00 	lds	r22, 0x00BA
     8c6:	70 91 bb 00 	lds	r23, 0x00BB
     8ca:	80 91 bc 00 	lds	r24, 0x00BC
     8ce:	90 91 bd 00 	lds	r25, 0x00BD
     8d2:	6c 19       	sub	r22, r12
     8d4:	7d 09       	sbc	r23, r13
     8d6:	8e 09       	sbc	r24, r14
     8d8:	9f 09       	sbc	r25, r15
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
     8da:	60 1b       	sub	r22, r16
     8dc:	71 0b       	sbc	r23, r17
     8de:	82 0b       	sbc	r24, r18
     8e0:	93 0b       	sbc	r25, r19
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     8e2:	9a 01       	movw	r18, r20
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__udivmodsi4>
     8ec:	20 93 8e 00 	sts	0x008E, r18
     8f0:	30 93 8f 00 	sts	0x008F, r19
     8f4:	40 93 90 00 	sts	0x0090, r20
     8f8:	50 93 91 00 	sts	0x0091, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	0e 94 2b 03 	call	0x656	; 0x656 <getSetFreeCluster>
     90c:	9b 01       	movw	r18, r22
     90e:	ac 01       	movw	r20, r24
     910:	80 91 8e 00 	lds	r24, 0x008E
     914:	90 91 8f 00 	lds	r25, 0x008F
     918:	a0 91 90 00 	lds	r26, 0x0090
     91c:	b0 91 91 00 	lds	r27, 0x0091
     920:	82 17       	cp	r24, r18
     922:	93 07       	cpc	r25, r19
     924:	a4 07       	cpc	r26, r20
     926:	b5 07       	cpc	r27, r21
     928:	28 f0       	brcs	.+10     	; 0x934 <getBootSectorData+0x1b8>
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	80 93 ac 02 	sts	0x02AC, r24
return 0;
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	49 cf       	rjmp	.-366    	; 0x7c6 <getBootSectorData+0x4a>
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
     934:	10 92 ac 02 	sts	0x02AC, r1
else
	 freeClusterCountUpdated = 1;
return 0;
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	45 cf       	rjmp	.-374    	; 0x7c6 <getBootSectorData+0x4a>

0000093c <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	df 93       	push	r29
     942:	cf 93       	push	r28
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	2b 97       	sbiw	r28, 0x0b	; 11
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];

return 0;
     954:	ac 01       	movw	r20, r24
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     956:	fc 01       	movw	r30, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     958:	10 e0       	ldi	r17, 0x00	; 0
if(fileName[j] == '.') break;
     95a:	21 91       	ld	r18, Z+
     95c:	2e 32       	cpi	r18, 0x2E	; 46
     95e:	99 f0       	breq	.+38     	; 0x986 <convertFileName+0x4a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     960:	1f 5f       	subi	r17, 0xFF	; 255
     962:	1c 30       	cpi	r17, 0x0C	; 12
     964:	d1 f7       	brne	.-12     	; 0x95a <convertFileName+0x1e>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     966:	88 e3       	ldi	r24, 0x38	; 56
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
     96e:	81 e0       	ldi	r24, 0x01	; 1

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];

return 0;
}
     970:	2b 96       	adiw	r28, 0x0b	; 11
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	cf 91       	pop	r28
     97e:	df 91       	pop	r29
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     986:	19 30       	cpi	r17, 0x09	; 9
     988:	70 f7       	brcc	.-36     	; 0x966 <convertFileName+0x2a>

for(k=0; k<j; k++) //setting file name
     98a:	11 23       	and	r17, r17
     98c:	09 f4       	brne	.+2      	; 0x990 <convertFileName+0x54>
     98e:	4f c0       	rjmp	.+158    	; 0xa2e <convertFileName+0xf2>
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     990:	9e 01       	movw	r18, r28
     992:	2f 5f       	subi	r18, 0xFF	; 255
     994:	3f 4f       	sbci	r19, 0xFF	; 255
     996:	f9 01       	movw	r30, r18
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
     998:	be 01       	movw	r22, r28
     99a:	6e 5f       	subi	r22, 0xFE	; 254
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	a1 2f       	mov	r26, r17
     9a0:	a1 50       	subi	r26, 0x01	; 1
     9a2:	6a 0f       	add	r22, r26
     9a4:	71 1d       	adc	r23, r1
     9a6:	dc 01       	movw	r26, r24
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
     9a8:	0d 91       	ld	r16, X+
     9aa:	01 93       	st	Z+, r16
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     9ac:	e6 17       	cp	r30, r22
     9ae:	f7 07       	cpc	r31, r23
     9b0:	d9 f7       	brne	.-10     	; 0x9a8 <convertFileName+0x6c>
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     9b2:	18 30       	cpi	r17, 0x08	; 8
     9b4:	49 f0       	breq	.+18     	; 0x9c8 <convertFileName+0x8c>
     9b6:	61 2f       	mov	r22, r17
  fileNameFAT[k] = ' ';
     9b8:	70 e2       	ldi	r23, 0x20	; 32
     9ba:	f9 01       	movw	r30, r18
     9bc:	e6 0f       	add	r30, r22
     9be:	f1 1d       	adc	r31, r1
     9c0:	70 83       	st	Z, r23
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     9c2:	6f 5f       	subi	r22, 0xFF	; 255
     9c4:	68 30       	cpi	r22, 0x08	; 8
     9c6:	c9 f7       	brne	.-14     	; 0x9ba <convertFileName+0x7e>
  fileNameFAT[k] = ' ';

j++;
     9c8:	1f 5f       	subi	r17, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
     9ca:	68 e0       	ldi	r22, 0x08	; 8
{
  if(fileName[j] != 0)
     9cc:	fc 01       	movw	r30, r24
     9ce:	e1 0f       	add	r30, r17
     9d0:	f1 1d       	adc	r31, r1
     9d2:	70 81       	ld	r23, Z
     9d4:	77 23       	and	r23, r23
     9d6:	11 f5       	brne	.+68     	; 0xa1c <convertFileName+0xe0>
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     9d8:	6b 30       	cpi	r22, 0x0B	; 11
     9da:	28 f5       	brcc	.+74     	; 0xa26 <convertFileName+0xea>
      fileNameFAT[k++] = ' ';
     9dc:	80 e2       	ldi	r24, 0x20	; 32
     9de:	f9 01       	movw	r30, r18
     9e0:	e6 0f       	add	r30, r22
     9e2:	f1 1d       	adc	r31, r1
     9e4:	80 83       	st	Z, r24
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     9e8:	6b 30       	cpi	r22, 0x0B	; 11
     9ea:	c9 f7       	brne	.-14     	; 0x9de <convertFileName+0xa2>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     9ec:	d9 01       	movw	r26, r18
//***************************************************************************
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
     9ee:	ce 01       	movw	r24, r28
     9f0:	0c 96       	adiw	r24, 0x0c	; 12
     9f2:	f9 01       	movw	r30, r18
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     9f4:	20 81       	ld	r18, Z
     9f6:	32 2f       	mov	r19, r18
     9f8:	31 56       	subi	r19, 0x61	; 97
     9fa:	3a 31       	cpi	r19, 0x1A	; 26
     9fc:	10 f4       	brcc	.+4      	; 0xa02 <convertFileName+0xc6>
    fileNameFAT[j] -= 0x20;
     9fe:	20 52       	subi	r18, 0x20	; 32
     a00:	20 83       	st	Z, r18
     a02:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     a04:	e8 17       	cp	r30, r24
     a06:	f9 07       	cpc	r31, r25
     a08:	a9 f7       	brne	.-22     	; 0x9f4 <convertFileName+0xb8>
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     a0a:	2d 91       	ld	r18, X+
     a0c:	fa 01       	movw	r30, r20
     a0e:	21 93       	st	Z+, r18
     a10:	af 01       	movw	r20, r30

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     a12:	a8 17       	cp	r26, r24
     a14:	b9 07       	cpc	r27, r25
     a16:	c9 f7       	brne	.-14     	; 0xa0a <convertFileName+0xce>
  fileName[j] = fileNameFAT[j];

return 0;
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	aa cf       	rjmp	.-172    	; 0x970 <convertFileName+0x34>

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
     a1c:	f9 01       	movw	r30, r18
     a1e:	e6 0f       	add	r30, r22
     a20:	f1 1d       	adc	r31, r1
     a22:	70 83       	st	Z, r23
     a24:	1f 5f       	subi	r17, 0xFF	; 255

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     a26:	6f 5f       	subi	r22, 0xFF	; 255
     a28:	6b 30       	cpi	r22, 0x0B	; 11
     a2a:	80 f2       	brcs	.-96     	; 0x9cc <convertFileName+0x90>
     a2c:	df cf       	rjmp	.-66     	; 0x9ec <convertFileName+0xb0>
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	9e 01       	movw	r18, r28
     a32:	2f 5f       	subi	r18, 0xFF	; 255
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	c0 cf       	rjmp	.-128    	; 0x9b8 <convertFileName+0x7c>

00000a38 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     a38:	6f 92       	push	r6
     a3a:	7f 92       	push	r7
     a3c:	8f 92       	push	r8
     a3e:	9f 92       	push	r9
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     a50:	60 78       	andi	r22, 0x80	; 128
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     a52:	20 91 8e 00 	lds	r18, 0x008E
     a56:	30 91 8f 00 	lds	r19, 0x008F
     a5a:	40 91 90 00 	lds	r20, 0x0090
     a5e:	50 91 91 00 	lds	r21, 0x0091
     a62:	62 17       	cp	r22, r18
     a64:	73 07       	cpc	r23, r19
     a66:	84 07       	cpc	r24, r20
     a68:	95 07       	cpc	r25, r21
     a6a:	08 f0       	brcs	.+2      	; 0xa6e <searchNextFreeCluster+0x36>
     a6c:	89 c0       	rjmp	.+274    	; 0xb80 <searchNextFreeCluster+0x148>
     a6e:	5b 01       	movw	r10, r22
     a70:	6c 01       	movw	r12, r24
     a72:	aa 0c       	add	r10, r10
     a74:	bb 1c       	adc	r11, r11
     a76:	cc 1c       	adc	r12, r12
     a78:	dd 1c       	adc	r13, r13
     a7a:	aa 0c       	add	r10, r10
     a7c:	bb 1c       	adc	r11, r11
     a7e:	cc 1c       	adc	r12, r12
     a80:	dd 1c       	adc	r13, r13
     a82:	3b 01       	movw	r6, r22
     a84:	4c 01       	movw	r8, r24
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     a86:	e0 90 a5 02 	lds	r14, 0x02A5
     a8a:	f0 90 a6 02 	lds	r15, 0x02A6
     a8e:	20 91 8c 00 	lds	r18, 0x008C
     a92:	30 91 8d 00 	lds	r19, 0x008D
     a96:	00 e0       	ldi	r16, 0x00	; 0
     a98:	10 e0       	ldi	r17, 0x00	; 0
     a9a:	80 91 9c 02 	lds	r24, 0x029C
     a9e:	90 91 9d 02 	lds	r25, 0x029D
     aa2:	a0 91 9e 02 	lds	r26, 0x029E
     aa6:	b0 91 9f 02 	lds	r27, 0x029F
     aaa:	e8 0e       	add	r14, r24
     aac:	f9 1e       	adc	r15, r25
     aae:	0a 1f       	adc	r16, r26
     ab0:	1b 1f       	adc	r17, r27
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	c6 01       	movw	r24, r12
     ab8:	b5 01       	movw	r22, r10
     aba:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__udivmodsi4>
     abe:	e2 0e       	add	r14, r18
     ac0:	f3 1e       	adc	r15, r19
     ac2:	04 1f       	adc	r16, r20
     ac4:	15 1f       	adc	r17, r21
      SD_readSingleBlock(sector);
     ac6:	c8 01       	movw	r24, r16
     ac8:	b7 01       	movw	r22, r14
     aca:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     ace:	80 91 9a 00 	lds	r24, 0x009A
     ad2:	90 91 9b 00 	lds	r25, 0x009B
     ad6:	a0 91 9c 00 	lds	r26, 0x009C
     ada:	b0 91 9d 00 	lds	r27, 0x009D
     ade:	bf 70       	andi	r27, 0x0F	; 15
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	a1 05       	cpc	r26, r1
     ae4:	b1 05       	cpc	r27, r1
     ae6:	09 f4       	brne	.+2      	; 0xaea <searchNextFreeCluster+0xb2>
     ae8:	4f c0       	rjmp	.+158    	; 0xb88 <searchNextFreeCluster+0x150>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     aea:	21 e0       	ldi	r18, 0x01	; 1
     aec:	03 c0       	rjmp	.+6      	; 0xaf4 <searchNextFreeCluster+0xbc>
     aee:	2f 5f       	subi	r18, 0xFF	; 255
     af0:	20 38       	cpi	r18, 0x80	; 128
     af2:	41 f1       	breq	.+80     	; 0xb44 <searchNextFreeCluster+0x10c>
      {
       	 value = (unsigned long *) &buffer[i*4];
     af4:	e2 2f       	mov	r30, r18
     af6:	f0 e0       	ldi	r31, 0x00	; 0
         if(((*value) & 0x0fffffff) == 0)
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	e6 56       	subi	r30, 0x66	; 102
     b02:	ff 4f       	sbci	r31, 0xFF	; 255
     b04:	80 81       	ld	r24, Z
     b06:	91 81       	ldd	r25, Z+1	; 0x01
     b08:	a2 81       	ldd	r26, Z+2	; 0x02
     b0a:	b3 81       	ldd	r27, Z+3	; 0x03
     b0c:	bf 70       	andi	r27, 0x0F	; 15
     b0e:	00 97       	sbiw	r24, 0x00	; 0
     b10:	a1 05       	cpc	r26, r1
     b12:	b1 05       	cpc	r27, r1
     b14:	61 f7       	brne	.-40     	; 0xaee <searchNextFreeCluster+0xb6>
     b16:	82 2f       	mov	r24, r18
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	a0 e0       	ldi	r26, 0x00	; 0
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
            return(cluster+i);
     b1e:	68 0e       	add	r6, r24
     b20:	79 1e       	adc	r7, r25
     b22:	8a 1e       	adc	r8, r26
     b24:	9b 1e       	adc	r9, r27
      }  
    } 

 return 0;
}
     b26:	b3 01       	movw	r22, r6
     b28:	c4 01       	movw	r24, r8
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	df 90       	pop	r13
     b34:	cf 90       	pop	r12
     b36:	bf 90       	pop	r11
     b38:	af 90       	pop	r10
     b3a:	9f 90       	pop	r9
     b3c:	8f 90       	pop	r8
     b3e:	7f 90       	pop	r7
     b40:	6f 90       	pop	r6
     b42:	08 95       	ret
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     b44:	20 e8       	ldi	r18, 0x80	; 128
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	62 0e       	add	r6, r18
     b4e:	73 1e       	adc	r7, r19
     b50:	84 1e       	adc	r8, r20
     b52:	95 1e       	adc	r9, r21
     b54:	80 91 8e 00 	lds	r24, 0x008E
     b58:	90 91 8f 00 	lds	r25, 0x008F
     b5c:	a0 91 90 00 	lds	r26, 0x0090
     b60:	b0 91 91 00 	lds	r27, 0x0091
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	32 e0       	ldi	r19, 0x02	; 2
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	a2 0e       	add	r10, r18
     b6e:	b3 1e       	adc	r11, r19
     b70:	c4 1e       	adc	r12, r20
     b72:	d5 1e       	adc	r13, r21
     b74:	68 16       	cp	r6, r24
     b76:	79 06       	cpc	r7, r25
     b78:	8a 06       	cpc	r8, r26
     b7a:	9b 06       	cpc	r9, r27
     b7c:	08 f4       	brcc	.+2      	; 0xb80 <searchNextFreeCluster+0x148>
     b7e:	83 cf       	rjmp	.-250    	; 0xa86 <searchNextFreeCluster+0x4e>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
     b80:	66 24       	eor	r6, r6
     b82:	77 24       	eor	r7, r7
     b84:	43 01       	movw	r8, r6
     b86:	cf cf       	rjmp	.-98     	; 0xb26 <searchNextFreeCluster+0xee>
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	c6 cf       	rjmp	.-116    	; 0xb1e <searchNextFreeCluster+0xe6>

00000b92 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     b92:	7f 92       	push	r7
     b94:	8f 92       	push	r8
     b96:	9f 92       	push	r9
     b98:	af 92       	push	r10
     b9a:	bf 92       	push	r11
     b9c:	cf 92       	push	r12
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	64 97       	sbiw	r28, 0x14	; 20
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	78 2e       	mov	r7, r24
     bbe:	cb 01       	movw	r24, r22
     bc0:	ba 01       	movw	r22, r20
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     bc2:	4e 01       	movw	r8, r28
     bc4:	08 94       	sec
     bc6:	81 1c       	adc	r8, r1
     bc8:	91 1c       	adc	r9, r1
     bca:	d4 01       	movw	r26, r8
     bcc:	e0 e6       	ldi	r30, 0x60	; 96
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	24 e1       	ldi	r18, 0x14	; 20
     bd2:	01 90       	ld	r0, Z+
     bd4:	0d 92       	st	X+, r0
     bd6:	21 50       	subi	r18, 0x01	; 1
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <displayMemory+0x40>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     bda:	fc e0       	ldi	r31, 0x0C	; 12
     bdc:	ff 2e       	mov	r15, r31
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     bde:	ec e2       	ldi	r30, 0x2C	; 44
     be0:	ee 2e       	mov	r14, r30
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     be2:	5a e0       	ldi	r21, 0x0A	; 10
     be4:	a5 2e       	mov	r10, r21
     be6:	b1 2c       	mov	r11, r1
     be8:	c1 2c       	mov	r12, r1
     bea:	d1 2c       	mov	r13, r1
     bec:	15 c0       	rjmp	.+42     	; 0xc18 <displayMemory+0x86>
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     bee:	29 30       	cpi	r18, 0x09	; 9
     bf0:	b1 f0       	breq	.+44     	; 0xc1e <displayMemory+0x8c>
	{
	   memoryString[i-1] = ',';  
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     bf2:	8e 01       	movw	r16, r28
     bf4:	0f 0d       	add	r16, r15
     bf6:	11 1d       	adc	r17, r1
     bf8:	a6 01       	movw	r20, r12
     bfa:	95 01       	movw	r18, r10
     bfc:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__udivmodsi4>
     c00:	60 63       	ori	r22, 0x30	; 48
     c02:	f8 01       	movw	r30, r16
     c04:	60 83       	st	Z, r22
    memory /= 10;
     c06:	b9 01       	movw	r22, r18
     c08:	ca 01       	movw	r24, r20
	if(memory == 0) break;
     c0a:	61 15       	cp	r22, r1
     c0c:	71 05       	cpc	r23, r1
     c0e:	81 05       	cpc	r24, r1
     c10:	91 05       	cpc	r25, r1
     c12:	59 f0       	breq	.+22     	; 0xc2a <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     c14:	fa 94       	dec	r15
     c16:	49 f0       	breq	.+18     	; 0xc2a <displayMemory+0x98>
  {
    if(i==5 || i==9) 
     c18:	2f 2d       	mov	r18, r15
     c1a:	25 30       	cpi	r18, 0x05	; 5
     c1c:	41 f7       	brne	.-48     	; 0xbee <displayMemory+0x5c>
	{
	   memoryString[i-1] = ',';  
     c1e:	fe 01       	movw	r30, r28
     c20:	ef 0d       	add	r30, r15
     c22:	f1 1d       	adc	r31, r1
     c24:	e0 82       	st	Z, r14
	   i--;
     c26:	fa 94       	dec	r15
     c28:	e4 cf       	rjmp	.-56     	; 0xbf2 <displayMemory+0x60>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     c2a:	f7 2d       	mov	r31, r7
     c2c:	f1 30       	cpi	r31, 0x01	; 1
     c2e:	11 f4       	brne	.+4      	; 0xc34 <displayMemory+0xa2>
     c30:	8b e4       	ldi	r24, 0x4B	; 75
     c32:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     c34:	c4 01       	movw	r24, r8
     c36:	0e 94 50 11 	call	0x22a0	; 0x22a0 <transmitString>
}
     c3a:	64 96       	adiw	r28, 0x14	; 20
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	9f 90       	pop	r9
     c5c:	8f 90       	pop	r8
     c5e:	7f 90       	pop	r7
     c60:	08 95       	ret

00000c62 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
     c62:	2f 92       	push	r2
     c64:	3f 92       	push	r3
     c66:	4f 92       	push	r4
     c68:	5f 92       	push	r5
     c6a:	6f 92       	push	r6
     c6c:	7f 92       	push	r7
     c6e:	8f 92       	push	r8
     c70:	9f 92       	push	r9
     c72:	af 92       	push	r10
     c74:	bf 92       	push	r11
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
     c82:	60 91 9a 02 	lds	r22, 0x029A
     c86:	70 91 9b 02 	lds	r23, 0x029B
     c8a:	20 91 8e 00 	lds	r18, 0x008E
     c8e:	30 91 8f 00 	lds	r19, 0x008F
     c92:	40 91 90 00 	lds	r20, 0x0090
     c96:	50 91 91 00 	lds	r21, 0x0091
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
     ca2:	7b 01       	movw	r14, r22
     ca4:	8c 01       	movw	r16, r24
     ca6:	8a e0       	ldi	r24, 0x0A	; 10
     ca8:	16 95       	lsr	r17
     caa:	07 95       	ror	r16
     cac:	f7 94       	ror	r15
     cae:	e7 94       	ror	r14
     cb0:	8a 95       	dec	r24
     cb2:	d1 f7       	brne	.-12     	; 0xca8 <memoryStatistics+0x46>
totalMemory *= bytesPerSector;
     cb4:	a0 90 8c 00 	lds	r10, 0x008C
     cb8:	b0 90 8d 00 	lds	r11, 0x008D

TX_NEWLINE;
     cbc:	8d e0       	ldi	r24, 0x0D	; 13
     cbe:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
     cc2:	8a e0       	ldi	r24, 0x0A	; 10
     cc4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
TX_NEWLINE;
     cc8:	8d e0       	ldi	r24, 0x0D	; 13
     cca:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
     cce:	8a e0       	ldi	r24, 0x0A	; 10
     cd0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("Total Memory: "));
     cd4:	83 e6       	ldi	r24, 0x63	; 99
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
totalMemory *= bytesPerSector;
     cdc:	95 01       	movw	r18, r10
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	c8 01       	movw	r24, r16
     ce4:	b7 01       	movw	r22, r14
     ce6:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
     cea:	ab 01       	movw	r20, r22
     cec:	bc 01       	movw	r22, r24

TX_NEWLINE;
TX_NEWLINE;
transmitString_F(PSTR("Total Memory: "));

displayMemory (HIGH, totalMemory);
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	0e 94 c9 05 	call	0xb92	; 0xb92 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	0e 94 2b 03 	call	0x656	; 0x656 <getSetFreeCluster>
     d04:	5b 01       	movw	r10, r22
     d06:	6c 01       	movw	r12, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
     d08:	80 91 8e 00 	lds	r24, 0x008E
     d0c:	90 91 8f 00 	lds	r25, 0x008F
     d10:	a0 91 90 00 	lds	r26, 0x0090
     d14:	b0 91 91 00 	lds	r27, 0x0091
     d18:	8a 15       	cp	r24, r10
     d1a:	9b 05       	cpc	r25, r11
     d1c:	ac 05       	cpc	r26, r12
     d1e:	bd 05       	cpc	r27, r13
     d20:	08 f0       	brcs	.+2      	; 0xd24 <memoryStatistics+0xc2>
     d22:	6c c0       	rjmp	.+216    	; 0xdfc <memoryStatistics+0x19a>
{
   freeClusterCountUpdated = 0;
     d24:	10 92 ac 02 	sts	0x02AC, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
     d28:	20 90 92 00 	lds	r2, 0x0092
     d2c:	30 90 93 00 	lds	r3, 0x0093
     d30:	40 90 94 00 	lds	r4, 0x0094
     d34:	50 90 95 00 	lds	r5, 0x0095
     d38:	22 0c       	add	r2, r2
     d3a:	33 1c       	adc	r3, r3
     d3c:	44 1c       	adc	r4, r4
     d3e:	55 1c       	adc	r5, r5
     d40:	22 0c       	add	r2, r2
     d42:	33 1c       	adc	r3, r3
     d44:	44 1c       	adc	r4, r4
     d46:	55 1c       	adc	r5, r5

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
   totalClusterCount = 0;
     d48:	ee 24       	eor	r14, r14
     d4a:	ff 24       	eor	r15, r15
     d4c:	87 01       	movw	r16, r14
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
     d4e:	aa 24       	eor	r10, r10
     d50:	bb 24       	eor	r11, r11
     d52:	65 01       	movw	r12, r10
   totalClusterCount = 0;
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
     d54:	60 90 a5 02 	lds	r6, 0x02A5
     d58:	70 90 a6 02 	lds	r7, 0x02A6
     d5c:	20 91 8c 00 	lds	r18, 0x008C
     d60:	30 91 8d 00 	lds	r19, 0x008D
     d64:	88 24       	eor	r8, r8
     d66:	99 24       	eor	r9, r9
     d68:	80 91 9c 02 	lds	r24, 0x029C
     d6c:	90 91 9d 02 	lds	r25, 0x029D
     d70:	a0 91 9e 02 	lds	r26, 0x029E
     d74:	b0 91 9f 02 	lds	r27, 0x029F
     d78:	68 0e       	add	r6, r24
     d7a:	79 1e       	adc	r7, r25
     d7c:	8a 1e       	adc	r8, r26
     d7e:	9b 1e       	adc	r9, r27
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	c2 01       	movw	r24, r4
     d86:	b1 01       	movw	r22, r2
     d88:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__udivmodsi4>
     d8c:	62 0e       	add	r6, r18
     d8e:	73 1e       	adc	r7, r19
     d90:	84 1e       	adc	r8, r20
     d92:	95 1e       	adc	r9, r21
      SD_readSingleBlock(sector);
     d94:	c4 01       	movw	r24, r8
     d96:	b3 01       	movw	r22, r6
     d98:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	07 c0       	rjmp	.+14     	; 0xdb0 <memoryStatistics+0x14e>
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
     da2:	2c 5f       	subi	r18, 0xFC	; 252
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	20 30       	cpi	r18, 0x00	; 0
     daa:	38 07       	cpc	r19, r24
     dac:	09 f4       	brne	.+2      	; 0xdb0 <memoryStatistics+0x14e>
     dae:	77 c0       	rjmp	.+238    	; 0xe9e <memoryStatistics+0x23c>
//Note: this routine can take upto 15sec for 1GB card (@1MHz clock)
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
     db0:	f9 01       	movw	r30, r18
     db2:	e6 56       	subi	r30, 0x66	; 102
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	a2 81       	ldd	r26, Z+2	; 0x02
     dbc:	b3 81       	ldd	r27, Z+3	; 0x03
     dbe:	bf 70       	andi	r27, 0x0F	; 15
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	a1 05       	cpc	r26, r1
     dc4:	b1 05       	cpc	r27, r1
     dc6:	29 f4       	brne	.+10     	; 0xdd2 <memoryStatistics+0x170>
            freeClusters++;;
     dc8:	08 94       	sec
     dca:	a1 1c       	adc	r10, r1
     dcc:	b1 1c       	adc	r11, r1
     dce:	c1 1c       	adc	r12, r1
     dd0:	d1 1c       	adc	r13, r1
        
         totalClusterCount++;
     dd2:	08 94       	sec
     dd4:	e1 1c       	adc	r14, r1
     dd6:	f1 1c       	adc	r15, r1
     dd8:	01 1d       	adc	r16, r1
     dda:	11 1d       	adc	r17, r1
         if(totalClusterCount == (totalClusters+2)) break;
     ddc:	80 91 8e 00 	lds	r24, 0x008E
     de0:	90 91 8f 00 	lds	r25, 0x008F
     de4:	a0 91 90 00 	lds	r26, 0x0090
     de8:	b0 91 91 00 	lds	r27, 0x0091
     dec:	02 96       	adiw	r24, 0x02	; 2
     dee:	a1 1d       	adc	r26, r1
     df0:	b1 1d       	adc	r27, r1
     df2:	8e 15       	cp	r24, r14
     df4:	9f 05       	cpc	r25, r15
     df6:	a0 07       	cpc	r26, r16
     df8:	b1 07       	cpc	r27, r17
     dfa:	99 f6       	brne	.-90     	; 0xda2 <memoryStatistics+0x140>
      if(i < 128) break;
      cluster+=128;
    } 
}

if(!freeClusterCountUpdated)
     dfc:	80 91 ac 02 	lds	r24, 0x02AC
     e00:	88 23       	and	r24, r24
     e02:	31 f4       	brne	.+12     	; 0xe10 <memoryStatistics+0x1ae>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	a6 01       	movw	r20, r12
     e0a:	95 01       	movw	r18, r10
     e0c:	0e 94 2b 03 	call	0x656	; 0x656 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	80 93 ac 02 	sts	0x02AC, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
     e16:	20 91 9a 02 	lds	r18, 0x029A
     e1a:	30 91 9b 02 	lds	r19, 0x029B
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	c6 01       	movw	r24, r12
     e24:	b5 01       	movw	r22, r10
     e26:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
     e2a:	7b 01       	movw	r14, r22
     e2c:	8c 01       	movw	r16, r24
     e2e:	aa e0       	ldi	r26, 0x0A	; 10
     e30:	16 95       	lsr	r17
     e32:	07 95       	ror	r16
     e34:	f7 94       	ror	r15
     e36:	e7 94       	ror	r14
     e38:	aa 95       	dec	r26
     e3a:	d1 f7       	brne	.-12     	; 0xe30 <memoryStatistics+0x1ce>
freeMemory *= bytesPerSector ;
     e3c:	a0 90 8c 00 	lds	r10, 0x008C
     e40:	b0 90 8d 00 	lds	r11, 0x008D
TX_NEWLINE;
     e44:	8d e0       	ldi	r24, 0x0D	; 13
     e46:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
     e4a:	8a e0       	ldi	r24, 0x0A	; 10
     e4c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR(" Free Memory: "));
     e50:	84 e5       	ldi	r24, 0x54	; 84
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>

if(!freeClusterCountUpdated)
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
freeClusterCountUpdated = 1;  //set flag
freeMemory = freeClusters * sectorPerCluster / 1024;
freeMemory *= bytesPerSector ;
     e58:	95 01       	movw	r18, r10
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	c8 01       	movw	r24, r16
     e60:	b7 01       	movw	r22, r14
     e62:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
     e66:	ab 01       	movw	r20, r22
     e68:	bc 01       	movw	r22, r24
TX_NEWLINE;
transmitString_F(PSTR(" Free Memory: "));
displayMemory (HIGH, freeMemory);
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	0e 94 c9 05 	call	0xb92	; 0xb92 <displayMemory>
TX_NEWLINE; 
     e70:	8d e0       	ldi	r24, 0x0D	; 13
     e72:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
     e76:	8a e0       	ldi	r24, 0x0A	; 10
     e78:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
}
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	bf 90       	pop	r11
     e8a:	af 90       	pop	r10
     e8c:	9f 90       	pop	r9
     e8e:	8f 90       	pop	r8
     e90:	7f 90       	pop	r7
     e92:	6f 90       	pop	r6
     e94:	5f 90       	pop	r5
     e96:	4f 90       	pop	r4
     e98:	3f 90       	pop	r3
     e9a:	2f 90       	pop	r2
     e9c:	08 95       	ret
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	a0 e0       	ldi	r26, 0x00	; 0
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	28 0e       	add	r2, r24
     ea8:	39 1e       	adc	r3, r25
     eaa:	4a 1e       	adc	r4, r26
     eac:	5b 1e       	adc	r5, r27
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
      cluster+=128;
    } 
     eae:	52 cf       	rjmp	.-348    	; 0xd54 <memoryStatistics+0xf2>

00000eb0 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     eb0:	df 92       	push	r13
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	d8 2e       	mov	r13, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     ebc:	db 01       	movw	r26, r22
     ebe:	ca 01       	movw	r24, r20
     ec0:	91 70       	andi	r25, 0x01	; 1
     ec2:	a0 70       	andi	r26, 0x00	; 0
     ec4:	b0 70       	andi	r27, 0x00	; 0
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	a1 05       	cpc	r26, r1
     eca:	b1 05       	cpc	r27, r1
     ecc:	21 f5       	brne	.+72     	; 0xf16 <freeMemoryUpdate+0x66>
     ece:	e9 e0       	ldi	r30, 0x09	; 9
     ed0:	76 95       	lsr	r23
     ed2:	67 95       	ror	r22
     ed4:	57 95       	ror	r21
     ed6:	47 95       	ror	r20
     ed8:	ea 95       	dec	r30
     eda:	d1 f7       	brne	.-12     	; 0xed0 <freeMemoryUpdate+0x20>
  else size = (size / 512) +1;
  if((size % 8) == 0) size = size / 8;
     edc:	db 01       	movw	r26, r22
     ede:	ca 01       	movw	r24, r20
     ee0:	87 70       	andi	r24, 0x07	; 7
     ee2:	90 70       	andi	r25, 0x00	; 0
     ee4:	a0 70       	andi	r26, 0x00	; 0
     ee6:	b0 70       	andi	r27, 0x00	; 0
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	a1 05       	cpc	r26, r1
     eec:	b1 05       	cpc	r27, r1
     eee:	f9 f4       	brne	.+62     	; 0xf2e <freeMemoryUpdate+0x7e>
     ef0:	7a 01       	movw	r14, r20
     ef2:	8b 01       	movw	r16, r22
     ef4:	23 e0       	ldi	r18, 0x03	; 3
     ef6:	16 95       	lsr	r17
     ef8:	07 95       	ror	r16
     efa:	f7 94       	ror	r15
     efc:	e7 94       	ror	r14
     efe:	2a 95       	dec	r18
     f00:	d1 f7       	brne	.-12     	; 0xef6 <freeMemoryUpdate+0x46>
  else size = (size / 8) +1;

  if(freeClusterCountUpdated)
     f02:	80 91 ac 02 	lds	r24, 0x02AC
     f06:	88 23       	and	r24, r24
     f08:	21 f5       	brne	.+72     	; 0xf52 <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
  }
}
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	ff 90       	pop	r15
     f10:	ef 90       	pop	r14
     f12:	df 90       	pop	r13
     f14:	08 95       	ret
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
  else size = (size / 512) +1;
     f16:	39 e0       	ldi	r19, 0x09	; 9
     f18:	76 95       	lsr	r23
     f1a:	67 95       	ror	r22
     f1c:	57 95       	ror	r21
     f1e:	47 95       	ror	r20
     f20:	3a 95       	dec	r19
     f22:	d1 f7       	brne	.-12     	; 0xf18 <freeMemoryUpdate+0x68>
     f24:	4f 5f       	subi	r20, 0xFF	; 255
     f26:	5f 4f       	sbci	r21, 0xFF	; 255
     f28:	6f 4f       	sbci	r22, 0xFF	; 255
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	d7 cf       	rjmp	.-82     	; 0xedc <freeMemoryUpdate+0x2c>
  if((size % 8) == 0) size = size / 8;
  else size = (size / 8) +1;
     f2e:	7a 01       	movw	r14, r20
     f30:	8b 01       	movw	r16, r22
     f32:	93 e0       	ldi	r25, 0x03	; 3
     f34:	16 95       	lsr	r17
     f36:	07 95       	ror	r16
     f38:	f7 94       	ror	r15
     f3a:	e7 94       	ror	r14
     f3c:	9a 95       	dec	r25
     f3e:	d1 f7       	brne	.-12     	; 0xf34 <freeMemoryUpdate+0x84>
     f40:	08 94       	sec
     f42:	e1 1c       	adc	r14, r1
     f44:	f1 1c       	adc	r15, r1
     f46:	01 1d       	adc	r16, r1
     f48:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
     f4a:	80 91 ac 02 	lds	r24, 0x02AC
     f4e:	88 23       	and	r24, r24
     f50:	e1 f2       	breq	.-72     	; 0xf0a <freeMemoryUpdate+0x5a>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	0e 94 2b 03 	call	0x656	; 0x656 <getSetFreeCluster>
	if(flag == ADD)
     f62:	dd 20       	and	r13, r13
     f64:	81 f0       	breq	.+32     	; 0xf86 <freeMemoryUpdate+0xd6>
  	   freeClusters = freeClusters + size;
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
     f66:	9b 01       	movw	r18, r22
     f68:	ac 01       	movw	r20, r24
     f6a:	2e 19       	sub	r18, r14
     f6c:	3f 09       	sbc	r19, r15
     f6e:	40 0b       	sbc	r20, r16
     f70:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	0e 94 2b 03 	call	0x656	; 0x656 <getSetFreeCluster>
  }
}
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	08 95       	ret

  if(freeClusterCountUpdated)
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
	if(flag == ADD)
  	   freeClusters = freeClusters + size;
     f86:	9b 01       	movw	r18, r22
     f88:	ac 01       	movw	r20, r24
     f8a:	2e 0d       	add	r18, r14
     f8c:	3f 1d       	adc	r19, r15
     f8e:	40 1f       	adc	r20, r16
     f90:	51 1f       	adc	r21, r17
     f92:	ef cf       	rjmp	.-34     	; 0xf72 <freeMemoryUpdate+0xc2>

00000f94 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
     f94:	2f 92       	push	r2
     f96:	3f 92       	push	r3
     f98:	4f 92       	push	r4
     f9a:	5f 92       	push	r5
     f9c:	6f 92       	push	r6
     f9e:	7f 92       	push	r7
     fa0:	8f 92       	push	r8
     fa2:	9f 92       	push	r9
     fa4:	af 92       	push	r10
     fa6:	bf 92       	push	r11
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	2d 97       	sbiw	r28, 0x0d	; 13
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	68 2e       	mov	r6, r24
     fca:	d6 2e       	mov	r13, r22
     fcc:	77 2e       	mov	r7, r23
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
     fce:	80 91 92 00 	lds	r24, 0x0092
     fd2:	90 91 93 00 	lds	r25, 0x0093
     fd6:	a0 91 94 00 	lds	r26, 0x0094
     fda:	b0 91 95 00 	lds	r27, 0x0095
     fde:	89 87       	std	Y+9, r24	; 0x09
     fe0:	9a 87       	std	Y+10, r25	; 0x0a
     fe2:	ab 87       	std	Y+11, r26	; 0x0b
     fe4:	bc 87       	std	Y+12, r27	; 0x0c
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
     fe6:	c6 2c       	mov	r12, r6
     fe8:	ca 94       	dec	r12
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     fea:	20 91 9a 02 	lds	r18, 0x029A
     fee:	30 91 9b 02 	lds	r19, 0x029B
     ff2:	e0 90 84 00 	lds	r14, 0x0084
     ff6:	f0 90 85 00 	lds	r15, 0x0085
     ffa:	00 91 86 00 	lds	r16, 0x0086
     ffe:	10 91 87 00 	lds	r17, 0x0087
    1002:	69 85       	ldd	r22, Y+9	; 0x09
    1004:	7a 85       	ldd	r23, Y+10	; 0x0a
    1006:	8b 85       	ldd	r24, Y+11	; 0x0b
    1008:	9c 85       	ldd	r25, Y+12	; 0x0c
    100a:	62 50       	subi	r22, 0x02	; 2
    100c:	70 40       	sbci	r23, 0x00	; 0
    100e:	80 40       	sbci	r24, 0x00	; 0
    1010:	90 40       	sbci	r25, 0x00	; 0
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
    101a:	4b 01       	movw	r8, r22
    101c:	5c 01       	movw	r10, r24
    101e:	8e 0c       	add	r8, r14
    1020:	9f 1c       	adc	r9, r15
    1022:	a0 1e       	adc	r10, r16
    1024:	b1 1e       	adc	r11, r17

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1026:	80 91 9a 02 	lds	r24, 0x029A
    102a:	90 91 9b 02 	lds	r25, 0x029B
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	09 f4       	brne	.+2      	; 0x1034 <findFiles+0xa0>
    1032:	16 c1       	rjmp	.+556    	; 0x1260 <findFiles+0x2cc>
    1034:	22 24       	eor	r2, r2
    1036:	33 24       	eor	r3, r3
    1038:	21 01       	movw	r4, r2
    103a:	8d 82       	std	Y+5, r8	; 0x05
    103c:	9e 82       	std	Y+6, r9	; 0x06
    103e:	af 82       	std	Y+7, r10	; 0x07
    1040:	b8 86       	std	Y+8, r11	; 0x08
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	af 81       	ldd	r26, Y+7	; 0x07
    1048:	b8 85       	ldd	r27, Y+8	; 0x08
    104a:	82 0d       	add	r24, r2
    104c:	93 1d       	adc	r25, r3
    104e:	a4 1d       	adc	r26, r4
    1050:	b5 1d       	adc	r27, r5
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	ab 83       	std	Y+3, r26	; 0x03
    1058:	bc 83       	std	Y+4, r27	; 0x04
   {
     SD_readSingleBlock (firstSector + sector);
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
    1062:	80 91 8c 00 	lds	r24, 0x008C
    1066:	90 91 8d 00 	lds	r25, 0x008D
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	09 f4       	brne	.+2      	; 0x1070 <findFiles+0xdc>
    106e:	e7 c0       	rjmp	.+462    	; 0x123e <findFiles+0x2aa>
     {
	    dir = (struct dir_Structure *) &buffer[i];
    1070:	2a e9       	ldi	r18, 0x9A	; 154
    1072:	30 e0       	ldi	r19, 0x00	; 0

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1074:	80 91 9a 00 	lds	r24, 0x009A
    1078:	88 23       	and	r24, r24
    107a:	09 f4       	brne	.+2      	; 0x107e <findFiles+0xea>
    107c:	69 c0       	rjmp	.+210    	; 0x1150 <findFiles+0x1bc>
    107e:	00 e0       	ldi	r16, 0x00	; 0
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	59 01       	movw	r10, r18
		{
		  if((flag == GET_FILE) || (flag == DELETE))
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1084:	85 3e       	cpi	r24, 0xE5	; 229
    1086:	09 f4       	brne	.+2      	; 0x108a <findFiles+0xf6>
    1088:	4e c0       	rjmp	.+156    	; 0x1126 <findFiles+0x192>
    108a:	f5 01       	movw	r30, r10
    108c:	83 85       	ldd	r24, Z+11	; 0x0b
    108e:	8f 30       	cpi	r24, 0x0F	; 15
    1090:	09 f4       	brne	.+2      	; 0x1094 <findFiles+0x100>
    1092:	49 c0       	rjmp	.+146    	; 0x1126 <findFiles+0x192>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1094:	fc 2d       	mov	r31, r12
    1096:	f2 30       	cpi	r31, 0x02	; 2
    1098:	08 f4       	brcc	.+2      	; 0x109c <findFiles+0x108>
    109a:	7b c0       	rjmp	.+246    	; 0x1192 <findFiles+0x1fe>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    109c:	8d e0       	ldi	r24, 0x0D	; 13
    109e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    10a2:	8a e0       	ldi	r24, 0x0A	; 10
    10a4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    10a8:	88 24       	eor	r8, r8
    10aa:	83 94       	inc	r8
    10ac:	ee 24       	eor	r14, r14
    10ae:	ff 24       	eor	r15, r15
    10b0:	0d c0       	rjmp	.+26     	; 0x10cc <findFiles+0x138>
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
    10b2:	f5 01       	movw	r30, r10
    10b4:	ee 0d       	add	r30, r14
    10b6:	f1 1d       	adc	r31, r1
    10b8:	80 81       	ld	r24, Z
    10ba:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    10be:	e8 2d       	mov	r30, r8
    10c0:	eb 30       	cpi	r30, 0x0B	; 11
    10c2:	98 f4       	brcc	.+38     	; 0x10ea <findFiles+0x156>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    10c4:	08 94       	sec
    10c6:	e1 1c       	adc	r14, r1
    10c8:	f1 1c       	adc	r15, r1
    10ca:	83 94       	inc	r8
    10cc:	9e 2d       	mov	r25, r14
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
    10ce:	98 30       	cpi	r25, 0x08	; 8
    10d0:	81 f7       	brne	.-32     	; 0x10b2 <findFiles+0x11e>
    10d2:	80 e2       	ldi	r24, 0x20	; 32
    10d4:	ed 86       	std	Y+13, r14	; 0x0d
    10d6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
			   transmitByte (dir->name[j]);
    10da:	9d 85       	ldd	r25, Y+13	; 0x0d
    10dc:	f5 01       	movw	r30, r10
    10de:	e9 0f       	add	r30, r25
    10e0:	f1 1d       	adc	r31, r1
    10e2:	80 81       	ld	r24, Z
    10e4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    10e8:	ed cf       	rjmp	.-38     	; 0x10c4 <findFiles+0x130>
			 }
		     transmitString_F (PSTR("   "));
    10ea:	8f e8       	ldi	r24, 0x8F	; 143
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    10f2:	d5 01       	movw	r26, r10
    10f4:	1b 96       	adiw	r26, 0x0b	; 11
    10f6:	8c 91       	ld	r24, X
    10f8:	1b 97       	sbiw	r26, 0x0b	; 11
    10fa:	80 31       	cpi	r24, 0x10	; 16
    10fc:	09 f4       	brne	.+2      	; 0x1100 <findFiles+0x16c>
    10fe:	9c c0       	rjmp	.+312    	; 0x1238 <findFiles+0x2a4>
    1100:	88 30       	cpi	r24, 0x08	; 8
    1102:	09 f4       	brne	.+2      	; 0x1106 <findFiles+0x172>
    1104:	94 c0       	rjmp	.+296    	; 0x122e <findFiles+0x29a>
			 {
			     transmitString_F (PSTR("FILE" ));
    1106:	8a e8       	ldi	r24, 0x8A	; 138
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
		         transmitString_F (PSTR("   "));
    110e:	86 e8       	ldi	r24, 0x86	; 134
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    1116:	f5 01       	movw	r30, r10
    1118:	44 8d       	ldd	r20, Z+28	; 0x1c
    111a:	55 8d       	ldd	r21, Z+29	; 0x1d
    111c:	66 8d       	ldd	r22, Z+30	; 0x1e
    111e:	77 8d       	ldd	r23, Z+31	; 0x1f
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	0e 94 c9 05 	call	0xb92	; 0xb92 <displayMemory>
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1126:	00 5e       	subi	r16, 0xE0	; 224
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	80 91 8c 00 	lds	r24, 0x008C
    112e:	90 91 8d 00 	lds	r25, 0x008D
    1132:	08 17       	cp	r16, r24
    1134:	19 07       	cpc	r17, r25
    1136:	08 f0       	brcs	.+2      	; 0x113a <findFiles+0x1a6>
    1138:	82 c0       	rjmp	.+260    	; 0x123e <findFiles+0x2aa>
//Arguments: #1 - flag: GET_LIST, GET_FILE or DELETE #2 - pointer to file name (0 if arg#1 is GET_LIST)
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
    113a:	8a e9       	ldi	r24, 0x9A	; 154
    113c:	a8 2e       	mov	r10, r24
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	b8 2e       	mov	r11, r24
    1142:	a0 0e       	add	r10, r16
    1144:	b1 1e       	adc	r11, r17

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1146:	d5 01       	movw	r26, r10
    1148:	8c 91       	ld	r24, X
    114a:	88 23       	and	r24, r24
    114c:	09 f0       	breq	.+2      	; 0x1150 <findFiles+0x1bc>
    114e:	9a cf       	rjmp	.-204    	; 0x1084 <findFiles+0xf0>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
    1150:	86 2d       	mov	r24, r6
    1152:	81 50       	subi	r24, 0x01	; 1
    1154:	82 30       	cpi	r24, 0x02	; 2
    1156:	08 f4       	brcc	.+2      	; 0x115a <findFiles+0x1c6>
    1158:	1f c1       	rjmp	.+574    	; 0x1398 <findFiles+0x404>
   }

   cluster = (getSetNextCluster (cluster, GET, 0));

   if(cluster > 0x0ffffff6)
   	 return 0;
    115a:	cc 24       	eor	r12, r12
    115c:	dd 24       	eor	r13, r13
   if(cluster == 0) 
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
 }
return 0;
}
    115e:	c6 01       	movw	r24, r12
    1160:	2d 96       	adiw	r28, 0x0d	; 13
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
    117c:	bf 90       	pop	r11
    117e:	af 90       	pop	r10
    1180:	9f 90       	pop	r9
    1182:	8f 90       	pop	r8
    1184:	7f 90       	pop	r7
    1186:	6f 90       	pop	r6
    1188:	5f 90       	pop	r5
    118a:	4f 90       	pop	r4
    118c:	3f 90       	pop	r3
    118e:	2f 90       	pop	r2
    1190:	08 95       	ret
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1192:	d5 01       	movw	r26, r10
    1194:	ed 2d       	mov	r30, r13
    1196:	f7 2d       	mov	r31, r7
    1198:	80 e0       	ldi	r24, 0x00	; 0
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    119a:	2d 91       	ld	r18, X+
    119c:	91 91       	ld	r25, Z+
    119e:	29 17       	cp	r18, r25
    11a0:	11 f6       	brne	.-124    	; 0x1126 <findFiles+0x192>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	8b 30       	cpi	r24, 0x0B	; 11
    11a6:	c9 f7       	brne	.-14     	; 0x119a <findFiles+0x206>
    11a8:	65 01       	movw	r12, r10
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
			{
			  if(flag == GET_FILE)
    11aa:	26 2d       	mov	r18, r6
    11ac:	21 30       	cpi	r18, 0x01	; 1
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <findFiles+0x21e>
    11b0:	7c c0       	rjmp	.+248    	; 0x12aa <findFiles+0x316>
              {
			    appendFileSector = firstSector + sector;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	ab 81       	ldd	r26, Y+3	; 0x03
    11b8:	bc 81       	ldd	r27, Y+4	; 0x04
    11ba:	80 93 ad 02 	sts	0x02AD, r24
    11be:	90 93 ae 02 	sts	0x02AE, r25
    11c2:	a0 93 af 02 	sts	0x02AF, r26
    11c6:	b0 93 b0 02 	sts	0x02B0, r27
				appendFileLocation = i;
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	00 93 80 00 	sts	0x0080, r16
    11d2:	10 93 81 00 	sts	0x0081, r17
    11d6:	20 93 82 00 	sts	0x0082, r18
    11da:	30 93 83 00 	sts	0x0083, r19
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    11de:	d5 01       	movw	r26, r10
    11e0:	54 96       	adiw	r26, 0x14	; 20
    11e2:	8d 91       	ld	r24, X+
    11e4:	9c 91       	ld	r25, X
    11e6:	55 97       	sbiw	r26, 0x15	; 21
    11e8:	a0 e0       	ldi	r26, 0x00	; 0
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	dc 01       	movw	r26, r24
    11ee:	99 27       	eor	r25, r25
    11f0:	88 27       	eor	r24, r24
    11f2:	f5 01       	movw	r30, r10
    11f4:	22 8d       	ldd	r18, Z+26	; 0x1a
    11f6:	33 8d       	ldd	r19, Z+27	; 0x1b
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	82 2b       	or	r24, r18
    11fe:	93 2b       	or	r25, r19
    1200:	a4 2b       	or	r26, r20
    1202:	b5 2b       	or	r27, r21
    1204:	80 93 a7 02 	sts	0x02A7, r24
    1208:	90 93 a8 02 	sts	0x02A8, r25
    120c:	a0 93 a9 02 	sts	0x02A9, r26
    1210:	b0 93 aa 02 	sts	0x02AA, r27
				fileSize = dir->fileSize;
    1214:	84 8d       	ldd	r24, Z+28	; 0x1c
    1216:	95 8d       	ldd	r25, Z+29	; 0x1d
    1218:	a6 8d       	ldd	r26, Z+30	; 0x1e
    121a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    121c:	80 93 88 00 	sts	0x0088, r24
    1220:	90 93 89 00 	sts	0x0089, r25
    1224:	a0 93 8a 00 	sts	0x008A, r26
    1228:	b0 93 8b 00 	sts	0x008B, r27
			    return (dir);
    122c:	98 cf       	rjmp	.-208    	; 0x115e <findFiles+0x1ca>
			     transmitString_F (PSTR("FILE" ));
		         transmitString_F (PSTR("   "));
			     displayMemory (LOW, dir->fileSize);
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    122e:	8d e7       	ldi	r24, 0x7D	; 125
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    1236:	77 cf       	rjmp	.-274    	; 0x1126 <findFiles+0x192>
    1238:	82 e8       	ldi	r24, 0x82	; 130
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	fa cf       	rjmp	.-12     	; 0x1232 <findFiles+0x29e>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    123e:	08 94       	sec
    1240:	21 1c       	adc	r2, r1
    1242:	31 1c       	adc	r3, r1
    1244:	41 1c       	adc	r4, r1
    1246:	51 1c       	adc	r5, r1
    1248:	80 91 9a 02 	lds	r24, 0x029A
    124c:	90 91 9b 02 	lds	r25, 0x029B
    1250:	a0 e0       	ldi	r26, 0x00	; 0
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	28 16       	cp	r2, r24
    1256:	39 06       	cpc	r3, r25
    1258:	4a 06       	cpc	r4, r26
    125a:	5b 06       	cpc	r5, r27
    125c:	08 f4       	brcc	.+2      	; 0x1260 <findFiles+0x2cc>
    125e:	f1 ce       	rjmp	.-542    	; 0x1042 <findFiles+0xae>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    1260:	69 85       	ldd	r22, Y+9	; 0x09
    1262:	7a 85       	ldd	r23, Y+10	; 0x0a
    1264:	8b 85       	ldd	r24, Y+11	; 0x0b
    1266:	9c 85       	ldd	r25, Y+12	; 0x0c
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	00 e0       	ldi	r16, 0x00	; 0
    126c:	10 e0       	ldi	r17, 0x00	; 0
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	0e 94 b2 02 	call	0x564	; 0x564 <getSetNextCluster>
    1276:	69 87       	std	Y+9, r22	; 0x09
    1278:	7a 87       	std	Y+10, r23	; 0x0a
    127a:	8b 87       	std	Y+11, r24	; 0x0b
    127c:	9c 87       	std	Y+12, r25	; 0x0c

   if(cluster > 0x0ffffff6)
    127e:	67 3f       	cpi	r22, 0xF7	; 247
    1280:	ff ef       	ldi	r31, 0xFF	; 255
    1282:	7f 07       	cpc	r23, r31
    1284:	ff ef       	ldi	r31, 0xFF	; 255
    1286:	8f 07       	cpc	r24, r31
    1288:	ff e0       	ldi	r31, 0x0F	; 15
    128a:	9f 07       	cpc	r25, r31
    128c:	08 f0       	brcs	.+2      	; 0x1290 <findFiles+0x2fc>
    128e:	65 cf       	rjmp	.-310    	; 0x115a <findFiles+0x1c6>
   	 return 0;
   if(cluster == 0) 
    1290:	61 15       	cp	r22, r1
    1292:	71 05       	cpc	r23, r1
    1294:	81 05       	cpc	r24, r1
    1296:	91 05       	cpc	r25, r1
    1298:	09 f0       	breq	.+2      	; 0x129c <findFiles+0x308>
    129a:	a7 ce       	rjmp	.-690    	; 0xfea <findFiles+0x56>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    129c:	84 e6       	ldi	r24, 0x64	; 100
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    12a4:	cc 24       	eor	r12, r12
    12a6:	dd 24       	eor	r13, r13
    12a8:	5a cf       	rjmp	.-332    	; 0x115e <findFiles+0x1ca>
				fileSize = dir->fileSize;
			    return (dir);
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    12aa:	8d e0       	ldi	r24, 0x0D	; 13
    12ac:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    12b0:	8a e0       	ldi	r24, 0x0A	; 10
    12b2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
    12b6:	81 ea       	ldi	r24, 0xA1	; 161
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
				 TX_NEWLINE;
    12be:	8d e0       	ldi	r24, 0x0D	; 13
    12c0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    12c4:	8a e0       	ldi	r24, 0x0A	; 10
    12c6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
				 TX_NEWLINE;
    12ca:	8d e0       	ldi	r24, 0x0D	; 13
    12cc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    12d0:	8a e0       	ldi	r24, 0x0A	; 10
    12d2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    12d6:	d5 01       	movw	r26, r10
    12d8:	54 96       	adiw	r26, 0x14	; 20
    12da:	8d 90       	ld	r8, X+
    12dc:	9c 90       	ld	r9, X
    12de:	55 97       	sbiw	r26, 0x15	; 21
    12e0:	aa 24       	eor	r10, r10
    12e2:	bb 24       	eor	r11, r11
    12e4:	54 01       	movw	r10, r8
    12e6:	99 24       	eor	r9, r9
    12e8:	88 24       	eor	r8, r8
    12ea:	5a 96       	adiw	r26, 0x1a	; 26
    12ec:	8d 91       	ld	r24, X+
    12ee:	9c 91       	ld	r25, X
    12f0:	5b 97       	sbiw	r26, 0x1b	; 27
    12f2:	a0 e0       	ldi	r26, 0x00	; 0
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	88 2a       	or	r8, r24
    12f8:	99 2a       	or	r9, r25
    12fa:	aa 2a       	or	r10, r26
    12fc:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    12fe:	85 ee       	ldi	r24, 0xE5	; 229
    1300:	f6 01       	movw	r30, r12
    1302:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    1304:	69 81       	ldd	r22, Y+1	; 0x01
    1306:	7a 81       	ldd	r23, Y+2	; 0x02
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    1310:	d6 01       	movw	r26, r12
    1312:	5c 96       	adiw	r26, 0x1c	; 28
    1314:	4d 91       	ld	r20, X+
    1316:	5d 91       	ld	r21, X+
    1318:	6d 91       	ld	r22, X+
    131a:	7c 91       	ld	r23, X
    131c:	5f 97       	sbiw	r26, 0x1f	; 31
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	0e 94 58 07 	call	0xeb0	; 0xeb0 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1324:	82 e0       	ldi	r24, 0x02	; 2
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	0e 94 2b 03 	call	0x656	; 0x656 <getSetFreeCluster>
				 if(firstCluster < cluster)
    1334:	86 16       	cp	r8, r22
    1336:	97 06       	cpc	r9, r23
    1338:	a8 06       	cpc	r10, r24
    133a:	b9 06       	cpc	r11, r25
    133c:	48 f4       	brcc	.+18     	; 0x1350 <findFiles+0x3bc>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	a5 01       	movw	r20, r10
    1344:	94 01       	movw	r18, r8
    1346:	0e 94 2b 03 	call	0x656	; 0x656 <getSetFreeCluster>
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <findFiles+0x3bc>
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {transmitString_F(PSTR("File deleted!"));return 0;}
					firstCluster = nextCluster;
    134c:	46 01       	movw	r8, r12
    134e:	57 01       	movw	r10, r14
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1350:	c5 01       	movw	r24, r10
    1352:	b4 01       	movw	r22, r8
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	00 e0       	ldi	r16, 0x00	; 0
    1358:	10 e0       	ldi	r17, 0x00	; 0
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	0e 94 b2 02 	call	0x564	; 0x564 <getSetNextCluster>
    1362:	6b 01       	movw	r12, r22
    1364:	7c 01       	movw	r14, r24
					getSetNextCluster (firstCluster, SET, 0);
    1366:	c5 01       	movw	r24, r10
    1368:	b4 01       	movw	r22, r8
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	00 e0       	ldi	r16, 0x00	; 0
    136e:	10 e0       	ldi	r17, 0x00	; 0
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	0e 94 b2 02 	call	0x564	; 0x564 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    1378:	b7 ef       	ldi	r27, 0xF7	; 247
    137a:	cb 16       	cp	r12, r27
    137c:	bf ef       	ldi	r27, 0xFF	; 255
    137e:	db 06       	cpc	r13, r27
    1380:	bf ef       	ldi	r27, 0xFF	; 255
    1382:	eb 06       	cpc	r14, r27
    1384:	bf e0       	ldi	r27, 0x0F	; 15
    1386:	fb 06       	cpc	r15, r27
    1388:	08 f3       	brcs	.-62     	; 0x134c <findFiles+0x3b8>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    138a:	83 e9       	ldi	r24, 0x93	; 147
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    1392:	cc 24       	eor	r12, r12
    1394:	dd 24       	eor	r13, r13
    1396:	e3 ce       	rjmp	.-570    	; 0x115e <findFiles+0x1ca>
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
		{
		  if((flag == GET_FILE) || (flag == DELETE))
		      transmitString_F(PSTR("File does not exist!"));
    1398:	8c ea       	ldi	r24, 0xAC	; 172
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
		  return 0;   
    13a0:	cc 24       	eor	r12, r12
    13a2:	dd 24       	eor	r13, r13
    13a4:	dc ce       	rjmp	.-584    	; 0x115e <findFiles+0x1ca>

000013a6 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    13ac:	0e 94 9e 04 	call	0x93c	; 0x93c <convertFileName>
  if(error) return;
    13b0:	88 23       	and	r24, r24
    13b2:	21 f4       	brne	.+8      	; 0x13bc <deleteFile+0x16>

  findFiles (DELETE, fileName);
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	be 01       	movw	r22, r28
    13b8:	0e 94 ca 07 	call	0xf94	; 0xf94 <findFiles>
}
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    13c2:	2f 92       	push	r2
    13c4:	3f 92       	push	r3
    13c6:	4f 92       	push	r4
    13c8:	5f 92       	push	r5
    13ca:	6f 92       	push	r6
    13cc:	7f 92       	push	r7
    13ce:	8f 92       	push	r8
    13d0:	9f 92       	push	r9
    13d2:	af 92       	push	r10
    13d4:	bf 92       	push	r11
    13d6:	cf 92       	push	r12
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	28 97       	sbiw	r28, 0x08	; 8
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	18 2f       	mov	r17, r24
    13f8:	6b 01       	movw	r12, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    13fa:	cb 01       	movw	r24, r22
    13fc:	0e 94 9e 04 	call	0x93c	; 0x93c <convertFileName>
if(error) return 2;
    1400:	88 23       	and	r24, r24
    1402:	d1 f0       	breq	.+52     	; 0x1438 <readFile+0x76>
    1404:	82 e0       	ldi	r24, 0x02	; 2
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
}
return 0;
}
    1406:	28 96       	adiw	r28, 0x08	; 8
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	bf 90       	pop	r11
    1424:	af 90       	pop	r10
    1426:	9f 90       	pop	r9
    1428:	8f 90       	pop	r8
    142a:	7f 90       	pop	r7
    142c:	6f 90       	pop	r6
    142e:	5f 90       	pop	r5
    1430:	4f 90       	pop	r4
    1432:	3f 90       	pop	r3
    1434:	2f 90       	pop	r2
    1436:	08 95       	ret
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;

dir = findFiles (GET_FILE, fileName); //get the file location
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	b6 01       	movw	r22, r12
    143c:	0e 94 ca 07 	call	0xf94	; 0xf94 <findFiles>
    1440:	bc 01       	movw	r22, r24
if(dir == 0) 
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	09 f4       	brne	.+2      	; 0x1448 <readFile+0x86>
    1446:	8a c0       	rjmp	.+276    	; 0x155c <readFile+0x19a>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    1448:	11 30       	cpi	r17, 0x01	; 1
    144a:	09 f4       	brne	.+2      	; 0x144e <readFile+0x8c>
    144c:	89 c0       	rjmp	.+274    	; 0x1560 <readFile+0x19e>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    144e:	dc 01       	movw	r26, r24
    1450:	54 96       	adiw	r26, 0x14	; 20
    1452:	2d 91       	ld	r18, X+
    1454:	3c 91       	ld	r19, X
    1456:	55 97       	sbiw	r26, 0x15	; 21
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	d9 01       	movw	r26, r18
    145e:	99 27       	eor	r25, r25
    1460:	88 27       	eor	r24, r24
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	ab 83       	std	Y+3, r26	; 0x03
    1468:	bc 83       	std	Y+4, r27	; 0x04
    146a:	db 01       	movw	r26, r22
    146c:	5a 96       	adiw	r26, 0x1a	; 26
    146e:	2d 91       	ld	r18, X+
    1470:	3c 91       	ld	r19, X
    1472:	5b 97       	sbiw	r26, 0x1b	; 27
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	ab 81       	ldd	r26, Y+3	; 0x03
    147e:	bc 81       	ldd	r27, Y+4	; 0x04
    1480:	82 2b       	or	r24, r18
    1482:	93 2b       	or	r25, r19
    1484:	a4 2b       	or	r26, r20
    1486:	b5 2b       	or	r27, r21
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	ab 83       	std	Y+3, r26	; 0x03
    148e:	bc 83       	std	Y+4, r27	; 0x04

fileSize = dir->fileSize;
    1490:	db 01       	movw	r26, r22
    1492:	5c 96       	adiw	r26, 0x1c	; 28
    1494:	8d 90       	ld	r8, X+
    1496:	9d 90       	ld	r9, X+
    1498:	ad 90       	ld	r10, X+
    149a:	bc 90       	ld	r11, X
    149c:	5f 97       	sbiw	r26, 0x1f	; 31

TX_NEWLINE;
    149e:	8d e0       	ldi	r24, 0x0D	; 13
    14a0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    14a4:	8a e0       	ldi	r24, 0x0A	; 10
    14a6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
TX_NEWLINE;
    14aa:	8d e0       	ldi	r24, 0x0D	; 13
    14ac:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    14b0:	8a e0       	ldi	r24, 0x0A	; 10
    14b2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    14b6:	cc 24       	eor	r12, r12
    14b8:	dd 24       	eor	r13, r13
    14ba:	76 01       	movw	r14, r12
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    14bc:	20 91 9a 02 	lds	r18, 0x029A
    14c0:	30 91 9b 02 	lds	r19, 0x029B
    14c4:	80 91 84 00 	lds	r24, 0x0084
    14c8:	90 91 85 00 	lds	r25, 0x0085
    14cc:	a0 91 86 00 	lds	r26, 0x0086
    14d0:	b0 91 87 00 	lds	r27, 0x0087
    14d4:	8d 83       	std	Y+5, r24	; 0x05
    14d6:	9e 83       	std	Y+6, r25	; 0x06
    14d8:	af 83       	std	Y+7, r26	; 0x07
    14da:	b8 87       	std	Y+8, r27	; 0x08
    14dc:	69 81       	ldd	r22, Y+1	; 0x01
    14de:	7a 81       	ldd	r23, Y+2	; 0x02
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	62 50       	subi	r22, 0x02	; 2
    14e6:	70 40       	sbci	r23, 0x00	; 0
    14e8:	80 40       	sbci	r24, 0x00	; 0
    14ea:	90 40       	sbci	r25, 0x00	; 0
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
    14f4:	2b 01       	movw	r4, r22
    14f6:	3c 01       	movw	r6, r24
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	af 81       	ldd	r26, Y+7	; 0x07
    14fe:	b8 85       	ldd	r27, Y+8	; 0x08
    1500:	48 0e       	add	r4, r24
    1502:	59 1e       	adc	r5, r25
    1504:	6a 1e       	adc	r6, r26
    1506:	7b 1e       	adc	r7, r27

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    1508:	80 91 9a 02 	lds	r24, 0x029A
    150c:	90 91 9b 02 	lds	r25, 0x029B
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	91 f1       	breq	.+100    	; 0x1578 <readFile+0x1b6>
    1514:	10 e0       	ldi	r17, 0x00	; 0
  {
    SD_readSingleBlock(firstSector + j);
    1516:	c3 01       	movw	r24, r6
    1518:	b2 01       	movw	r22, r4
    151a:	61 0f       	add	r22, r17
    151c:	71 1d       	adc	r23, r1
    151e:	81 1d       	adc	r24, r1
    1520:	91 1d       	adc	r25, r1
    1522:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>
    
	for(k=0; k<512; k++)
    1526:	22 24       	eor	r2, r2
    1528:	33 24       	eor	r3, r3
    152a:	0d c0       	rjmp	.+26     	; 0x1546 <readFile+0x184>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    152c:	08 94       	sec
    152e:	c1 1c       	adc	r12, r1
    1530:	d1 1c       	adc	r13, r1
    1532:	e1 1c       	adc	r14, r1
    1534:	f1 1c       	adc	r15, r1

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    1536:	08 94       	sec
    1538:	21 1c       	adc	r2, r1
    153a:	31 1c       	adc	r3, r1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	29 16       	cp	r2, r25
    1540:	92 e0       	ldi	r25, 0x02	; 2
    1542:	39 06       	cpc	r3, r25
    1544:	79 f0       	breq	.+30     	; 0x1564 <readFile+0x1a2>
    {
      transmitByte(buffer[k]);
    1546:	f1 01       	movw	r30, r2
    1548:	e6 56       	subi	r30, 0x66	; 102
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	80 81       	ld	r24, Z
    154e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    1552:	c8 14       	cp	r12, r8
    1554:	d9 04       	cpc	r13, r9
    1556:	ea 04       	cpc	r14, r10
    1558:	fb 04       	cpc	r15, r11
    155a:	40 f3       	brcs	.-48     	; 0x152c <readFile+0x16a>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	53 cf       	rjmp	.-346    	; 0x1406 <readFile+0x44>

dir = findFiles (GET_FILE, fileName); //get the file location
if(dir == 0) 
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	51 cf       	rjmp	.-350    	; 0x1406 <readFile+0x44>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    1564:	1f 5f       	subi	r17, 0xFF	; 255
    1566:	20 91 9a 02 	lds	r18, 0x029A
    156a:	30 91 9b 02 	lds	r19, 0x029B
    156e:	81 2f       	mov	r24, r17
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	82 17       	cp	r24, r18
    1574:	93 07       	cpc	r25, r19
    1576:	78 f2       	brcs	.-98     	; 0x1516 <readFile+0x154>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    1578:	69 81       	ldd	r22, Y+1	; 0x01
    157a:	7a 81       	ldd	r23, Y+2	; 0x02
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	00 e0       	ldi	r16, 0x00	; 0
    1584:	10 e0       	ldi	r17, 0x00	; 0
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	0e 94 b2 02 	call	0x564	; 0x564 <getSetNextCluster>
    158e:	69 83       	std	Y+1, r22	; 0x01
    1590:	7a 83       	std	Y+2, r23	; 0x02
    1592:	8b 83       	std	Y+3, r24	; 0x03
    1594:	9c 83       	std	Y+4, r25	; 0x04
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    1596:	61 15       	cp	r22, r1
    1598:	71 05       	cpc	r23, r1
    159a:	81 05       	cpc	r24, r1
    159c:	91 05       	cpc	r25, r1
    159e:	09 f0       	breq	.+2      	; 0x15a2 <readFile+0x1e0>
    15a0:	8d cf       	rjmp	.-230    	; 0x14bc <readFile+0xfa>
    15a2:	8b e4       	ldi	r24, 0x4B	; 75
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	2c cf       	rjmp	.-424    	; 0x1406 <readFile+0x44>

000015ae <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    15ae:	2f 92       	push	r2
    15b0:	3f 92       	push	r3
    15b2:	4f 92       	push	r4
    15b4:	5f 92       	push	r5
    15b6:	6f 92       	push	r6
    15b8:	7f 92       	push	r7
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	60 97       	sbiw	r28, 0x10	; 16
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	2c 01       	movw	r4, r24
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	b2 01       	movw	r22, r4
    15e8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <readFile>

if(j == 1) 
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <writeFile+0x44>
    15f0:	91 c3       	rjmp	.+1826   	; 0x1d14 <writeFile+0x766>
  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
//  appendFile();
//  return;
}
else if(j == 2) 
    15f2:	82 30       	cpi	r24, 0x02	; 2
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <writeFile+0x4a>
    15f6:	eb c1       	rjmp	.+982    	; 0x19ce <writeFile+0x420>
   return; //invalid file name
else
{
  TX_NEWLINE;
    15f8:	8d e0       	ldi	r24, 0x0D	; 13
    15fa:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    15fe:	8a e0       	ldi	r24, 0x0A	; 10
    1600:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
  transmitString_F(PSTR(" Creating File.."));
    1604:	8d ef       	ldi	r24, 0xFD	; 253
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	0e 94 2b 03 	call	0x656	; 0x656 <getSetFreeCluster>
  if(cluster > totalClusters)
    161c:	20 91 8e 00 	lds	r18, 0x008E
    1620:	30 91 8f 00 	lds	r19, 0x008F
    1624:	40 91 90 00 	lds	r20, 0x0090
    1628:	50 91 91 00 	lds	r21, 0x0091
    162c:	26 17       	cp	r18, r22
    162e:	37 07       	cpc	r19, r23
    1630:	48 07       	cpc	r20, r24
    1632:	59 07       	cpc	r21, r25
    1634:	40 f4       	brcc	.+16     	; 0x1646 <writeFile+0x98>
     cluster = rootCluster;
    1636:	60 91 92 00 	lds	r22, 0x0092
    163a:	70 91 93 00 	lds	r23, 0x0093
    163e:	80 91 94 00 	lds	r24, 0x0094
    1642:	90 91 95 00 	lds	r25, 0x0095

  cluster = searchNextFreeCluster(cluster);
    1646:	0e 94 1c 05 	call	0xa38	; 0xa38 <searchNextFreeCluster>
    164a:	3b 01       	movw	r6, r22
    164c:	4c 01       	movw	r8, r24
   if(cluster == 0)
    164e:	61 15       	cp	r22, r1
    1650:	71 05       	cpc	r23, r1
    1652:	81 05       	cpc	r24, r1
    1654:	91 05       	cpc	r25, r1
    1656:	09 f4       	brne	.+2      	; 0x165a <writeFile+0xac>
    1658:	d3 c1       	rjmp	.+934    	; 0x1a00 <writeFile+0x452>
   {
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	0f ef       	ldi	r16, 0xFF	; 255
    165e:	1f ef       	ldi	r17, 0xFF	; 255
    1660:	2f ef       	ldi	r18, 0xFF	; 255
    1662:	3f e0       	ldi	r19, 0x0F	; 15
    1664:	0e 94 b2 02 	call	0x564	; 0x564 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    1668:	9a 86       	std	Y+10, r9	; 0x0a
    166a:	89 86       	std	Y+9, r8	; 0x09
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    166c:	13 01       	movw	r2, r6
  fileSize = 0;
    166e:	10 92 88 00 	sts	0x0088, r1
    1672:	10 92 89 00 	sts	0x0089, r1
    1676:	10 92 8a 00 	sts	0x008A, r1
    167a:	10 92 8b 00 	sts	0x008B, r1
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
    167e:	19 82       	std	Y+1, r1	; 0x01
    1680:	bb 24       	eor	r11, r11



while(1)
{
   if(start)
    1682:	59 81       	ldd	r21, Y+1	; 0x01
    1684:	55 23       	and	r21, r21
    1686:	09 f0       	breq	.+2      	; 0x168a <writeFile+0xdc>
    1688:	3d c2       	rjmp	.+1146   	; 0x1b04 <writeFile+0x556>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    168a:	20 91 9a 02 	lds	r18, 0x029A
    168e:	30 91 9b 02 	lds	r19, 0x029B
    1692:	c0 90 84 00 	lds	r12, 0x0084
    1696:	d0 90 85 00 	lds	r13, 0x0085
    169a:	e0 90 86 00 	lds	r14, 0x0086
    169e:	f0 90 87 00 	lds	r15, 0x0087
    16a2:	c4 01       	movw	r24, r8
    16a4:	b3 01       	movw	r22, r6
    16a6:	62 50       	subi	r22, 0x02	; 2
    16a8:	70 40       	sbci	r23, 0x00	; 0
    16aa:	80 40       	sbci	r24, 0x00	; 0
    16ac:	90 40       	sbci	r25, 0x00	; 0
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
    16b6:	6c 0d       	add	r22, r12
    16b8:	7d 1d       	adc	r23, r13
    16ba:	8e 1d       	adc	r24, r14
    16bc:	9f 1d       	adc	r25, r15
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    16be:	60 93 96 00 	sts	0x0096, r22
    16c2:	70 93 97 00 	sts	0x0097, r23
    16c6:	80 93 98 00 	sts	0x0098, r24
    16ca:	90 93 99 00 	sts	0x0099, r25
	  i=0;
    16ce:	ee 24       	eor	r14, r14
    16d0:	ff 24       	eor	r15, r15
	  j=0;
    16d2:	cc 24       	eor	r12, r12
   }
   

   TX_NEWLINE;
    16d4:	8d e0       	ldi	r24, 0x0D	; 13
    16d6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    16da:	8a e0       	ldi	r24, 0x0A	; 10
    16dc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
   transmitString_F(PSTR(" Enter text (end with ~):"));
    16e0:	81 ed       	ldi	r24, 0xD1	; 209
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    16e8:	0b 2d       	mov	r16, r11
    16ea:	57 01       	movw	r10, r14
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    16ec:	01 30       	cpi	r16, 0x01	; 1
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <writeFile+0x144>
    16f0:	e8 c1       	rjmp	.+976    	; 0x1ac2 <writeFile+0x514>
		fileSize++;
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    16f2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <receiveByte>
    16f6:	18 2f       	mov	r17, r24
	 if(data == 0x08)	//'Back Space' key pressed
    16f8:	88 30       	cpi	r24, 0x08	; 8
    16fa:	39 f5       	brne	.+78     	; 0x174a <writeFile+0x19c>
	 { 
	   if(i != 0)
    16fc:	a1 14       	cp	r10, r1
    16fe:	b1 04       	cpc	r11, r1
    1700:	c1 f3       	breq	.-16     	; 0x16f2 <writeFile+0x144>
	   { 
	     transmitByte(data);
    1702:	88 e0       	ldi	r24, 0x08	; 8
    1704:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
		 transmitByte(' '); 
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
	     transmitByte(data); 
    170e:	88 e0       	ldi	r24, 0x08	; 8
    1710:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
	     i--; 
    1714:	08 94       	sec
    1716:	a1 08       	sbc	r10, r1
    1718:	b1 08       	sbc	r11, r1
		 fileSize--;
    171a:	80 91 88 00 	lds	r24, 0x0088
    171e:	90 91 89 00 	lds	r25, 0x0089
    1722:	a0 91 8a 00 	lds	r26, 0x008A
    1726:	b0 91 8b 00 	lds	r27, 0x008B
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	a1 09       	sbc	r26, r1
    172e:	b1 09       	sbc	r27, r1
    1730:	80 93 88 00 	sts	0x0088, r24
    1734:	90 93 89 00 	sts	0x0089, r25
    1738:	a0 93 8a 00 	sts	0x008A, r26
    173c:	b0 93 8b 00 	sts	0x008B, r27
		fileSize++;
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    1740:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <receiveByte>
    1744:	18 2f       	mov	r17, r24
	 if(data == 0x08)	//'Back Space' key pressed
    1746:	88 30       	cpi	r24, 0x08	; 8
    1748:	c9 f2       	breq	.-78     	; 0x16fc <writeFile+0x14e>
	     i--; 
		 fileSize--;
	   } 
	   continue;     
	 }
	 transmitByte(data);
    174a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
     buffer[i++] = data;
    174e:	f5 01       	movw	r30, r10
    1750:	e6 56       	subi	r30, 0x66	; 102
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	10 83       	st	Z, r17
    1756:	08 94       	sec
    1758:	a1 1c       	adc	r10, r1
    175a:	b1 1c       	adc	r11, r1
	 fileSize++;
    175c:	20 91 88 00 	lds	r18, 0x0088
    1760:	30 91 89 00 	lds	r19, 0x0089
    1764:	40 91 8a 00 	lds	r20, 0x008A
    1768:	50 91 8b 00 	lds	r21, 0x008B
    176c:	2f 5f       	subi	r18, 0xFF	; 255
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
    1770:	4f 4f       	sbci	r20, 0xFF	; 255
    1772:	5f 4f       	sbci	r21, 0xFF	; 255
    1774:	20 93 88 00 	sts	0x0088, r18
    1778:	30 93 89 00 	sts	0x0089, r19
    177c:	40 93 8a 00 	sts	0x008A, r20
    1780:	50 93 8b 00 	sts	0x008B, r21
     if(data == '\r')  //'Carriege Return (CR)' character
    1784:	1d 30       	cpi	r17, 0x0D	; 13
    1786:	09 f4       	brne	.+2      	; 0x178a <writeFile+0x1dc>
    1788:	46 c1       	rjmp	.+652    	; 0x1a16 <writeFile+0x468>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a9 16       	cp	r10, r25
    178e:	92 e0       	ldi	r25, 0x02	; 2
    1790:	b9 06       	cpc	r11, r25
    1792:	08 f0       	brcs	.+2      	; 0x1796 <writeFile+0x1e8>
    1794:	6a c1       	rjmp	.+724    	; 0x1a6a <writeFile+0x4bc>
    1796:	00 e0       	ldi	r16, 0x00	; 0
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');
    1798:	1e 37       	cpi	r17, 0x7E	; 126
    179a:	09 f0       	breq	.+2      	; 0x179e <writeFile+0x1f0>
    179c:	a7 cf       	rjmp	.-178    	; 0x16ec <writeFile+0x13e>
    179e:	75 01       	movw	r14, r10
    17a0:	93 01       	movw	r18, r6
    17a2:	a4 01       	movw	r20, r8

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
    17a4:	80 91 88 00 	lds	r24, 0x0088
    17a8:	90 91 89 00 	lds	r25, 0x0089
    17ac:	a0 91 8a 00 	lds	r26, 0x008A
    17b0:	b0 91 8b 00 	lds	r27, 0x008B
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	a1 09       	sbc	r26, r1
    17b8:	b1 09       	sbc	r27, r1
    17ba:	80 93 88 00 	sts	0x0088, r24
    17be:	90 93 89 00 	sts	0x0089, r25
    17c2:	a0 93 8a 00 	sts	0x008A, r26
    17c6:	b0 93 8b 00 	sts	0x008B, r27
	  i--;
    17ca:	08 94       	sec
    17cc:	e1 08       	sbc	r14, r1
    17ce:	f1 08       	sbc	r15, r1
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    17d0:	a0 e0       	ldi	r26, 0x00	; 0
    17d2:	ea 16       	cp	r14, r26
    17d4:	a2 e0       	ldi	r26, 0x02	; 2
    17d6:	fa 06       	cpc	r15, r26
    17d8:	58 f4       	brcc	.+22     	; 0x17f0 <writeFile+0x242>
    17da:	b7 01       	movw	r22, r14
        buffer[i]= 0x00;
    17dc:	fb 01       	movw	r30, r22
    17de:	e6 56       	subi	r30, 0x66	; 102
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	10 82       	st	Z, r1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    17e4:	6f 5f       	subi	r22, 0xFF	; 255
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	b2 e0       	ldi	r27, 0x02	; 2
    17ea:	60 30       	cpi	r22, 0x00	; 0
    17ec:	7b 07       	cpc	r23, r27
    17ee:	b1 f7       	brne	.-20     	; 0x17dc <writeFile+0x22e>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    17f0:	60 91 96 00 	lds	r22, 0x0096
    17f4:	70 91 97 00 	lds	r23, 0x0097
    17f8:	80 91 98 00 	lds	r24, 0x0098
    17fc:	90 91 99 00 	lds	r25, 0x0099
    1800:	2e 87       	std	Y+14, r18	; 0x0e
    1802:	3b 87       	std	Y+11, r19	; 0x0b
    1804:	4c 87       	std	Y+12, r20	; 0x0c
    1806:	5d 87       	std	Y+13, r21	; 0x0d
    1808:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	2e 85       	ldd	r18, Y+14	; 0x0e
    1812:	3b 85       	ldd	r19, Y+11	; 0x0b
    1814:	4c 85       	ldd	r20, Y+12	; 0x0c
    1816:	5d 85       	ldd	r21, Y+13	; 0x0d
    1818:	0e 94 2b 03 	call	0x656	; 0x656 <getSetFreeCluster>

if(appendFile)  //executes this loop if file is to be appended
    181c:	e9 81       	ldd	r30, Y+1	; 0x01
    181e:	ee 23       	and	r30, r30
    1820:	09 f0       	breq	.+2      	; 0x1824 <writeFile+0x276>
    1822:	e0 c1       	rjmp	.+960    	; 0x1be4 <writeFile+0x636>
  return;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    1824:	80 91 92 00 	lds	r24, 0x0092
    1828:	90 91 93 00 	lds	r25, 0x0093
    182c:	a0 91 94 00 	lds	r26, 0x0094
    1830:	b0 91 95 00 	lds	r27, 0x0095
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	af 83       	std	Y+7, r26	; 0x07
    183a:	b8 87       	std	Y+8, r27	; 0x08
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
    183c:	88 24       	eor	r8, r8

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    183e:	40 e2       	ldi	r20, 0x20	; 32
    1840:	94 2e       	mov	r9, r20
		  dir->NTreserved = 0;			//always set to 0
		  dir->timeTenth = 0;			//always set to 0
		  dir->createTime = 0x9684;		//fixed time of creation
    1842:	34 e8       	ldi	r19, 0x84	; 132
    1844:	a3 2e       	mov	r10, r19
    1846:	36 e9       	ldi	r19, 0x96	; 150
    1848:	b3 2e       	mov	r11, r19
		  dir->createDate = 0x3a37;		//fixed date of creation
    184a:	27 e3       	ldi	r18, 0x37	; 55
    184c:	62 2e       	mov	r6, r18
    184e:	2a e3       	ldi	r18, 0x3A	; 58
    1850:	72 2e       	mov	r7, r18
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1852:	20 91 9a 02 	lds	r18, 0x029A
    1856:	30 91 9b 02 	lds	r19, 0x029B
    185a:	c0 90 84 00 	lds	r12, 0x0084
    185e:	d0 90 85 00 	lds	r13, 0x0085
    1862:	e0 90 86 00 	lds	r14, 0x0086
    1866:	f0 90 87 00 	lds	r15, 0x0087
    186a:	6d 81       	ldd	r22, Y+5	; 0x05
    186c:	7e 81       	ldd	r23, Y+6	; 0x06
    186e:	8f 81       	ldd	r24, Y+7	; 0x07
    1870:	98 85       	ldd	r25, Y+8	; 0x08
    1872:	62 50       	subi	r22, 0x02	; 2
    1874:	70 40       	sbci	r23, 0x00	; 0
    1876:	80 40       	sbci	r24, 0x00	; 0
    1878:	90 40       	sbci	r25, 0x00	; 0
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	8c 0d       	add	r24, r12
    1888:	9d 1d       	adc	r25, r13
    188a:	ae 1d       	adc	r26, r14
    188c:	bf 1d       	adc	r27, r15
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	9a 83       	std	Y+2, r25	; 0x02
    1892:	ab 83       	std	Y+3, r26	; 0x03
    1894:	bc 83       	std	Y+4, r27	; 0x04

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1896:	80 91 9a 02 	lds	r24, 0x029A
    189a:	90 91 9b 02 	lds	r25, 0x029B
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <writeFile+0x2f6>
    18a2:	f2 c1       	rjmp	.+996    	; 0x1c88 <writeFile+0x6da>
    18a4:	10 e0       	ldi	r17, 0x00	; 0
    18a6:	28 2d       	mov	r18, r8
    18a8:	81 2e       	mov	r8, r17
    18aa:	09 85       	ldd	r16, Y+9	; 0x09
    18ac:	1a 85       	ldd	r17, Y+10	; 0x0a
   {
     SD_readSingleBlock (firstSector + sector);
    18ae:	c9 80       	ldd	r12, Y+1	; 0x01
    18b0:	da 80       	ldd	r13, Y+2	; 0x02
    18b2:	eb 80       	ldd	r14, Y+3	; 0x03
    18b4:	fc 80       	ldd	r15, Y+4	; 0x04
    18b6:	c8 0c       	add	r12, r8
    18b8:	d1 1c       	adc	r13, r1
    18ba:	e1 1c       	adc	r14, r1
    18bc:	f1 1c       	adc	r15, r1
    18be:	c7 01       	movw	r24, r14
    18c0:	b6 01       	movw	r22, r12
    18c2:	2e 87       	std	Y+14, r18	; 0x0e
    18c4:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>
	

     for(i=0; i<bytesPerSector; i+=32)
    18c8:	80 91 8c 00 	lds	r24, 0x008C
    18cc:	90 91 8d 00 	lds	r25, 0x008D
    18d0:	2e 85       	ldd	r18, Y+14	; 0x0e
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <writeFile+0x32a>
    18d6:	cc c1       	rjmp	.+920    	; 0x1c70 <writeFile+0x6c2>
     {
	    dir = (struct dir_Structure *) &buffer[i];
    18d8:	ea e9       	ldi	r30, 0x9A	; 154
    18da:	f0 e0       	ldi	r31, 0x00	; 0

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    18dc:	22 23       	and	r18, r18
    18de:	09 f0       	breq	.+2      	; 0x18e2 <writeFile+0x334>
    18e0:	17 c2       	rjmp	.+1070   	; 0x1d10 <writeFile+0x762>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	98 8b       	std	Y+16, r25	; 0x10
    18e8:	8f 87       	std	Y+15, r24	; 0x0f
    18ea:	18 c0       	rjmp	.+48     	; 0x191c <writeFile+0x36e>
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    18ec:	85 3e       	cpi	r24, 0xE5	; 229
    18ee:	c9 f0       	breq	.+50     	; 0x1922 <writeFile+0x374>
    18f0:	20 e0       	ldi	r18, 0x00	; 0
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    18f2:	4f 85       	ldd	r20, Y+15	; 0x0f
    18f4:	58 89       	ldd	r21, Y+16	; 0x10
    18f6:	40 5e       	subi	r20, 0xE0	; 224
    18f8:	5f 4f       	sbci	r21, 0xFF	; 255
    18fa:	58 8b       	std	Y+16, r21	; 0x10
    18fc:	4f 87       	std	Y+15, r20	; 0x0f
    18fe:	80 91 8c 00 	lds	r24, 0x008C
    1902:	90 91 8d 00 	lds	r25, 0x008D
    1906:	48 17       	cp	r20, r24
    1908:	59 07       	cpc	r21, r25
    190a:	08 f0       	brcs	.+2      	; 0x190e <writeFile+0x360>
    190c:	b1 c1       	rjmp	.+866    	; 0x1c70 <writeFile+0x6c2>
//Function: to create a file in FAT32 format in the root directory if given 
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
    190e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1910:	f8 89       	ldd	r31, Y+16	; 0x10
    1912:	e6 56       	subi	r30, 0x66	; 102
    1914:	ff 4f       	sbci	r31, 0xFF	; 255

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1916:	22 23       	and	r18, r18
    1918:	09 f0       	breq	.+2      	; 0x191c <writeFile+0x36e>
    191a:	fa c1       	rjmp	.+1012   	; 0x1d10 <writeFile+0x762>
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    191c:	80 81       	ld	r24, Z
    191e:	88 23       	and	r24, r24
    1920:	29 f7       	brne	.-54     	; 0x18ec <writeFile+0x33e>
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	af 01       	movw	r20, r30
    1926:	6f 85       	ldd	r22, Y+15	; 0x0f
    1928:	78 89       	ldd	r23, Y+16	; 0x10
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    192a:	82 2f       	mov	r24, r18
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	da 01       	movw	r26, r20
    1930:	a8 0f       	add	r26, r24
    1932:	b9 1f       	adc	r27, r25
    1934:	84 0d       	add	r24, r4
    1936:	95 1d       	adc	r25, r5
    1938:	fc 01       	movw	r30, r24
    193a:	80 81       	ld	r24, Z
    193c:	8c 93       	st	X, r24
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    193e:	2f 5f       	subi	r18, 0xFF	; 255
    1940:	2b 30       	cpi	r18, 0x0B	; 11
    1942:	99 f7       	brne	.-26     	; 0x192a <writeFile+0x37c>
    1944:	fa 01       	movw	r30, r20
    1946:	78 8b       	std	Y+16, r23	; 0x10
    1948:	6f 87       	std	Y+15, r22	; 0x0f
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    194a:	93 86       	std	Z+11, r9	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    194c:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    194e:	15 86       	std	Z+13, r1	; 0x0d
		  dir->createTime = 0x9684;		//fixed time of creation
    1950:	b7 86       	std	Z+15, r11	; 0x0f
    1952:	a6 86       	std	Z+14, r10	; 0x0e
		  dir->createDate = 0x3a37;		//fixed date of creation
    1954:	71 8a       	std	Z+17, r7	; 0x11
    1956:	60 8a       	std	Z+16, r6	; 0x10
		  dir->lastAccessDate = 0x3a37;	//fixed date of last access
    1958:	73 8a       	std	Z+19, r7	; 0x13
    195a:	62 8a       	std	Z+18, r6	; 0x12
		  dir->writeTime = 0x9684;		//fixed time of last write
    195c:	b7 8a       	std	Z+23, r11	; 0x17
    195e:	a6 8a       	std	Z+22, r10	; 0x16
		  dir->writeDate = 0x3a37;		//fixed date of last write
    1960:	71 8e       	std	Z+25, r7	; 0x19
    1962:	60 8e       	std	Z+24, r6	; 0x18
		  dir->firstClusterHI = firstClusterHigh;
    1964:	15 8b       	std	Z+21, r17	; 0x15
    1966:	04 8b       	std	Z+20, r16	; 0x14
		  dir->firstClusterLO = firstClusterLow;
    1968:	33 8e       	std	Z+27, r3	; 0x1b
    196a:	22 8e       	std	Z+26, r2	; 0x1a
		  dir->fileSize = fileSize;
    196c:	80 91 88 00 	lds	r24, 0x0088
    1970:	90 91 89 00 	lds	r25, 0x0089
    1974:	a0 91 8a 00 	lds	r26, 0x008A
    1978:	b0 91 8b 00 	lds	r27, 0x008B
    197c:	84 8f       	std	Z+28, r24	; 0x1c
    197e:	95 8f       	std	Z+29, r25	; 0x1d
    1980:	a6 8f       	std	Z+30, r26	; 0x1e
    1982:	b7 8f       	std	Z+31, r27	; 0x1f

		  SD_writeSingleBlock (firstSector + sector);
    1984:	c7 01       	movw	r24, r14
    1986:	b6 01       	movw	r22, r12
    1988:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <SD_writeSingleBlock>
		  fileCreatedFlag = 1;

		  TX_NEWLINE;
    198c:	8d e0       	ldi	r24, 0x0D	; 13
    198e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    1992:	8a e0       	ldi	r24, 0x0A	; 10
    1994:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
		  TX_NEWLINE;
    1998:	8d e0       	ldi	r24, 0x0D	; 13
    199a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    199e:	8a e0       	ldi	r24, 0x0A	; 10
    19a0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
		  transmitString_F(PSTR(" File Created!"));
    19a4:	80 ea       	ldi	r24, 0xA0	; 160
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    19ac:	40 91 88 00 	lds	r20, 0x0088
    19b0:	50 91 89 00 	lds	r21, 0x0089
    19b4:	60 91 8a 00 	lds	r22, 0x008A
    19b8:	70 91 8b 00 	lds	r23, 0x008B
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	0e 94 58 07 	call	0xeb0	; 0xeb0 <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
    19c2:	21 e0       	ldi	r18, 0x01	; 1
    19c4:	96 cf       	rjmp	.-212    	; 0x18f2 <writeFile+0x344>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    19c6:	8b e8       	ldi	r24, 0x8B	; 139
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
   
   prevCluster = cluster;
 }
 
 return;
}
    19ce:	60 96       	adiw	r28, 0x10	; 16
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	ff 90       	pop	r15
    19e4:	ef 90       	pop	r14
    19e6:	df 90       	pop	r13
    19e8:	cf 90       	pop	r12
    19ea:	bf 90       	pop	r11
    19ec:	af 90       	pop	r10
    19ee:	9f 90       	pop	r9
    19f0:	8f 90       	pop	r8
    19f2:	7f 90       	pop	r7
    19f4:	6f 90       	pop	r6
    19f6:	5f 90       	pop	r5
    19f8:	4f 90       	pop	r4
    19fa:	3f 90       	pop	r3
    19fc:	2f 90       	pop	r2
    19fe:	08 95       	ret
     cluster = rootCluster;

  cluster = searchNextFreeCluster(cluster);
   if(cluster == 0)
   {
      TX_NEWLINE;
    1a00:	8d e0       	ldi	r24, 0x0D	; 13
    1a02:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    1a06:	8a e0       	ldi	r24, 0x0A	; 10
    1a08:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1a0c:	8b ee       	ldi	r24, 0xEB	; 235
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
	  return;
    1a14:	dc cf       	rjmp	.-72     	; 0x19ce <writeFile+0x420>
	 transmitByte(data);
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	a8 16       	cp	r10, r24
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	b8 06       	cpc	r11, r24
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <writeFile+0x474>
    1a20:	6f c0       	rjmp	.+222    	; 0x1b00 <writeFile+0x552>
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
    1a22:	8a e0       	ldi	r24, 0x0A	; 10
    1a24:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1a28:	f5 01       	movw	r30, r10
    1a2a:	e6 56       	subi	r30, 0x66	; 102
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	8a e0       	ldi	r24, 0x0A	; 10
    1a30:	80 83       	st	Z, r24
    1a32:	08 94       	sec
    1a34:	a1 1c       	adc	r10, r1
    1a36:	b1 1c       	adc	r11, r1
		   fileSize++;
    1a38:	80 91 88 00 	lds	r24, 0x0088
    1a3c:	90 91 89 00 	lds	r25, 0x0089
    1a40:	a0 91 8a 00 	lds	r26, 0x008A
    1a44:	b0 91 8b 00 	lds	r27, 0x008B
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	a1 1d       	adc	r26, r1
    1a4c:	b1 1d       	adc	r27, r1
    1a4e:	80 93 88 00 	sts	0x0088, r24
    1a52:	90 93 89 00 	sts	0x0089, r25
    1a56:	a0 93 8a 00 	sts	0x008A, r26
    1a5a:	b0 93 8b 00 	sts	0x008B, r27
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a9 16       	cp	r10, r25
    1a62:	92 e0       	ldi	r25, 0x02	; 2
    1a64:	b9 06       	cpc	r11, r25
    1a66:	08 f4       	brcc	.+2      	; 0x1a6a <writeFile+0x4bc>
    1a68:	96 ce       	rjmp	.-724    	; 0x1796 <writeFile+0x1e8>
    1a6a:	00 e0       	ldi	r16, 0x00	; 0
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    1a6c:	60 91 96 00 	lds	r22, 0x0096
    1a70:	70 91 97 00 	lds	r23, 0x0097
    1a74:	80 91 98 00 	lds	r24, 0x0098
    1a78:	90 91 99 00 	lds	r25, 0x0099
    1a7c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <SD_writeSingleBlock>
       j++;
    1a80:	c3 94       	inc	r12
	   if(j == sectorPerCluster) {j = 0; break;}
    1a82:	80 91 9a 02 	lds	r24, 0x029A
    1a86:	90 91 9b 02 	lds	r25, 0x029B
    1a8a:	2c 2d       	mov	r18, r12
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	28 17       	cp	r18, r24
    1a90:	39 07       	cpc	r19, r25
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <writeFile+0x4e8>
    1a94:	7a c0       	rjmp	.+244    	; 0x1b8a <writeFile+0x5dc>
	   startBlock++; 
    1a96:	80 91 96 00 	lds	r24, 0x0096
    1a9a:	90 91 97 00 	lds	r25, 0x0097
    1a9e:	a0 91 98 00 	lds	r26, 0x0098
    1aa2:	b0 91 99 00 	lds	r27, 0x0099
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	b1 1d       	adc	r27, r1
    1aac:	80 93 96 00 	sts	0x0096, r24
    1ab0:	90 93 97 00 	sts	0x0097, r25
    1ab4:	a0 93 98 00 	sts	0x0098, r26
    1ab8:	b0 93 99 00 	sts	0x0099, r27
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    1abc:	aa 24       	eor	r10, r10
    1abe:	bb 24       	eor	r11, r11
    1ac0:	6b ce       	rjmp	.-810    	; 0x1798 <writeFile+0x1ea>
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
	 {
	 	transmitByte ('\n');
    1ac2:	8a e0       	ldi	r24, 0x0A	; 10
    1ac4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1ac8:	f5 01       	movw	r30, r10
    1aca:	e6 56       	subi	r30, 0x66	; 102
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	8a e0       	ldi	r24, 0x0A	; 10
    1ad0:	80 83       	st	Z, r24
    1ad2:	08 94       	sec
    1ad4:	a1 1c       	adc	r10, r1
    1ad6:	b1 1c       	adc	r11, r1
		fileSize++;
    1ad8:	80 91 88 00 	lds	r24, 0x0088
    1adc:	90 91 89 00 	lds	r25, 0x0089
    1ae0:	a0 91 8a 00 	lds	r26, 0x008A
    1ae4:	b0 91 8b 00 	lds	r27, 0x008B
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	a1 1d       	adc	r26, r1
    1aec:	b1 1d       	adc	r27, r1
    1aee:	80 93 88 00 	sts	0x0088, r24
    1af2:	90 93 89 00 	sts	0x0089, r25
    1af6:	a0 93 8a 00 	sts	0x008A, r26
    1afa:	b0 93 8b 00 	sts	0x008B, r27
    1afe:	f9 cd       	rjmp	.-1038   	; 0x16f2 <writeFile+0x144>
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    1b00:	01 e0       	ldi	r16, 0x01	; 1
    1b02:	b4 cf       	rjmp	.-152    	; 0x1a6c <writeFile+0x4be>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1b04:	20 91 9a 02 	lds	r18, 0x029A
    1b08:	30 91 9b 02 	lds	r19, 0x029B
    1b0c:	c0 90 84 00 	lds	r12, 0x0084
    1b10:	d0 90 85 00 	lds	r13, 0x0085
    1b14:	e0 90 86 00 	lds	r14, 0x0086
    1b18:	f0 90 87 00 	lds	r15, 0x0087
    1b1c:	ca 0c       	add	r12, r10
    1b1e:	d1 1c       	adc	r13, r1
    1b20:	e1 1c       	adc	r14, r1
    1b22:	f1 1c       	adc	r15, r1
    1b24:	c4 01       	movw	r24, r8
    1b26:	b3 01       	movw	r22, r6
    1b28:	62 50       	subi	r22, 0x02	; 2
    1b2a:	70 40       	sbci	r23, 0x00	; 0
    1b2c:	80 40       	sbci	r24, 0x00	; 0
    1b2e:	90 40       	sbci	r25, 0x00	; 0
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    1b38:	c6 0e       	add	r12, r22
    1b3a:	d7 1e       	adc	r13, r23
    1b3c:	e8 1e       	adc	r14, r24
    1b3e:	f9 1e       	adc	r15, r25
    1b40:	c0 92 96 00 	sts	0x0096, r12
    1b44:	d0 92 97 00 	sts	0x0097, r13
    1b48:	e0 92 98 00 	sts	0x0098, r14
    1b4c:	f0 92 99 00 	sts	0x0099, r15
	  SD_readSingleBlock (startBlock);
    1b50:	60 91 96 00 	lds	r22, 0x0096
    1b54:	70 91 97 00 	lds	r23, 0x0097
    1b58:	80 91 98 00 	lds	r24, 0x0098
    1b5c:	90 91 99 00 	lds	r25, 0x0099
    1b60:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    1b64:	20 91 8c 00 	lds	r18, 0x008C
    1b68:	30 91 8d 00 	lds	r19, 0x008D
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	60 91 88 00 	lds	r22, 0x0088
    1b74:	70 91 89 00 	lds	r23, 0x0089
    1b78:	80 91 8a 00 	lds	r24, 0x008A
    1b7c:	90 91 8b 00 	lds	r25, 0x008B
    1b80:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__udivmodsi4>
    1b84:	7b 01       	movw	r14, r22
	  j = sector;
    1b86:	ca 2c       	mov	r12, r10
    1b88:	a5 cd       	rjmp	.-1206   	; 0x16d4 <writeFile+0x126>
    1b8a:	b0 2e       	mov	r11, r16
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');

   if(data == '~') 
    1b8c:	1e 37       	cpi	r17, 0x7E	; 126
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <writeFile+0x5e4>
    1b90:	1b c1       	rjmp	.+566    	; 0x1dc8 <writeFile+0x81a>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    1b92:	c4 01       	movw	r24, r8
    1b94:	b3 01       	movw	r22, r6
    1b96:	0e 94 1c 05 	call	0xa38	; 0xa38 <searchNextFreeCluster>
    1b9a:	6b 01       	movw	r12, r22
    1b9c:	7c 01       	movw	r14, r24

   if(cluster == 0)
    1b9e:	61 15       	cp	r22, r1
    1ba0:	71 05       	cpc	r23, r1
    1ba2:	81 05       	cpc	r24, r1
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	99 f0       	breq	.+38     	; 0x1bce <writeFile+0x620>
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    1ba8:	c4 01       	movw	r24, r8
    1baa:	b3 01       	movw	r22, r6
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	97 01       	movw	r18, r14
    1bb0:	86 01       	movw	r16, r12
    1bb2:	0e 94 b2 02 	call	0x564	; 0x564 <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1bb6:	c7 01       	movw	r24, r14
    1bb8:	b6 01       	movw	r22, r12
    1bba:	41 e0       	ldi	r20, 0x01	; 1
    1bbc:	0f ef       	ldi	r16, 0xFF	; 255
    1bbe:	1f ef       	ldi	r17, 0xFF	; 255
    1bc0:	2f ef       	ldi	r18, 0xFF	; 255
    1bc2:	3f e0       	ldi	r19, 0x0F	; 15
    1bc4:	0e 94 b2 02 	call	0x564	; 0x564 <getSetNextCluster>
}        
    1bc8:	36 01       	movw	r6, r12
    1bca:	47 01       	movw	r8, r14
    1bcc:	5e cd       	rjmp	.-1348   	; 0x168a <writeFile+0xdc>

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster

   if(cluster == 0)
   {
      TX_NEWLINE;
    1bce:	8d e0       	ldi	r24, 0x0D	; 13
    1bd0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    1bd4:	8a e0       	ldi	r24, 0x0A	; 10
    1bd6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1bda:	8f eb       	ldi	r24, 0xBF	; 191
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
	  return;
    1be2:	f5 ce       	rjmp	.-534    	; 0x19ce <writeFile+0x420>

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

if(appendFile)  //executes this loop if file is to be appended
{
  SD_readSingleBlock (appendFileSector);    
    1be4:	60 91 ad 02 	lds	r22, 0x02AD
    1be8:	70 91 ae 02 	lds	r23, 0x02AE
    1bec:	80 91 af 02 	lds	r24, 0x02AF
    1bf0:	90 91 b0 02 	lds	r25, 0x02B0
    1bf4:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    1bf8:	e0 91 80 00 	lds	r30, 0x0080
    1bfc:	f0 91 81 00 	lds	r31, 0x0081
    1c00:	e6 56       	subi	r30, 0x66	; 102
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
  extraMemory = fileSize - dir->fileSize;
    1c04:	80 91 88 00 	lds	r24, 0x0088
    1c08:	90 91 89 00 	lds	r25, 0x0089
    1c0c:	a0 91 8a 00 	lds	r26, 0x008A
    1c10:	b0 91 8b 00 	lds	r27, 0x008B
    1c14:	24 8d       	ldd	r18, Z+28	; 0x1c
    1c16:	35 8d       	ldd	r19, Z+29	; 0x1d
    1c18:	46 8d       	ldd	r20, Z+30	; 0x1e
    1c1a:	57 8d       	ldd	r21, Z+31	; 0x1f
    1c1c:	6c 01       	movw	r12, r24
    1c1e:	7d 01       	movw	r14, r26
    1c20:	c2 1a       	sub	r12, r18
    1c22:	d3 0a       	sbc	r13, r19
    1c24:	e4 0a       	sbc	r14, r20
    1c26:	f5 0a       	sbc	r15, r21
  dir->fileSize = fileSize;
    1c28:	84 8f       	std	Z+28, r24	; 0x1c
    1c2a:	95 8f       	std	Z+29, r25	; 0x1d
    1c2c:	a6 8f       	std	Z+30, r26	; 0x1e
    1c2e:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    1c30:	60 91 ad 02 	lds	r22, 0x02AD
    1c34:	70 91 ae 02 	lds	r23, 0x02AE
    1c38:	80 91 af 02 	lds	r24, 0x02AF
    1c3c:	90 91 b0 02 	lds	r25, 0x02B0
    1c40:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	b7 01       	movw	r22, r14
    1c48:	a6 01       	movw	r20, r12
    1c4a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <freeMemoryUpdate>

  
  TX_NEWLINE;
    1c4e:	8d e0       	ldi	r24, 0x0D	; 13
    1c50:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    1c54:	8a e0       	ldi	r24, 0x0A	; 10
    1c56:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
  transmitString_F(PSTR(" File appended!"));
    1c5a:	8f ea       	ldi	r24, 0xAF	; 175
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
  TX_NEWLINE;
    1c62:	8d e0       	ldi	r24, 0x0D	; 13
    1c64:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    1c68:	8a e0       	ldi	r24, 0x0A	; 10
    1c6a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
  return;
    1c6e:	af ce       	rjmp	.-674    	; 0x19ce <writeFile+0x420>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1c70:	83 94       	inc	r8
    1c72:	40 91 9a 02 	lds	r20, 0x029A
    1c76:	50 91 9b 02 	lds	r21, 0x029B
    1c7a:	88 2d       	mov	r24, r8
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	84 17       	cp	r24, r20
    1c80:	95 07       	cpc	r25, r21
    1c82:	08 f4       	brcc	.+2      	; 0x1c86 <writeFile+0x6d8>
    1c84:	14 ce       	rjmp	.-984    	; 0x18ae <writeFile+0x300>
    1c86:	82 2e       	mov	r8, r18
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1c88:	6d 81       	ldd	r22, Y+5	; 0x05
    1c8a:	7e 81       	ldd	r23, Y+6	; 0x06
    1c8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c8e:	98 85       	ldd	r25, Y+8	; 0x08
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	00 e0       	ldi	r16, 0x00	; 0
    1c94:	10 e0       	ldi	r17, 0x00	; 0
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	0e 94 b2 02 	call	0x564	; 0x564 <getSetNextCluster>
    1c9e:	6b 01       	movw	r12, r22
    1ca0:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    1ca2:	67 3f       	cpi	r22, 0xF7	; 247
    1ca4:	5f ef       	ldi	r21, 0xFF	; 255
    1ca6:	75 07       	cpc	r23, r21
    1ca8:	5f ef       	ldi	r21, 0xFF	; 255
    1caa:	85 07       	cpc	r24, r21
    1cac:	5f e0       	ldi	r21, 0x0F	; 15
    1cae:	95 07       	cpc	r25, r21
    1cb0:	20 f1       	brcs	.+72     	; 0x1cfa <writeFile+0x74c>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    1cb2:	8f ef       	ldi	r24, 0xFF	; 255
    1cb4:	c8 16       	cp	r12, r24
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	d8 06       	cpc	r13, r24
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	e8 06       	cpc	r14, r24
    1cbe:	8f e0       	ldi	r24, 0x0F	; 15
    1cc0:	f8 06       	cpc	r15, r24
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <writeFile+0x718>
    1cc4:	80 ce       	rjmp	.-768    	; 0x19c6 <writeFile+0x418>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1cc6:	6d 81       	ldd	r22, Y+5	; 0x05
    1cc8:	7e 81       	ldd	r23, Y+6	; 0x06
    1cca:	8f 81       	ldd	r24, Y+7	; 0x07
    1ccc:	98 85       	ldd	r25, Y+8	; 0x08
    1cce:	0e 94 1c 05 	call	0xa38	; 0xa38 <searchNextFreeCluster>
    1cd2:	6b 01       	movw	r12, r22
    1cd4:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    1cd6:	6d 81       	ldd	r22, Y+5	; 0x05
    1cd8:	7e 81       	ldd	r23, Y+6	; 0x06
    1cda:	8f 81       	ldd	r24, Y+7	; 0x07
    1cdc:	98 85       	ldd	r25, Y+8	; 0x08
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	97 01       	movw	r18, r14
    1ce2:	86 01       	movw	r16, r12
    1ce4:	0e 94 b2 02 	call	0x564	; 0x564 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    1ce8:	c7 01       	movw	r24, r14
    1cea:	b6 01       	movw	r22, r12
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	0f ef       	ldi	r16, 0xFF	; 255
    1cf0:	1f ef       	ldi	r17, 0xFF	; 255
    1cf2:	2f ef       	ldi	r18, 0xFF	; 255
    1cf4:	3f e0       	ldi	r19, 0x0F	; 15
    1cf6:	0e 94 b2 02 	call	0x564	; 0x564 <getSetNextCluster>
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1cfa:	c1 14       	cp	r12, r1
    1cfc:	d1 04       	cpc	r13, r1
    1cfe:	e1 04       	cpc	r14, r1
    1d00:	f1 04       	cpc	r15, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <writeFile+0x758>
    1d04:	5c c0       	rjmp	.+184    	; 0x1dbe <writeFile+0x810>
   
   prevCluster = cluster;
    1d06:	cd 82       	std	Y+5, r12	; 0x05
    1d08:	de 82       	std	Y+6, r13	; 0x06
    1d0a:	ef 82       	std	Y+7, r14	; 0x07
    1d0c:	f8 86       	std	Y+8, r15	; 0x08
    1d0e:	a1 cd       	rjmp	.-1214   	; 0x1852 <writeFile+0x2a4>
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
    1d10:	10 82       	st	Z, r1
           return;
    1d12:	5d ce       	rjmp	.-838    	; 0x19ce <writeFile+0x420>

j = readFile (VERIFY, fileName);

if(j == 1) 
{
  transmitString_F(PSTR("  File already existing, appending data..")); 
    1d14:	8e e0       	ldi	r24, 0x0E	; 14
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
  appendFile = 1;
  cluster = appendStartCluster;
    1d1c:	60 90 a7 02 	lds	r6, 0x02A7
    1d20:	70 90 a8 02 	lds	r7, 0x02A8
    1d24:	80 90 a9 02 	lds	r8, 0x02A9
    1d28:	90 90 aa 02 	lds	r9, 0x02AA
  clusterCount=0;
    1d2c:	cc 24       	eor	r12, r12
    1d2e:	dd 24       	eor	r13, r13
    1d30:	76 01       	movw	r14, r12
    1d32:	07 c0       	rjmp	.+14     	; 0x1d42 <writeFile+0x794>
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
	clusterCount++;
    1d34:	08 94       	sec
    1d36:	c1 1c       	adc	r12, r1
    1d38:	d1 1c       	adc	r13, r1
    1d3a:	e1 1c       	adc	r14, r1
    1d3c:	f1 1c       	adc	r15, r1
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    1d3e:	3b 01       	movw	r6, r22
    1d40:	4c 01       	movw	r8, r24
  appendFile = 1;
  cluster = appendStartCluster;
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    1d42:	c4 01       	movw	r24, r8
    1d44:	b3 01       	movw	r22, r6
    1d46:	40 e0       	ldi	r20, 0x00	; 0
    1d48:	00 e0       	ldi	r16, 0x00	; 0
    1d4a:	10 e0       	ldi	r17, 0x00	; 0
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	0e 94 b2 02 	call	0x564	; 0x564 <getSetNextCluster>
    if(nextCluster == EOF) break;
    1d54:	6f 3f       	cpi	r22, 0xFF	; 255
    1d56:	2f ef       	ldi	r18, 0xFF	; 255
    1d58:	72 07       	cpc	r23, r18
    1d5a:	2f ef       	ldi	r18, 0xFF	; 255
    1d5c:	82 07       	cpc	r24, r18
    1d5e:	2f e0       	ldi	r18, 0x0F	; 15
    1d60:	92 07       	cpc	r25, r18
    1d62:	41 f7       	brne	.-48     	; 0x1d34 <writeFile+0x786>
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    1d64:	20 91 9a 02 	lds	r18, 0x029A
    1d68:	30 91 9b 02 	lds	r19, 0x029B
    1d6c:	60 91 8c 00 	lds	r22, 0x008C
    1d70:	70 91 8d 00 	lds	r23, 0x008D
    1d74:	00 91 8c 00 	lds	r16, 0x008C
    1d78:	10 91 8d 00 	lds	r17, 0x008D
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
    1d88:	a7 01       	movw	r20, r14
    1d8a:	96 01       	movw	r18, r12
    1d8c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__mulsi3>
    1d90:	9b 01       	movw	r18, r22
    1d92:	ac 01       	movw	r20, r24
    1d94:	60 91 88 00 	lds	r22, 0x0088
    1d98:	70 91 89 00 	lds	r23, 0x0089
    1d9c:	80 91 8a 00 	lds	r24, 0x008A
    1da0:	90 91 8b 00 	lds	r25, 0x008B
    1da4:	62 1b       	sub	r22, r18
    1da6:	73 0b       	sbc	r23, r19
    1da8:	84 0b       	sbc	r24, r20
    1daa:	95 0b       	sbc	r25, r21
    1dac:	98 01       	movw	r18, r16
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__udivmodsi4>
    1db6:	a2 2e       	mov	r10, r18
  start = 1;
    1db8:	41 e0       	ldi	r20, 0x01	; 1
    1dba:	49 83       	std	Y+1, r20	; 0x01
    1dbc:	61 cc       	rjmp	.-1854   	; 0x1680 <writeFile+0xd2>
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1dbe:	82 e7       	ldi	r24, 0x72	; 114
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    1dc6:	03 ce       	rjmp	.-1018   	; 0x19ce <writeFile+0x420>
     }
	}while (data != '~');

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
    1dc8:	80 91 88 00 	lds	r24, 0x0088
    1dcc:	90 91 89 00 	lds	r25, 0x0089
    1dd0:	a0 91 8a 00 	lds	r26, 0x008A
    1dd4:	b0 91 8b 00 	lds	r27, 0x008B
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	a1 09       	sbc	r26, r1
    1ddc:	b1 09       	sbc	r27, r1
    1dde:	80 93 88 00 	sts	0x0088, r24
    1de2:	90 93 89 00 	sts	0x0089, r25
    1de6:	a0 93 8a 00 	sts	0x008A, r26
    1dea:	b0 93 8b 00 	sts	0x008B, r27
    1dee:	93 01       	movw	r18, r6
    1df0:	a4 01       	movw	r20, r8
    1df2:	fe cc       	rjmp	.-1540   	; 0x17f0 <writeFile+0x242>

00001df4 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	d8 2e       	mov	r13, r24
    1e00:	7a 01       	movw	r14, r20
    1e02:	8b 01       	movw	r16, r22
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    1e04:	80 91 a0 02 	lds	r24, 0x02A0
    1e08:	88 23       	and	r24, r24
    1e0a:	69 f4       	brne	.+26     	; 0x1e26 <SD_sendCommand+0x32>
if(cmd == READ_SINGLE_BLOCK     ||
    1e0c:	8d 2d       	mov	r24, r13
    1e0e:	81 51       	subi	r24, 0x11	; 17
    1e10:	82 30       	cpi	r24, 0x02	; 2
    1e12:	c0 f1       	brcs	.+112    	; 0x1e84 <SD_sendCommand+0x90>
   cmd == READ_MULTIPLE_BLOCKS  ||
    1e14:	8d 2d       	mov	r24, r13
    1e16:	88 31       	cpi	r24, 0x18	; 24
    1e18:	a9 f1       	breq	.+106    	; 0x1e84 <SD_sendCommand+0x90>
   cmd == WRITE_SINGLE_BLOCK    ||
    1e1a:	89 31       	cpi	r24, 0x19	; 25
    1e1c:	99 f1       	breq	.+102    	; 0x1e84 <SD_sendCommand+0x90>
   cmd == WRITE_MULTIPLE_BLOCKS ||
    1e1e:	80 32       	cpi	r24, 0x20	; 32
    1e20:	89 f1       	breq	.+98     	; 0x1e84 <SD_sendCommand+0x90>
   cmd == ERASE_BLOCK_START_ADDR|| 
    1e22:	81 32       	cpi	r24, 0x21	; 33
    1e24:	79 f1       	breq	.+94     	; 0x1e84 <SD_sendCommand+0x90>
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
   }	   

SD_CS_ASSERT;
    1e26:	c1 98       	cbi	0x18, 1	; 24

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    1e28:	8d 2d       	mov	r24, r13
    1e2a:	80 64       	ori	r24, 0x40	; 64
    1e2c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>
SPI_transmit(arg>>24);
    1e30:	81 2f       	mov	r24, r17
    1e32:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>
SPI_transmit(arg>>16);
    1e36:	80 2f       	mov	r24, r16
    1e38:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>
SPI_transmit(arg>>8);
    1e3c:	8f 2d       	mov	r24, r15
    1e3e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>
SPI_transmit(arg);
    1e42:	8e 2d       	mov	r24, r14
    1e44:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    1e48:	8d 2d       	mov	r24, r13
    1e4a:	88 30       	cpi	r24, 0x08	; 8
    1e4c:	19 f1       	breq	.+70     	; 0x1e94 <SD_sendCommand+0xa0>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
    1e4e:	85 e9       	ldi	r24, 0x95	; 149
    1e50:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    1e54:	ee 24       	eor	r14, r14
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <SD_sendCommand+0x68>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
    1e58:	ea 94       	dec	r14

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    1e5a:	69 f1       	breq	.+90     	; 0x1eb6 <SD_sendCommand+0xc2>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    1e5c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
    1e60:	8f 3f       	cpi	r24, 0xFF	; 255
    1e62:	d1 f3       	breq	.-12     	; 0x1e58 <SD_sendCommand+0x64>
    1e64:	18 2f       	mov	r17, r24
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    1e66:	88 23       	and	r24, r24
    1e68:	19 f4       	brne	.+6      	; 0x1e70 <SD_sendCommand+0x7c>
    1e6a:	8d 2d       	mov	r24, r13
    1e6c:	8a 33       	cpi	r24, 0x3A	; 58
    1e6e:	b1 f0       	breq	.+44     	; 0x1e9c <SD_sendCommand+0xa8>
  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
  SPI_receive(); //one can use these bytes to check power supply limits of SD
  SPI_receive(); 
}

SPI_receive(); //extra 8 CLK
    1e70:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
SD_CS_DEASSERT;
    1e74:	c1 9a       	sbi	0x18, 1	; 24

return response; //return state
}
    1e76:	81 2f       	mov	r24, r17
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	ef 90       	pop	r14
    1e80:	df 90       	pop	r13
    1e82:	08 95       	ret
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    1e84:	89 e0       	ldi	r24, 0x09	; 9
    1e86:	ee 0c       	add	r14, r14
    1e88:	ff 1c       	adc	r15, r15
    1e8a:	00 1f       	adc	r16, r16
    1e8c:	11 1f       	adc	r17, r17
    1e8e:	8a 95       	dec	r24
    1e90:	d1 f7       	brne	.-12     	; 0x1e86 <SD_sendCommand+0x92>
    1e92:	c9 cf       	rjmp	.-110    	; 0x1e26 <SD_sendCommand+0x32>
SPI_transmit(arg>>16);
SPI_transmit(arg>>8);
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    1e94:	87 e8       	ldi	r24, 0x87	; 135
    1e96:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>
    1e9a:	dc cf       	rjmp	.-72     	; 0x1e54 <SD_sendCommand+0x60>
while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    1e9c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    1ea0:	86 fd       	sbrc	r24, 6
    1ea2:	0b c0       	rjmp	.+22     	; 0x1eba <SD_sendCommand+0xc6>
  else SDHC_flag = 0;
    1ea4:	10 92 a0 02 	sts	0x02A0, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    1ea8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    1eac:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
  SPI_receive(); 
    1eb0:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
    1eb4:	dd cf       	rjmp	.-70     	; 0x1e70 <SD_sendCommand+0x7c>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    1eb6:	1f ef       	ldi	r17, 0xFF	; 255
    1eb8:	db cf       	rjmp	.-74     	; 0x1e70 <SD_sendCommand+0x7c>

if(response == 0x00 && cmd == 58)  //checking response of CMD58
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	80 93 a0 02 	sts	0x02A0, r24
    1ec0:	f3 cf       	rjmp	.-26     	; 0x1ea8 <SD_sendCommand+0xb4>

00001ec2 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	1a e0       	ldi	r17, 0x0A	; 10
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>
    1ed0:	11 50       	subi	r17, 0x01	; 1
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    1ed2:	d9 f7       	brne	.-10     	; 0x1eca <SD_init+0x8>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    1ed4:	c1 98       	cbi	0x18, 1	; 24
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	50 e0       	ldi	r21, 0x00	; 0
    1edc:	60 e0       	ldi	r22, 0x00	; 0
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
    1ee4:	c0 e2       	ldi	r28, 0x20	; 32
    1ee6:	d0 e0       	ldi	r29, 0x00	; 0
    1ee8:	0a c0       	rjmp	.+20     	; 0x1efe <SD_init+0x3c>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
    1ef8:	21 97       	sbiw	r28, 0x01	; 1
   retry++;
   if(retry>0x20) 
    1efa:	09 f4       	brne	.+2      	; 0x1efe <SD_init+0x3c>
    1efc:	6d c0       	rjmp	.+218    	; 0x1fd8 <SD_init+0x116>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    1efe:	81 30       	cpi	r24, 0x01	; 1
    1f00:	a1 f7       	brne	.-24     	; 0x1eea <SD_init+0x28>

SD_CS_DEASSERT;
    1f02:	c1 9a       	sbi	0x18, 1	; 24
SPI_transmit (0xff);
    1f04:	8f ef       	ldi	r24, 0xFF	; 255
    1f06:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>
SPI_transmit (0xff);
    1f0a:	8f ef       	ldi	r24, 0xFF	; 255
    1f0c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    1f10:	88 e0       	ldi	r24, 0x08	; 8
    1f12:	4a ea       	ldi	r20, 0xAA	; 170
    1f14:	51 e0       	ldi	r21, 0x01	; 1
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
    1f1e:	ce ef       	ldi	r28, 0xFE	; 254
    1f20:	d0 e0       	ldi	r29, 0x00	; 0
    1f22:	0a c0       	rjmp	.+20     	; 0x1f38 <SD_init+0x76>
    1f24:	88 e0       	ldi	r24, 0x08	; 8
    1f26:	4a ea       	ldi	r20, 0xAA	; 170
    1f28:	51 e0       	ldi	r21, 0x01	; 1
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
    1f32:	21 97       	sbiw	r28, 0x01	; 1
retry++;
if(retry>0xfe) 
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <SD_init+0x76>
    1f36:	5a c0       	rjmp	.+180    	; 0x1fec <SD_init+0x12a>
	  SD_version = 1;
	  cardType = 1;
	  break;
   } //time out

}while(response != 0x01);
    1f38:	81 30       	cpi	r24, 0x01	; 1
    1f3a:	a1 f7       	brne	.-24     	; 0x1f24 <SD_init+0x62>
SPI_transmit (0xff);
SPI_transmit (0xff);

retry = 0;

SD_version = 2; //default set to SD compliance with ver2.x; 
    1f3c:	12 e0       	ldi	r17, 0x02	; 2

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    1f3e:	87 e3       	ldi	r24, 0x37	; 55
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	70 e0       	ldi	r23, 0x00	; 0
    1f48:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    1f4c:	89 e2       	ldi	r24, 0x29	; 41
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	50 e0       	ldi	r21, 0x00	; 0
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	70 e4       	ldi	r23, 0x40	; 64
    1f56:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
    1f5a:	ce ef       	ldi	r28, 0xFE	; 254
    1f5c:	d0 e0       	ldi	r29, 0x00	; 0
    1f5e:	11 c0       	rjmp	.+34     	; 0x1f82 <SD_init+0xc0>

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    1f60:	87 e3       	ldi	r24, 0x37	; 55
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    1f6e:	89 e2       	ldi	r24, 0x29	; 41
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	70 e4       	ldi	r23, 0x40	; 64
    1f78:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
    1f7c:	21 97       	sbiw	r28, 0x01	; 1

retry++;
if(retry>0xfe) 
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <SD_init+0xc0>
    1f80:	40 c0       	rjmp	.+128    	; 0x2002 <SD_init+0x140>
   {
      TX_NEWLINE;
	  return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
    1f82:	88 23       	and	r24, r24
    1f84:	69 f7       	brne	.-38     	; 0x1f60 <SD_init+0x9e>


retry = 0;
SDHC_flag = 0;
    1f86:	10 92 a0 02 	sts	0x02A0, r1

if (SD_version == 2)
    1f8a:	12 30       	cpi	r17, 0x02	; 2
    1f8c:	21 f0       	breq	.+8      	; 0x1f96 <SD_init+0xd4>
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	1f 91       	pop	r17
    1f94:	08 95       	ret

if (SD_version == 2)
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    1f96:	8a e3       	ldi	r24, 0x3A	; 58
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
    1fa4:	ce ef       	ldi	r28, 0xFE	; 254
    1fa6:	d0 e0       	ldi	r29, 0x00	; 0
    1fa8:	09 c0       	rjmp	.+18     	; 0x1fbc <SD_init+0xfa>
    1faa:	8a e3       	ldi	r24, 0x3A	; 58
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
    1fb8:	21 97       	sbiw	r28, 0x01	; 1
	 retry++;
	 if(retry>0xfe) 
    1fba:	59 f1       	breq	.+86     	; 0x2012 <SD_init+0x150>
       TX_NEWLINE;
	   cardType = 0;
	   break;
     } //time out

   }while(response != 0x00);
    1fbc:	88 23       	and	r24, r24
    1fbe:	a9 f7       	brne	.-22     	; 0x1faa <SD_init+0xe8>

   if(SDHC_flag == 1) cardType = 2;
    1fc0:	80 91 a0 02 	lds	r24, 0x02A0
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	69 f0       	breq	.+26     	; 0x1fe2 <SD_init+0x120>
   else cardType = 3;
    1fc8:	83 e0       	ldi	r24, 0x03	; 3
    1fca:	80 93 ab 02 	sts	0x02AB, r24

//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
    1fce:	80 e0       	ldi	r24, 0x00	; 0
}
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	1f 91       	pop	r17
    1fd6:	08 95       	ret
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
   retry++;
   if(retry>0x20) 
   	  return 1;   //time out, card not detected
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	1f 91       	pop	r17
    1fe0:	08 95       	ret
	   break;
     } //time out

   }while(response != 0x00);

   if(SDHC_flag == 1) cardType = 2;
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
    1fe4:	80 93 ab 02 	sts	0x02AB, r24

//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	d1 cf       	rjmp	.-94     	; 0x1f8e <SD_init+0xcc>
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
retry++;
if(retry>0xfe) 
   {
	  TX_NEWLINE;
    1fec:	8d e0       	ldi	r24, 0x0D	; 13
    1fee:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    1ff2:	8a e0       	ldi	r24, 0x0A	; 10
    1ff4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
	  SD_version = 1;
	  cardType = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	80 93 ab 02 	sts	0x02AB, r24
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
retry++;
if(retry>0xfe) 
   {
	  TX_NEWLINE;
	  SD_version = 1;
    1ffe:	11 e0       	ldi	r17, 0x01	; 1
	  cardType = 1;
	  break;
    2000:	9e cf       	rjmp	.-196    	; 0x1f3e <SD_init+0x7c>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41

retry++;
if(retry>0xfe) 
   {
      TX_NEWLINE;
    2002:	8d e0       	ldi	r24, 0x0D	; 13
    2004:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2008:	8a e0       	ldi	r24, 0x0A	; 10
    200a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
	  return 2;  //time out, card initialization failed
    200e:	82 e0       	ldi	r24, 0x02	; 2
    2010:	be cf       	rjmp	.-132    	; 0x1f8e <SD_init+0xcc>
   {
	 response = SD_sendCommand(READ_OCR,0);
	 retry++;
	 if(retry>0xfe) 
     {
       TX_NEWLINE;
    2012:	8d e0       	ldi	r24, 0x0D	; 13
    2014:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2018:	8a e0       	ldi	r24, 0x0A	; 10
    201a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
	   cardType = 0;
    201e:	10 92 ab 02 	sts	0x02AB, r1
	   break;
    2022:	ce cf       	rjmp	.-100    	; 0x1fc0 <SD_init+0xfe>

00002024 <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    2024:	af 92       	push	r10
    2026:	bf 92       	push	r11
    2028:	cf 92       	push	r12
    202a:	df 92       	push	r13
    202c:	ef 92       	push	r14
    202e:	ff 92       	push	r15
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	7b 01       	movw	r14, r22
    2036:	8c 01       	movw	r16, r24
    2038:	59 01       	movw	r10, r18
    203a:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    203c:	80 e2       	ldi	r24, 0x20	; 32
    203e:	b8 01       	movw	r22, r16
    2040:	a7 01       	movw	r20, r14
    2042:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    2046:	88 23       	and	r24, r24
    2048:	49 f0       	breq	.+18     	; 0x205c <SD_erase+0x38>
response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
if(response != 0x00)
  return response;

return 0; //normal return
}
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	df 90       	pop	r13
    2054:	cf 90       	pop	r12
    2056:	bf 90       	pop	r11
    2058:	af 90       	pop	r10
    205a:	08 95       	ret

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    205c:	b8 01       	movw	r22, r16
    205e:	a7 01       	movw	r20, r14
    2060:	41 50       	subi	r20, 0x01	; 1
    2062:	50 40       	sbci	r21, 0x00	; 0
    2064:	60 40       	sbci	r22, 0x00	; 0
    2066:	70 40       	sbci	r23, 0x00	; 0
    2068:	4a 0d       	add	r20, r10
    206a:	5b 1d       	adc	r21, r11
    206c:	6c 1d       	adc	r22, r12
    206e:	7d 1d       	adc	r23, r13
    2070:	81 e2       	ldi	r24, 0x21	; 33
    2072:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
if(response != 0x00)
    2076:	88 23       	and	r24, r24
    2078:	41 f7       	brne	.-48     	; 0x204a <SD_erase+0x26>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    207a:	86 e2       	ldi	r24, 0x26	; 38
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
    2088:	e0 cf       	rjmp	.-64     	; 0x204a <SD_erase+0x26>

0000208a <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    208a:	1f 93       	push	r17
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	ab 01       	movw	r20, r22
    2092:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    2094:	81 e1       	ldi	r24, 0x11	; 17
    2096:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
    209a:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    209c:	88 23       	and	r24, r24
    209e:	f9 f4       	brne	.+62     	; 0x20de <SD_readSingleBlock+0x54>

SD_CS_ASSERT;
    20a0:	c1 98       	cbi	0x18, 1	; 24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    20a2:	cf ef       	ldi	r28, 0xFF	; 255
    20a4:	df ef       	ldi	r29, 0xFF	; 255
    20a6:	03 c0       	rjmp	.+6      	; 0x20ae <SD_readSingleBlock+0x24>
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    20a8:	20 97       	sbiw	r28, 0x00	; 0
    20aa:	f1 f0       	breq	.+60     	; 0x20e8 <SD_readSingleBlock+0x5e>
    20ac:	21 97       	sbiw	r28, 0x01	; 1
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    20ae:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
    20b2:	8e 3f       	cpi	r24, 0xFE	; 254
    20b4:	c9 f7       	brne	.-14     	; 0x20a8 <SD_readSingleBlock+0x1e>
    20b6:	c0 e0       	ldi	r28, 0x00	; 0
    20b8:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    20ba:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
    20be:	fe 01       	movw	r30, r28
    20c0:	e6 56       	subi	r30, 0x66	; 102
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    20c6:	21 96       	adiw	r28, 0x01	; 1
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	c0 30       	cpi	r28, 0x00	; 0
    20cc:	d8 07       	cpc	r29, r24
    20ce:	a9 f7       	brne	.-22     	; 0x20ba <SD_readSingleBlock+0x30>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    20d0:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
SPI_receive();
    20d4:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    20d8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
SD_CS_DEASSERT;
    20dc:	c1 9a       	sbi	0x18, 1	; 24

return 0;
}
    20de:	81 2f       	mov	r24, r17
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	1f 91       	pop	r17
    20e6:	08 95       	ret

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    20e8:	c1 9a       	sbi	0x18, 1	; 24
    20ea:	11 e0       	ldi	r17, 0x01	; 1

SPI_receive(); //extra 8 clock pulses
SD_CS_DEASSERT;

return 0;
}
    20ec:	81 2f       	mov	r24, r17
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	1f 91       	pop	r17
    20f4:	08 95       	ret

000020f6 <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	ab 01       	movw	r20, r22
    20fe:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    2100:	88 e1       	ldi	r24, 0x18	; 24
    2102:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <SD_sendCommand>
    2106:	18 2f       	mov	r17, r24
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    2108:	88 23       	and	r24, r24
    210a:	29 f0       	breq	.+10     	; 0x2116 <SD_writeSingleBlock+0x20>
while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;

return 0;
}
    210c:	81 2f       	mov	r24, r17
    210e:	df 91       	pop	r29
    2110:	cf 91       	pop	r28
    2112:	1f 91       	pop	r17
    2114:	08 95       	ret

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;
    2116:	c1 98       	cbi	0x18, 1	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    2118:	8e ef       	ldi	r24, 0xFE	; 254
    211a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    211e:	c0 e0       	ldi	r28, 0x00	; 0
    2120:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    2122:	fe 01       	movw	r30, r28
    2124:	e6 56       	subi	r30, 0x66	; 102
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	80 81       	ld	r24, Z
    212a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    212e:	21 96       	adiw	r28, 0x01	; 1
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	c0 30       	cpi	r28, 0x00	; 0
    2134:	d8 07       	cpc	r29, r24
    2136:	a9 f7       	brne	.-22     	; 0x2122 <SD_writeSingleBlock+0x2c>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    2138:	8f ef       	ldi	r24, 0xFF	; 255
    213a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>
SPI_transmit(0xff);
    213e:	8f ef       	ldi	r24, 0xFF	; 255
    2140:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>

response = SPI_receive();
    2144:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2148:	98 2f       	mov	r25, r24
    214a:	9f 71       	andi	r25, 0x1F	; 31
    214c:	95 30       	cpi	r25, 0x05	; 5
    214e:	39 f0       	breq	.+14     	; 0x215e <SD_writeSingleBlock+0x68>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    2150:	c1 9a       	sbi	0x18, 1	; 24
  return response;
    2152:	18 2f       	mov	r17, r24
while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;

return 0;
}
    2154:	81 2f       	mov	r24, r17
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	08 95       	ret
SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
SPI_transmit(0xff);

response = SPI_receive();

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    215e:	c0 e0       	ldi	r28, 0x00	; 0
    2160:	d0 e0       	ldi	r29, 0x00	; 0
    2162:	05 c0       	rjmp	.+10     	; 0x216e <SD_writeSingleBlock+0x78>
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	cf 3f       	cpi	r28, 0xFF	; 255
    2168:	d8 07       	cpc	r29, r24
    216a:	a1 f0       	breq	.+40     	; 0x2194 <SD_writeSingleBlock+0x9e>
    216c:	21 96       	adiw	r28, 0x01	; 1
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    216e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
    2172:	88 23       	and	r24, r24
    2174:	b9 f3       	breq	.-18     	; 0x2164 <SD_writeSingleBlock+0x6e>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    2176:	c1 9a       	sbi	0x18, 1	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    2178:	8f ef       	ldi	r24, 0xFF	; 255
    217a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    217e:	c1 98       	cbi	0x18, 1	; 24

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <SD_writeSingleBlock+0x8e>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2182:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2184:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SPI_receive>
    2188:	88 23       	and	r24, r24
    218a:	59 f4       	brne	.+22     	; 0x21a2 <SD_writeSingleBlock+0xac>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    218c:	8f ef       	ldi	r24, 0xFF	; 255
    218e:	cf 3f       	cpi	r28, 0xFF	; 255
    2190:	d8 07       	cpc	r29, r24
    2192:	b9 f7       	brne	.-18     	; 0x2182 <SD_writeSingleBlock+0x8c>
    2194:	c1 9a       	sbi	0x18, 1	; 24
    2196:	11 e0       	ldi	r17, 0x01	; 1
SD_CS_DEASSERT;

return 0;
}
    2198:	81 2f       	mov	r24, r17
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	08 95       	ret
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    21a2:	c1 9a       	sbi	0x18, 1	; 24

return 0;
    21a4:	b3 cf       	rjmp	.-154    	; 0x210c <SD_writeSingleBlock+0x16>

000021a6 <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    21a6:	82 e5       	ldi	r24, 0x52	; 82
    21a8:	8d b9       	out	0x0d, r24	; 13
SPSR = 0x00;
    21aa:	1e b8       	out	0x0e, r1	; 14
}
    21ac:	08 95       	ret

000021ae <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    21ae:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    21b0:	77 9b       	sbis	0x0e, 7	; 14
    21b2:	fe cf       	rjmp	.-4      	; 0x21b0 <SPI_transmit+0x2>
data = SPDR;
    21b4:	8f b1       	in	r24, 0x0f	; 15

return(data);
}
    21b6:	08 95       	ret

000021b8 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    21b8:	8f ef       	ldi	r24, 0xFF	; 255
    21ba:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));
    21bc:	77 9b       	sbis	0x0e, 7	; 14
    21be:	fe cf       	rjmp	.-4      	; 0x21bc <SPI_receive+0x4>
data = SPDR;
    21c0:	8f b1       	in	r24, 0x0f	; 15

// Return data register
return data;
}
    21c2:	08 95       	ret

000021c4 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
    21c4:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
    21c6:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (1 << URSEL) | 0x06;
    21c8:	86 e8       	ldi	r24, 0x86	; 134
    21ca:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x2f; //set baud rate lo
    21cc:	8f e2       	ldi	r24, 0x2F	; 47
    21ce:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
    21d0:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x18;
    21d2:	88 e1       	ldi	r24, 0x18	; 24
    21d4:	8a b9       	out	0x0a, r24	; 10
}
    21d6:	08 95       	ret

000021d8 <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSRA & (1<<RXC))); 	// Wait for incomming data
    21d8:	5f 9b       	sbis	0x0b, 7	; 11
    21da:	fe cf       	rjmp	.-4      	; 0x21d8 <receiveByte>
	
	status = UCSRA;
    21dc:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
    21de:	8c b1       	in	r24, 0x0c	; 12
	
	return(data);
}
    21e0:	08 95       	ret

000021e2 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    21e2:	5d 9b       	sbis	0x0b, 5	; 11
    21e4:	fe cf       	rjmp	.-4      	; 0x21e2 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    21e6:	8c b9       	out	0x0c, r24	; 12
}
    21e8:	08 95       	ret

000021ea <transmitHex>:
//Function to transmit hex format data
//first argument indicates type: CHAR, INT or LONG
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	2b 97       	sbiw	r28, 0x0b	; 11
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";
    21fe:	de 01       	movw	r26, r28
    2200:	11 96       	adiw	r26, 0x01	; 1
    2202:	e4 e7       	ldi	r30, 0x74	; 116
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	9b e0       	ldi	r25, 0x0B	; 11
    2208:	01 90       	ld	r0, Z+
    220a:	0d 92       	st	X+, r0
    220c:	91 50       	subi	r25, 0x01	; 1
    220e:	e1 f7       	brne	.-8      	; 0x2208 <transmitHex+0x1e>

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	a9 f1       	breq	.+106    	; 0x227e <transmitHex+0x94>
if (dataType == LONG) count = 8;
    2214:	82 30       	cpi	r24, 0x02	; 2
    2216:	79 f1       	breq	.+94     	; 0x2276 <transmitHex+0x8c>
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	fe 01       	movw	r30, r28
    221c:	32 96       	adiw	r30, 0x02	; 2
    221e:	0e c0       	rjmp	.+28     	; 0x223c <transmitHex+0x52>

for(i=count; i>0; i--)
{
  temp = data % 16;
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
    2220:	df 01       	movw	r26, r30
    2222:	a8 0f       	add	r26, r24
    2224:	b1 1d       	adc	r27, r1
    2226:	90 5d       	subi	r25, 0xD0	; 208
    2228:	9c 93       	st	X, r25

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
    222a:	81 50       	subi	r24, 0x01	; 1
    222c:	91 f0       	breq	.+36     	; 0x2252 <transmitHex+0x68>
{
  temp = data % 16;
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
  else dataString [i+1] = (temp - 10) + 0x41;

  data = data/16;
    222e:	94 e0       	ldi	r25, 0x04	; 4
    2230:	76 95       	lsr	r23
    2232:	67 95       	ror	r22
    2234:	57 95       	ror	r21
    2236:	47 95       	ror	r20
    2238:	9a 95       	dec	r25
    223a:	d1 f7       	brne	.-12     	; 0x2230 <transmitHex+0x46>
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
{
  temp = data % 16;
    223c:	94 2f       	mov	r25, r20
    223e:	9f 70       	andi	r25, 0x0F	; 15
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
    2240:	9a 30       	cpi	r25, 0x0A	; 10
    2242:	70 f3       	brcs	.-36     	; 0x2220 <transmitHex+0x36>
  else dataString [i+1] = (temp - 10) + 0x41;
    2244:	df 01       	movw	r26, r30
    2246:	a8 0f       	add	r26, r24
    2248:	b1 1d       	adc	r27, r1
    224a:	99 5c       	subi	r25, 0xC9	; 201
    224c:	9c 93       	st	X, r25

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
    224e:	81 50       	subi	r24, 0x01	; 1
    2250:	71 f7       	brne	.-36     	; 0x222e <transmitHex+0x44>
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	88 23       	and	r24, r24
    2256:	31 f0       	breq	.+12     	; 0x2264 <transmitHex+0x7a>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2258:	5d 9b       	sbis	0x0b, 5	; 11
    225a:	fe cf       	rjmp	.-4      	; 0x2258 <transmitHex+0x6e>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    225c:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    225e:	81 91       	ld	r24, Z+
    2260:	88 23       	and	r24, r24
    2262:	d1 f7       	brne	.-12     	; 0x2258 <transmitHex+0x6e>

  data = data/16;
}

transmitString (dataString);
}
    2264:	2b 96       	adiw	r28, 0x0b	; 11
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;
    2276:	88 e0       	ldi	r24, 0x08	; 8
    2278:	fe 01       	movw	r30, r28
    227a:	32 96       	adiw	r30, 0x02	; 2
    227c:	df cf       	rjmp	.-66     	; 0x223c <transmitHex+0x52>
{
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
    227e:	84 e0       	ldi	r24, 0x04	; 4
    2280:	fe 01       	movw	r30, r28
    2282:	32 96       	adiw	r30, 0x02	; 2
    2284:	db cf       	rjmp	.-74     	; 0x223c <transmitHex+0x52>

00002286 <transmitString_F>:
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    2286:	9c 01       	movw	r18, r24
    2288:	fc 01       	movw	r30, r24
    228a:	44 91       	lpm	r20, Z
    228c:	44 23       	and	r20, r20
    228e:	39 f0       	breq	.+14     	; 0x229e <transmitString_F+0x18>
   transmitByte(pgm_read_byte(&(*string++)));
    2290:	01 96       	adiw	r24, 0x01	; 1
    2292:	f9 01       	movw	r30, r18
    2294:	24 91       	lpm	r18, Z
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    2296:	5d 9b       	sbis	0x0b, 5	; 11
    2298:	fe cf       	rjmp	.-4      	; 0x2296 <transmitString_F+0x10>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    229a:	2c b9       	out	0x0c, r18	; 12
    229c:	f4 cf       	rjmp	.-24     	; 0x2286 <transmitString_F>
    229e:	08 95       	ret

000022a0 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    22a0:	fc 01       	movw	r30, r24
  while (*string)
    22a2:	80 81       	ld	r24, Z
    22a4:	88 23       	and	r24, r24
    22a6:	39 f0       	breq	.+14     	; 0x22b6 <transmitString+0x16>
}

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
    22a8:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    22aa:	5d 9b       	sbis	0x0b, 5	; 11
    22ac:	fe cf       	rjmp	.-4      	; 0x22aa <transmitString+0xa>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    22ae:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    22b0:	81 91       	ld	r24, Z+
    22b2:	88 23       	and	r24, r24
    22b4:	d1 f7       	brne	.-12     	; 0x22aa <transmitString+0xa>
    22b6:	08 95       	ret

000022b8 <port_init>:
#include "fat32.h"


void port_init(void)
{
PORTA = 0x00;
    22b8:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
    22ba:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
    22bc:	8f ee       	ldi	r24, 0xEF	; 239
    22be:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
    22c0:	8f eb       	ldi	r24, 0xBF	; 191
    22c2:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
    22c4:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
    22c6:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
    22c8:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
    22ca:	8e ef       	ldi	r24, 0xFE	; 254
    22cc:	81 bb       	out	0x11, r24	; 17
}
    22ce:	08 95       	ret

000022d0 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
    22d0:	f8 94       	cli
#include "fat32.h"


void port_init(void)
{
PORTA = 0x00;
    22d2:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
    22d4:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
    22d6:	8f ee       	ldi	r24, 0xEF	; 239
    22d8:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
    22da:	8f eb       	ldi	r24, 0xBF	; 191
    22dc:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
    22de:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
    22e0:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
    22e2:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
    22e4:	8e ef       	ldi	r24, 0xFE	; 254
    22e6:	81 bb       	out	0x11, r24	; 17
//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
 port_init();
 spi_init();
    22e8:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <spi_init>
 uart0_init();
    22ec:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <uart0_init>

 MCUCR = 0x00;
    22f0:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
    22f2:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x00; //timer interrupt sources
    22f4:	19 be       	out	0x39, r1	; 57
 //all peripherals are now initialized
}
    22f6:	08 95       	ret

000022f8 <main>:

//*************************** MAIN *******************************//
int main(void)
{
    22f8:	4f 92       	push	r4
    22fa:	5f 92       	push	r5
    22fc:	6f 92       	push	r6
    22fe:	7f 92       	push	r7
    2300:	8f 92       	push	r8
    2302:	9f 92       	push	r9
    2304:	af 92       	push	r10
    2306:	bf 92       	push	r11
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	2e 97       	sbiw	r28, 0x0e	; 14
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	88 ee       	ldi	r24, 0xE8	; 232
    232a:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    232c:	28 eb       	ldi	r18, 0xB8	; 184
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	f9 01       	movw	r30, r18
    2332:	31 97       	sbiw	r30, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <main+0x3a>
    2336:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2338:	d9 f7       	brne	.-10     	; 0x2330 <main+0x38>
unsigned int i;
unsigned char fileName[13];

_delay_ms(100);  //delay for VCC stabilization

init_devices();
    233a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <init_devices>

PORTD |= 0x04; //switching ON the LED (for testing purpose only)
    233e:	92 9a       	sbi	0x12, 2	; 18

TX_NEWLINE;
    2340:	8d e0       	ldi	r24, 0x0D	; 13
    2342:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2346:	8a e0       	ldi	r24, 0x0A	; 10
    2348:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
TX_NEWLINE;
    234c:	8d e0       	ldi	r24, 0x0D	; 13
    234e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2352:	8a e0       	ldi	r24, 0x0A	; 10
    2354:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F (PSTR("*********************************************"));
    2358:	8e ea       	ldi	r24, 0xAE	; 174
    235a:	94 e0       	ldi	r25, 0x04	; 4
    235c:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
TX_NEWLINE;
    2360:	8d e0       	ldi	r24, 0x0D	; 13
    2362:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2366:	8a e0       	ldi	r24, 0x0A	; 10
    2368:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
    236c:	86 e8       	ldi	r24, 0x86	; 134
    236e:	94 e0       	ldi	r25, 0x04	; 4
    2370:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
TX_NEWLINE;
    2374:	8d e0       	ldi	r24, 0x0D	; 13
    2376:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    237a:	8a e0       	ldi	r24, 0x0A	; 10
    237c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F (PSTR("*********************************************"));
    2380:	88 e5       	ldi	r24, 0x58	; 88
    2382:	94 e0       	ldi	r25, 0x04	; 4
    2384:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
TX_NEWLINE;
    2388:	8d e0       	ldi	r24, 0x0D	; 13
    238a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    238e:	8a e0       	ldi	r24, 0x0A	; 10
    2390:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>

cardType = 0;
    2394:	10 92 ab 02 	sts	0x02AB, r1

for (i=0; i<10; i++)
    2398:	00 e0       	ldi	r16, 0x00	; 0
    239a:	10 e0       	ldi	r17, 0x00	; 0
{
  error = SD_init();
    239c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <SD_init>
  if(!error) break;
    23a0:	88 23       	and	r24, r24
    23a2:	99 f0       	breq	.+38     	; 0x23ca <main+0xd2>
transmitString_F (PSTR("*********************************************"));
TX_NEWLINE;

cardType = 0;

for (i=0; i<10; i++)
    23a4:	0f 5f       	subi	r16, 0xFF	; 255
    23a6:	1f 4f       	sbci	r17, 0xFF	; 255
    23a8:	0a 30       	cpi	r16, 0x0A	; 10
    23aa:	11 05       	cpc	r17, r1
    23ac:	b9 f7       	brne	.-18     	; 0x239c <main+0xa4>
  if(!error) break;
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    23ae:	81 30       	cpi	r24, 0x01	; 1
    23b0:	39 f0       	breq	.+14     	; 0x23c0 <main+0xc8>
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    23b2:	82 30       	cpi	r24, 0x02	; 2
    23b4:	21 f4       	brne	.+8      	; 0x23be <main+0xc6>
    23b6:	84 e2       	ldi	r24, 0x24	; 36
    23b8:	94 e0       	ldi	r25, 0x04	; 4
    23ba:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    23be:	ff cf       	rjmp	.-2      	; 0x23be <main+0xc6>
  if(!error) break;
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    23c0:	81 e4       	ldi	r24, 0x41	; 65
    23c2:	94 e0       	ldi	r25, 0x04	; 4
    23c4:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    23c8:	fa cf       	rjmp	.-12     	; 0x23be <main+0xc6>
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));

  while(1);  //wait here forever if error in SD init 
}

switch (cardType)
    23ca:	80 91 ab 02 	lds	r24, 0x02AB
    23ce:	82 30       	cpi	r24, 0x02	; 2
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <main+0xdc>
    23d2:	da c2       	rjmp	.+1460   	; 0x2988 <main+0x690>
    23d4:	83 30       	cpi	r24, 0x03	; 3
    23d6:	09 f4       	brne	.+2      	; 0x23da <main+0xe2>
    23d8:	d2 c2       	rjmp	.+1444   	; 0x297e <main+0x686>
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <main+0xe8>
    23de:	ca c2       	rjmp	.+1428   	; 0x2974 <main+0x67c>
  		 break;
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
  		 break;
  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
  		 break;
  default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    23e0:	87 e9       	ldi	r24, 0x97	; 151
    23e2:	93 e0       	ldi	r25, 0x03	; 3
    23e4:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
  		 break; 
}


SPI_HIGH_SPEED;	//SCK - 4 MHz
    23e8:	80 e5       	ldi	r24, 0x50	; 80
    23ea:	8d b9       	out	0x0d, r24	; 13
    23ec:	70 9a       	sbi	0x0e, 0	; 14
    23ee:	83 e3       	ldi	r24, 0x33	; 51
    23f0:	97 e0       	ldi	r25, 0x07	; 7
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <main+0xfa>
_delay_ms(1);   //some delay


FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    23f6:	0e 94 be 03 	call	0x77c	; 0x77c <getBootSectorData>
if(error) 	
    23fa:	88 23       	and	r24, r24
    23fc:	09 f0       	breq	.+2      	; 0x2400 <main+0x108>
    23fe:	c9 c2       	rjmp	.+1426   	; 0x2992 <main+0x69a>

SPI_HIGH_SPEED;	//SCK - 4 MHz
_delay_ms(1);   //some delay


FAT32_active = 1;
    2400:	cc 24       	eor	r12, r12
    2402:	c3 94       	inc	r12
    2404:	3e 01       	movw	r6, r28
    2406:	08 94       	sec
    2408:	61 1c       	adc	r6, r1
    240a:	71 1c       	adc	r7, r1
    240c:	8e 01       	movw	r16, r28
    240e:	02 5f       	subi	r16, 0xF2	; 242
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f);
TX_NEWLINE;
}

totalBlocks = 1;
    2412:	b1 e0       	ldi	r27, 0x01	; 1
    2414:	8b 2e       	mov	r8, r27
    2416:	91 2c       	mov	r9, r1
    2418:	a1 2c       	mov	r10, r1
    241a:	b1 2c       	mov	r11, r1
{
TX_NEWLINE;
TX_NEWLINE;
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
data = receiveByte(); transmitByte(data);
startBlock = (data & 0x0f) * 1000;
    241c:	a8 ee       	ldi	r26, 0xE8	; 232
    241e:	4a 2e       	mov	r4, r26
    2420:	a3 e0       	ldi	r26, 0x03	; 3
    2422:	5a 2e       	mov	r5, r26
    2424:	25 c0       	rjmp	.+74     	; 0x2470 <main+0x178>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    2426:	81 33       	cpi	r24, 0x31	; 49
    2428:	09 f4       	brne	.+2      	; 0x242c <main+0x134>
    242a:	3a c2       	rjmp	.+1140   	; 0x28a0 <main+0x5a8>
    242c:	82 33       	cpi	r24, 0x32	; 50
    242e:	09 f4       	brne	.+2      	; 0x2432 <main+0x13a>
    2430:	fe c1       	rjmp	.+1020   	; 0x282e <main+0x536>
    2432:	80 33       	cpi	r24, 0x30	; 48
    2434:	09 f4       	brne	.+2      	; 0x2438 <main+0x140>
    2436:	da c1       	rjmp	.+948    	; 0x27ec <main+0x4f4>
          break;

case '9': memoryStatistics();
          break;

default: TX_NEWLINE;
    2438:	8d e0       	ldi	r24, 0x0D	; 13
    243a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    243e:	8a e0       	ldi	r24, 0x0A	; 10
    2440:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
         TX_NEWLINE;
    2444:	8d e0       	ldi	r24, 0x0D	; 13
    2446:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    244a:	8a e0       	ldi	r24, 0x0A	; 10
    244c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
         transmitString_F(PSTR(" Invalid option!"));
    2450:	81 ec       	ldi	r24, 0xC1	; 193
    2452:	91 e0       	ldi	r25, 0x01	; 1
    2454:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
         TX_NEWLINE;
    2458:	8d e0       	ldi	r24, 0x0D	; 13
    245a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    245e:	8a e0       	ldi	r24, 0x0A	; 10
    2460:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
}

TX_NEWLINE;
    2464:	8d e0       	ldi	r24, 0x0D	; 13
    2466:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    246a:	8a e0       	ldi	r24, 0x0A	; 10
    246c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
  FAT32_active = 0;
}

while(1)
{
TX_NEWLINE;
    2470:	8d e0       	ldi	r24, 0x0D	; 13
    2472:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2476:	8a e0       	ldi	r24, 0x0A	; 10
    2478:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("Press any key..."));
    247c:	85 e7       	ldi	r24, 0x75	; 117
    247e:	93 e0       	ldi	r25, 0x03	; 3
    2480:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
TX_NEWLINE;
    2484:	8d e0       	ldi	r24, 0x0D	; 13
    2486:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    248a:	8a e0       	ldi	r24, 0x0A	; 10
    248c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
option = receiveByte();
    2490:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <receiveByte>
TX_NEWLINE;
    2494:	8d e0       	ldi	r24, 0x0D	; 13
    2496:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    249a:	8a e0       	ldi	r24, 0x0A	; 10
    249c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("> 0 : Erase Blocks"));
    24a0:	82 e6       	ldi	r24, 0x62	; 98
    24a2:	93 e0       	ldi	r25, 0x03	; 3
    24a4:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
TX_NEWLINE;
    24a8:	8d e0       	ldi	r24, 0x0D	; 13
    24aa:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    24ae:	8a e0       	ldi	r24, 0x0A	; 10
    24b0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("> 1 : Write single Block"));
    24b4:	89 e4       	ldi	r24, 0x49	; 73
    24b6:	93 e0       	ldi	r25, 0x03	; 3
    24b8:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
TX_NEWLINE;
    24bc:	8d e0       	ldi	r24, 0x0D	; 13
    24be:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    24c2:	8a e0       	ldi	r24, 0x0A	; 10
    24c4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("> 2 : Read single Block"));
    24c8:	81 e3       	ldi	r24, 0x31	; 49
    24ca:	93 e0       	ldi	r25, 0x03	; 3
    24cc:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
TX_NEWLINE;
transmitString_F(PSTR("> 4 : Read multiple Blocks"));
#endif


TX_NEWLINE;
    24d0:	8d e0       	ldi	r24, 0x0D	; 13
    24d2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    24d6:	8a e0       	ldi	r24, 0x0A	; 10
    24d8:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("> 5 : Get file list"));
    24dc:	8d e1       	ldi	r24, 0x1D	; 29
    24de:	93 e0       	ldi	r25, 0x03	; 3
    24e0:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
TX_NEWLINE;
    24e4:	8d e0       	ldi	r24, 0x0D	; 13
    24e6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    24ea:	8a e0       	ldi	r24, 0x0A	; 10
    24ec:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("> 6 : Read File"));
    24f0:	8d e0       	ldi	r24, 0x0D	; 13
    24f2:	93 e0       	ldi	r25, 0x03	; 3
    24f4:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
TX_NEWLINE;
    24f8:	8d e0       	ldi	r24, 0x0D	; 13
    24fa:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    24fe:	8a e0       	ldi	r24, 0x0A	; 10
    2500:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("> 7 : Write File"));
    2504:	8c ef       	ldi	r24, 0xFC	; 252
    2506:	92 e0       	ldi	r25, 0x02	; 2
    2508:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
TX_NEWLINE;
    250c:	8d e0       	ldi	r24, 0x0D	; 13
    250e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2512:	8a e0       	ldi	r24, 0x0A	; 10
    2514:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("> 8 : Delete File"));
    2518:	8a ee       	ldi	r24, 0xEA	; 234
    251a:	92 e0       	ldi	r25, 0x02	; 2
    251c:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
TX_NEWLINE;
    2520:	8d e0       	ldi	r24, 0x0D	; 13
    2522:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2526:	8a e0       	ldi	r24, 0x0A	; 10
    2528:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("> 9 : Read SD Memory Capacity (Total/Free)"));
    252c:	8f eb       	ldi	r24, 0xBF	; 191
    252e:	92 e0       	ldi	r25, 0x02	; 2
    2530:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>

TX_NEWLINE;
    2534:	8d e0       	ldi	r24, 0x0D	; 13
    2536:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    253a:	8a e0       	ldi	r24, 0x0A	; 10
    253c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
TX_NEWLINE;
    2540:	8d e0       	ldi	r24, 0x0D	; 13
    2542:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2546:	8a e0       	ldi	r24, 0x0A	; 10
    2548:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("> Select Option (0-9): "));
    254c:	87 ea       	ldi	r24, 0xA7	; 167
    254e:	92 e0       	ldi	r25, 0x02	; 2
    2550:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>

/*WARNING: If option 0, 1 or 3 is selected, the card may not be detected by PC/Laptop again,
as it disturbs the FAT format, and you may have to format it again with FAT32.
This options are given for learnig the raw data transfer to & from the SD Card*/

option = receiveByte();
    2554:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <receiveByte>
    2558:	d8 2e       	mov	r13, r24
transmitByte(option);
    255a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    255e:	8d 2d       	mov	r24, r13
    2560:	85 53       	subi	r24, 0x35	; 53
    2562:	85 30       	cpi	r24, 0x05	; 5
    2564:	18 f4       	brcc	.+6      	; 0x256c <main+0x274>
{
  if(!FAT32_active) 
    2566:	cc 20       	and	r12, r12
    2568:	09 f4       	brne	.+2      	; 0x256c <main+0x274>
    256a:	23 c1       	rjmp	.+582    	; 0x27b2 <main+0x4ba>
	continue;
  } 
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    256c:	8d 2d       	mov	r24, r13
    256e:	80 53       	subi	r24, 0x30	; 48
    2570:	85 30       	cpi	r24, 0x05	; 5
    2572:	08 f4       	brcc	.+2      	; 0x2576 <main+0x27e>
    2574:	74 c0       	rjmp	.+232    	; 0x265e <main+0x366>
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f);
TX_NEWLINE;
}

totalBlocks = 1;
    2576:	80 92 a1 02 	sts	0x02A1, r8
    257a:	90 92 a2 02 	sts	0x02A2, r9
    257e:	a0 92 a3 02 	sts	0x02A3, r10
    2582:	b0 92 a4 02 	sts	0x02A4, r11
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    2586:	8d 2d       	mov	r24, r13
    2588:	85 33       	cpi	r24, 0x35	; 53
    258a:	09 f4       	brne	.+2      	; 0x258e <main+0x296>
    258c:	23 c1       	rjmp	.+582    	; 0x27d4 <main+0x4dc>
    258e:	86 33       	cpi	r24, 0x36	; 54
    2590:	08 f4       	brcc	.+2      	; 0x2594 <main+0x29c>
    2592:	49 cf       	rjmp	.-366    	; 0x2426 <main+0x12e>
    2594:	8d 2d       	mov	r24, r13
    2596:	89 33       	cpi	r24, 0x39	; 57
    2598:	08 f0       	brcs	.+2      	; 0x259c <main+0x2a4>
    259a:	05 c1       	rjmp	.+522    	; 0x27a6 <main+0x4ae>
  		  findFiles(GET_LIST,0);
          break;

case '6': 
case '7': 
case '8': TX_NEWLINE;
    259c:	8d e0       	ldi	r24, 0x0D	; 13
    259e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    25a2:	8a e0       	ldi	r24, 0x0A	; 10
    25a4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
		  TX_NEWLINE;
    25a8:	8d e0       	ldi	r24, 0x0D	; 13
    25aa:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    25ae:	8a e0       	ldi	r24, 0x0A	; 10
    25b0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
          transmitString_F(PSTR("Enter file name: "));
    25b4:	88 ee       	ldi	r24, 0xE8	; 232
    25b6:	91 e0       	ldi	r25, 0x01	; 1
    25b8:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    25bc:	f3 01       	movw	r30, r6
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
    25be:	11 92       	st	Z+, r1
case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
    25c0:	e0 17       	cp	r30, r16
    25c2:	f1 07       	cpc	r31, r17
    25c4:	e1 f7       	brne	.-8      	; 0x25be <main+0x2c6>
    25c6:	ee 24       	eor	r14, r14
    25c8:	ff 24       	eor	r15, r15
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    25ca:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <receiveByte>
    25ce:	98 2f       	mov	r25, r24
            if(data == 0x0d) break;  //'ENTER' key pressed
    25d0:	8d 30       	cpi	r24, 0x0D	; 13
    25d2:	71 f1       	breq	.+92     	; 0x2630 <main+0x338>
			if(data == 0x08)	//'Back Space' key pressed
    25d4:	88 30       	cpi	r24, 0x08	; 8
    25d6:	c1 f0       	breq	.+48     	; 0x2608 <main+0x310>
	     			transmitByte(data); 
	     			i--; 
	   			} 
	   			continue;     
	 		}
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    25d8:	80 52       	subi	r24, 0x20	; 32
    25da:	8f 35       	cpi	r24, 0x5F	; 95
    25dc:	b0 f7       	brcc	.-20     	; 0x25ca <main+0x2d2>
			transmitByte(data);
    25de:	89 2f       	mov	r24, r25
    25e0:	9e 87       	std	Y+14, r25	; 0x0e
    25e2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
            fileName[i++] = data;
    25e6:	f3 01       	movw	r30, r6
    25e8:	ee 0d       	add	r30, r14
    25ea:	ff 1d       	adc	r31, r15
    25ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ee:	90 83       	st	Z, r25
    25f0:	08 94       	sec
    25f2:	e1 1c       	adc	r14, r1
    25f4:	f1 1c       	adc	r15, r1
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    25f6:	8d e0       	ldi	r24, 0x0D	; 13
    25f8:	e8 16       	cp	r14, r24
    25fa:	f1 04       	cpc	r15, r1
    25fc:	31 f7       	brne	.-52     	; 0x25ca <main+0x2d2>
    25fe:	82 ed       	ldi	r24, 0xD2	; 210
    2600:	91 e0       	ldi	r25, 0x01	; 1
    2602:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    2606:	2e cf       	rjmp	.-420    	; 0x2464 <main+0x16c>
          {
            data = receiveByte();
            if(data == 0x0d) break;  //'ENTER' key pressed
			if(data == 0x08)	//'Back Space' key pressed
	 		{ 
	   			if(i != 0)
    2608:	e1 14       	cp	r14, r1
    260a:	f1 04       	cpc	r15, r1
    260c:	f1 f2       	breq	.-68     	; 0x25ca <main+0x2d2>
	   			{ 
	     			transmitByte(data);
    260e:	88 e0       	ldi	r24, 0x08	; 8
    2610:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
					transmitByte(' '); 
    2614:	80 e2       	ldi	r24, 0x20	; 32
    2616:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
	     			transmitByte(data); 
    261a:	88 e0       	ldi	r24, 0x08	; 8
    261c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
	     			i--; 
    2620:	08 94       	sec
    2622:	e1 08       	sbc	r14, r1
    2624:	f1 08       	sbc	r15, r1
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    2626:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <receiveByte>
    262a:	98 2f       	mov	r25, r24
            if(data == 0x0d) break;  //'ENTER' key pressed
    262c:	8d 30       	cpi	r24, 0x0D	; 13
    262e:	91 f6       	brne	.-92     	; 0x25d4 <main+0x2dc>
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
			transmitByte(data);
            fileName[i++] = data;
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
          }
          if(i>12) break;
    2630:	8d e0       	ldi	r24, 0x0D	; 13
    2632:	e8 16       	cp	r14, r24
    2634:	f1 04       	cpc	r15, r1
    2636:	08 f0       	brcs	.+2      	; 0x263a <main+0x342>
    2638:	15 cf       	rjmp	.-470    	; 0x2464 <main+0x16c>
       
	      TX_NEWLINE;
    263a:	8d e0       	ldi	r24, 0x0D	; 13
    263c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2640:	8a e0       	ldi	r24, 0x0A	; 10
    2642:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
		  if(option == '6')
    2646:	8d 2d       	mov	r24, r13
    2648:	86 33       	cpi	r24, 0x36	; 54
    264a:	09 f4       	brne	.+2      	; 0x264e <main+0x356>
    264c:	8e c1       	rjmp	.+796    	; 0x296a <main+0x672>
		     readFile( READ, fileName);
		  if(option == '7')
    264e:	8d 2d       	mov	r24, r13
    2650:	87 33       	cpi	r24, 0x37	; 55
    2652:	09 f4       	brne	.+2      	; 0x2656 <main+0x35e>
    2654:	86 c1       	rjmp	.+780    	; 0x2962 <main+0x66a>
		  	 writeFile(fileName);
 		  if(option == '8')
		     deleteFile(fileName);
    2656:	c3 01       	movw	r24, r6
    2658:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <deleteFile>
    265c:	03 cf       	rjmp	.-506    	; 0x2464 <main+0x16c>
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
{
TX_NEWLINE;
    265e:	8d e0       	ldi	r24, 0x0D	; 13
    2660:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2664:	8a e0       	ldi	r24, 0x0A	; 10
    2666:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
TX_NEWLINE;
    266a:	8d e0       	ldi	r24, 0x0D	; 13
    266c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2670:	8a e0       	ldi	r24, 0x0A	; 10
    2672:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    2676:	8b e6       	ldi	r24, 0x6B	; 107
    2678:	92 e0       	ldi	r25, 0x02	; 2
    267a:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
data = receiveByte(); transmitByte(data);
    267e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <receiveByte>
    2682:	e8 2e       	mov	r14, r24
    2684:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
startBlock = (data & 0x0f) * 1000;
    2688:	2e 2d       	mov	r18, r14
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	2f 70       	andi	r18, 0x0F	; 15
    268e:	30 70       	andi	r19, 0x00	; 0
    2690:	24 9d       	mul	r18, r4
    2692:	c0 01       	movw	r24, r0
    2694:	25 9d       	mul	r18, r5
    2696:	90 0d       	add	r25, r0
    2698:	34 9d       	mul	r19, r4
    269a:	90 0d       	add	r25, r0
    269c:	11 24       	eor	r1, r1
    269e:	aa 27       	eor	r26, r26
    26a0:	97 fd       	sbrc	r25, 7
    26a2:	a0 95       	com	r26
    26a4:	ba 2f       	mov	r27, r26
    26a6:	80 93 96 00 	sts	0x0096, r24
    26aa:	90 93 97 00 	sts	0x0097, r25
    26ae:	a0 93 98 00 	sts	0x0098, r26
    26b2:	b0 93 99 00 	sts	0x0099, r27
data = receiveByte(); transmitByte(data);
    26b6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <receiveByte>
    26ba:	e8 2e       	mov	r14, r24
    26bc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
startBlock += (data & 0x0f) * 100;
    26c0:	60 91 96 00 	lds	r22, 0x0096
    26c4:	70 91 97 00 	lds	r23, 0x0097
    26c8:	80 91 98 00 	lds	r24, 0x0098
    26cc:	90 91 99 00 	lds	r25, 0x0099
    26d0:	4e 2d       	mov	r20, r14
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	4f 70       	andi	r20, 0x0F	; 15
    26d6:	50 70       	andi	r21, 0x00	; 0
    26d8:	e4 e6       	ldi	r30, 0x64	; 100
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	4e 9f       	mul	r20, r30
    26de:	90 01       	movw	r18, r0
    26e0:	4f 9f       	mul	r20, r31
    26e2:	30 0d       	add	r19, r0
    26e4:	5e 9f       	mul	r21, r30
    26e6:	30 0d       	add	r19, r0
    26e8:	11 24       	eor	r1, r1
    26ea:	44 27       	eor	r20, r20
    26ec:	37 fd       	sbrc	r19, 7
    26ee:	40 95       	com	r20
    26f0:	54 2f       	mov	r21, r20
    26f2:	26 0f       	add	r18, r22
    26f4:	37 1f       	adc	r19, r23
    26f6:	48 1f       	adc	r20, r24
    26f8:	59 1f       	adc	r21, r25
    26fa:	20 93 96 00 	sts	0x0096, r18
    26fe:	30 93 97 00 	sts	0x0097, r19
    2702:	40 93 98 00 	sts	0x0098, r20
    2706:	50 93 99 00 	sts	0x0099, r21
data = receiveByte(); transmitByte(data);
    270a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <receiveByte>
    270e:	e8 2e       	mov	r14, r24
    2710:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
startBlock += (data & 0x0f) * 10;
    2714:	60 91 96 00 	lds	r22, 0x0096
    2718:	70 91 97 00 	lds	r23, 0x0097
    271c:	80 91 98 00 	lds	r24, 0x0098
    2720:	90 91 99 00 	lds	r25, 0x0099
    2724:	4e 2d       	mov	r20, r14
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	4f 70       	andi	r20, 0x0F	; 15
    272a:	50 70       	andi	r21, 0x00	; 0
    272c:	9a 01       	movw	r18, r20
    272e:	22 0f       	add	r18, r18
    2730:	33 1f       	adc	r19, r19
    2732:	44 0f       	add	r20, r20
    2734:	55 1f       	adc	r21, r21
    2736:	44 0f       	add	r20, r20
    2738:	55 1f       	adc	r21, r21
    273a:	44 0f       	add	r20, r20
    273c:	55 1f       	adc	r21, r21
    273e:	24 0f       	add	r18, r20
    2740:	35 1f       	adc	r19, r21
    2742:	44 27       	eor	r20, r20
    2744:	37 fd       	sbrc	r19, 7
    2746:	40 95       	com	r20
    2748:	54 2f       	mov	r21, r20
    274a:	26 0f       	add	r18, r22
    274c:	37 1f       	adc	r19, r23
    274e:	48 1f       	adc	r20, r24
    2750:	59 1f       	adc	r21, r25
    2752:	20 93 96 00 	sts	0x0096, r18
    2756:	30 93 97 00 	sts	0x0097, r19
    275a:	40 93 98 00 	sts	0x0098, r20
    275e:	50 93 99 00 	sts	0x0099, r21
data = receiveByte(); transmitByte(data);
    2762:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <receiveByte>
    2766:	e8 2e       	mov	r14, r24
    2768:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
startBlock += (data & 0x0f);
    276c:	20 91 96 00 	lds	r18, 0x0096
    2770:	30 91 97 00 	lds	r19, 0x0097
    2774:	40 91 98 00 	lds	r20, 0x0098
    2778:	50 91 99 00 	lds	r21, 0x0099
    277c:	8e 2d       	mov	r24, r14
    277e:	8f 70       	andi	r24, 0x0F	; 15
    2780:	28 0f       	add	r18, r24
    2782:	31 1d       	adc	r19, r1
    2784:	41 1d       	adc	r20, r1
    2786:	51 1d       	adc	r21, r1
    2788:	20 93 96 00 	sts	0x0096, r18
    278c:	30 93 97 00 	sts	0x0097, r19
    2790:	40 93 98 00 	sts	0x0098, r20
    2794:	50 93 99 00 	sts	0x0099, r21
TX_NEWLINE;
    2798:	8d e0       	ldi	r24, 0x0D	; 13
    279a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    279e:	8a e0       	ldi	r24, 0x0A	; 10
    27a0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    27a4:	e8 ce       	rjmp	.-560    	; 0x2576 <main+0x27e>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    27a6:	89 33       	cpi	r24, 0x39	; 57
    27a8:	09 f0       	breq	.+2      	; 0x27ac <main+0x4b4>
    27aa:	46 ce       	rjmp	.-884    	; 0x2438 <main+0x140>
		  	 writeFile(fileName);
 		  if(option == '8')
		     deleteFile(fileName);
          break;

case '9': memoryStatistics();
    27ac:	0e 94 31 06 	call	0xc62	; 0xc62 <memoryStatistics>
          break;
    27b0:	59 ce       	rjmp	.-846    	; 0x2464 <main+0x16c>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
{
  if(!FAT32_active) 
  {
    TX_NEWLINE;
    27b2:	8d e0       	ldi	r24, 0x0D	; 13
    27b4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    27b8:	8a e0       	ldi	r24, 0x0A	; 10
    27ba:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    TX_NEWLINE;
    27be:	8d e0       	ldi	r24, 0x0D	; 13
    27c0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    27c4:	8a e0       	ldi	r24, 0x0A	; 10
    27c6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
	transmitString_F(PSTR("FAT32 options disabled!"));
    27ca:	8f e8       	ldi	r24, 0x8F	; 143
    27cc:	92 e0       	ldi	r25, 0x02	; 2
    27ce:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
	continue;
    27d2:	4e ce       	rjmp	.-868    	; 0x2470 <main+0x178>
          else
            transmitString_F(PSTR("Read successful!"));
          break;
#endif

case '5': TX_NEWLINE;
    27d4:	8d e0       	ldi	r24, 0x0D	; 13
    27d6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    27da:	8a e0       	ldi	r24, 0x0A	; 10
    27dc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
  		  findFiles(GET_LIST,0);
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	0e 94 ca 07 	call	0xf94	; 0xf94 <findFiles>
          break;
    27ea:	3c ce       	rjmp	.-904    	; 0x2464 <main+0x16c>
#endif

switch (option)
{
case '0': //error = SD_erase (block, totalBlocks);
          error = SD_erase (startBlock, totalBlocks);
    27ec:	60 91 96 00 	lds	r22, 0x0096
    27f0:	70 91 97 00 	lds	r23, 0x0097
    27f4:	80 91 98 00 	lds	r24, 0x0098
    27f8:	90 91 99 00 	lds	r25, 0x0099
    27fc:	20 91 a1 02 	lds	r18, 0x02A1
    2800:	30 91 a2 02 	lds	r19, 0x02A2
    2804:	40 91 a3 02 	lds	r20, 0x02A3
    2808:	50 91 a4 02 	lds	r21, 0x02A4
    280c:	0e 94 12 10 	call	0x2024	; 0x2024 <SD_erase>
    2810:	e8 2e       	mov	r14, r24
          TX_NEWLINE;
    2812:	8d e0       	ldi	r24, 0x0D	; 13
    2814:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2818:	8a e0       	ldi	r24, 0x0A	; 10
    281a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
          if(error)
    281e:	ee 20       	and	r14, r14
    2820:	09 f4       	brne	.+2      	; 0x2824 <main+0x52c>
    2822:	90 c0       	rjmp	.+288    	; 0x2944 <main+0x64c>
              transmitString_F(PSTR("Erase failed.."));
    2824:	8c e5       	ldi	r24, 0x5C	; 92
    2826:	92 e0       	ldi	r25, 0x02	; 2
    2828:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    282c:	1b ce       	rjmp	.-970    	; 0x2464 <main+0x16c>
                transmitString_F(PSTR("Write failed.."));
            else
                transmitString_F(PSTR("Write successful!"));
            break;

case '2': error = SD_readSingleBlock (startBlock);
    282e:	60 91 96 00 	lds	r22, 0x0096
    2832:	70 91 97 00 	lds	r23, 0x0097
    2836:	80 91 98 00 	lds	r24, 0x0098
    283a:	90 91 99 00 	lds	r25, 0x0099
    283e:	0e 94 45 10 	call	0x208a	; 0x208a <SD_readSingleBlock>
    2842:	e8 2e       	mov	r14, r24
          TX_NEWLINE;
    2844:	8d e0       	ldi	r24, 0x0D	; 13
    2846:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    284a:	8a e0       	ldi	r24, 0x0A	; 10
    284c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
          if(error)
    2850:	ee 20       	and	r14, r14
    2852:	09 f0       	breq	.+2      	; 0x2856 <main+0x55e>
    2854:	81 c0       	rjmp	.+258    	; 0x2958 <main+0x660>
    2856:	ee 24       	eor	r14, r14
    2858:	ff 24       	eor	r15, r15
    285a:	0b c0       	rjmp	.+22     	; 0x2872 <main+0x57a>
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
                transmitByte(buffer[i]);
    285c:	80 81       	ld	r24, Z
    285e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
    2862:	08 94       	sec
    2864:	e1 1c       	adc	r14, r1
    2866:	f1 1c       	adc	r15, r1
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	e8 16       	cp	r14, r24
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	f8 06       	cpc	r15, r24
    2870:	31 f0       	breq	.+12     	; 0x287e <main+0x586>
            {
                if(buffer[i] == '~') break;
    2872:	f7 01       	movw	r30, r14
    2874:	e6 56       	subi	r30, 0x66	; 102
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	8e 37       	cpi	r24, 0x7E	; 126
    287c:	79 f7       	brne	.-34     	; 0x285c <main+0x564>
                transmitByte(buffer[i]);
            }
            TX_NEWLINE;
    287e:	8d e0       	ldi	r24, 0x0D	; 13
    2880:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2884:	8a e0       	ldi	r24, 0x0A	; 10
    2886:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
            TX_NEWLINE;
    288a:	8d e0       	ldi	r24, 0x0D	; 13
    288c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2890:	8a e0       	ldi	r24, 0x0A	; 10
    2892:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
            transmitString_F(PSTR("Read successful!"));
    2896:	8a ef       	ldi	r24, 0xFA	; 250
    2898:	91 e0       	ldi	r25, 0x01	; 1
    289a:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    289e:	e2 cd       	rjmp	.-1084   	; 0x2464 <main+0x16c>
              transmitString_F(PSTR("Erase failed.."));
          else
              transmitString_F(PSTR("Erased!"));
          break;

case '1': TX_NEWLINE;
    28a0:	8d e0       	ldi	r24, 0x0D	; 13
    28a2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    28a6:	8a e0       	ldi	r24, 0x0A	; 10
    28a8:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
          transmitString_F(PSTR(" Enter text (End with ~):"));
    28ac:	8a e3       	ldi	r24, 0x3A	; 58
    28ae:	92 e0       	ldi	r25, 0x02	; 2
    28b0:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
          i=0;
    28b4:	ee 24       	eor	r14, r14
    28b6:	ff 24       	eor	r15, r15
    28b8:	08 c0       	rjmp	.+16     	; 0x28ca <main+0x5d2>
                if(data == 0x0d)
                {
                    transmitByte(0x0a);
                    buffer[i++] = 0x0a;
                }
                if(i == 512) break;
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	e8 16       	cp	r14, r24
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	f8 06       	cpc	r15, r24
    28c2:	11 f1       	breq	.+68     	; 0x2908 <main+0x610>
            }while (data != '~');
    28c4:	8d 2d       	mov	r24, r13
    28c6:	8e 37       	cpi	r24, 0x7E	; 126
    28c8:	f9 f0       	breq	.+62     	; 0x2908 <main+0x610>
case '1': TX_NEWLINE;
          transmitString_F(PSTR(" Enter text (End with ~):"));
          i=0;
            do
            {
                data = receiveByte();
    28ca:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <receiveByte>
    28ce:	d8 2e       	mov	r13, r24
                transmitByte(data);
    28d0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
                buffer[i++] = data;
    28d4:	f7 01       	movw	r30, r14
    28d6:	e6 56       	subi	r30, 0x66	; 102
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	d0 82       	st	Z, r13
    28dc:	08 94       	sec
    28de:	e1 1c       	adc	r14, r1
    28e0:	f1 1c       	adc	r15, r1
                if(data == 0x0d)
    28e2:	8d 2d       	mov	r24, r13
    28e4:	8d 30       	cpi	r24, 0x0D	; 13
    28e6:	49 f7       	brne	.-46     	; 0x28ba <main+0x5c2>
                {
                    transmitByte(0x0a);
    28e8:	8a e0       	ldi	r24, 0x0A	; 10
    28ea:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
                    buffer[i++] = 0x0a;
    28ee:	f7 01       	movw	r30, r14
    28f0:	e6 56       	subi	r30, 0x66	; 102
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	8a e0       	ldi	r24, 0x0A	; 10
    28f6:	80 83       	st	Z, r24
    28f8:	08 94       	sec
    28fa:	e1 1c       	adc	r14, r1
    28fc:	f1 1c       	adc	r15, r1
                }
                if(i == 512) break;
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	e8 16       	cp	r14, r24
    2902:	82 e0       	ldi	r24, 0x02	; 2
    2904:	f8 06       	cpc	r15, r24
    2906:	f1 f6       	brne	.-68     	; 0x28c4 <main+0x5cc>
            }while (data != '~');

            error = SD_writeSingleBlock (startBlock);
    2908:	60 91 96 00 	lds	r22, 0x0096
    290c:	70 91 97 00 	lds	r23, 0x0097
    2910:	80 91 98 00 	lds	r24, 0x0098
    2914:	90 91 99 00 	lds	r25, 0x0099
    2918:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <SD_writeSingleBlock>
    291c:	e8 2e       	mov	r14, r24
            TX_NEWLINE;
    291e:	8d e0       	ldi	r24, 0x0D	; 13
    2920:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2924:	8a e0       	ldi	r24, 0x0A	; 10
    2926:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
            TX_NEWLINE;
    292a:	8d e0       	ldi	r24, 0x0D	; 13
    292c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2930:	8a e0       	ldi	r24, 0x0A	; 10
    2932:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
            if(error)
    2936:	ee 20       	and	r14, r14
    2938:	51 f0       	breq	.+20     	; 0x294e <main+0x656>
                transmitString_F(PSTR("Write failed.."));
    293a:	8b e2       	ldi	r24, 0x2B	; 43
    293c:	92 e0       	ldi	r25, 0x02	; 2
    293e:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    2942:	90 cd       	rjmp	.-1248   	; 0x2464 <main+0x16c>
          error = SD_erase (startBlock, totalBlocks);
          TX_NEWLINE;
          if(error)
              transmitString_F(PSTR("Erase failed.."));
          else
              transmitString_F(PSTR("Erased!"));
    2944:	84 e5       	ldi	r24, 0x54	; 84
    2946:	92 e0       	ldi	r25, 0x02	; 2
    2948:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    294c:	8b cd       	rjmp	.-1258   	; 0x2464 <main+0x16c>
            TX_NEWLINE;
            TX_NEWLINE;
            if(error)
                transmitString_F(PSTR("Write failed.."));
            else
                transmitString_F(PSTR("Write successful!"));
    294e:	89 e1       	ldi	r24, 0x19	; 25
    2950:	92 e0       	ldi	r25, 0x02	; 2
    2952:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    2956:	86 cd       	rjmp	.-1268   	; 0x2464 <main+0x16c>
            break;

case '2': error = SD_readSingleBlock (startBlock);
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
    2958:	8b e0       	ldi	r24, 0x0B	; 11
    295a:	92 e0       	ldi	r25, 0x02	; 2
    295c:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
    2960:	81 cd       	rjmp	.-1278   	; 0x2464 <main+0x16c>
       
	      TX_NEWLINE;
		  if(option == '6')
		     readFile( READ, fileName);
		  if(option == '7')
		  	 writeFile(fileName);
    2962:	c3 01       	movw	r24, r6
    2964:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <writeFile>
    2968:	7d cd       	rjmp	.-1286   	; 0x2464 <main+0x16c>
          }
          if(i>12) break;
       
	      TX_NEWLINE;
		  if(option == '6')
		     readFile( READ, fileName);
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	b3 01       	movw	r22, r6
    296e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <readFile>
    2972:	78 cd       	rjmp	.-1296   	; 0x2464 <main+0x16c>
  while(1);  //wait here forever if error in SD init 
}

switch (cardType)
{
  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    2974:	89 ef       	ldi	r24, 0xF9	; 249
    2976:	93 e0       	ldi	r25, 0x03	; 3
    2978:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
  		 break;
    297c:	35 cd       	rjmp	.-1430   	; 0x23e8 <main+0xf0>
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
  		 break;
  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    297e:	81 eb       	ldi	r24, 0xB1	; 177
    2980:	93 e0       	ldi	r25, 0x03	; 3
    2982:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
  		 break;
    2986:	30 cd       	rjmp	.-1440   	; 0x23e8 <main+0xf0>

switch (cardType)
{
  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
  		 break;
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    2988:	8c ed       	ldi	r24, 0xDC	; 220
    298a:	93 e0       	ldi	r25, 0x03	; 3
    298c:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
  		 break;
    2990:	2b cd       	rjmp	.-1450   	; 0x23e8 <main+0xf0>

FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
if(error) 	
{
  TX_NEWLINE;
    2992:	8d e0       	ldi	r24, 0x0D	; 13
    2994:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
    2998:	8a e0       	ldi	r24, 0x0A	; 10
    299a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <transmitByte>
  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    299e:	86 e8       	ldi	r24, 0x86	; 134
    29a0:	93 e0       	ldi	r25, 0x03	; 3
    29a2:	0e 94 43 11 	call	0x2286	; 0x2286 <transmitString_F>
  FAT32_active = 0;
    29a6:	cc 24       	eor	r12, r12
    29a8:	3e 01       	movw	r6, r28
    29aa:	08 94       	sec
    29ac:	61 1c       	adc	r6, r1
    29ae:	71 1c       	adc	r7, r1
    29b0:	8e 01       	movw	r16, r28
    29b2:	02 5f       	subi	r16, 0xF2	; 242
    29b4:	1f 4f       	sbci	r17, 0xFF	; 255
    29b6:	2d cd       	rjmp	.-1446   	; 0x2412 <main+0x11a>

000029b8 <__mulsi3>:
    29b8:	62 9f       	mul	r22, r18
    29ba:	d0 01       	movw	r26, r0
    29bc:	73 9f       	mul	r23, r19
    29be:	f0 01       	movw	r30, r0
    29c0:	82 9f       	mul	r24, r18
    29c2:	e0 0d       	add	r30, r0
    29c4:	f1 1d       	adc	r31, r1
    29c6:	64 9f       	mul	r22, r20
    29c8:	e0 0d       	add	r30, r0
    29ca:	f1 1d       	adc	r31, r1
    29cc:	92 9f       	mul	r25, r18
    29ce:	f0 0d       	add	r31, r0
    29d0:	83 9f       	mul	r24, r19
    29d2:	f0 0d       	add	r31, r0
    29d4:	74 9f       	mul	r23, r20
    29d6:	f0 0d       	add	r31, r0
    29d8:	65 9f       	mul	r22, r21
    29da:	f0 0d       	add	r31, r0
    29dc:	99 27       	eor	r25, r25
    29de:	72 9f       	mul	r23, r18
    29e0:	b0 0d       	add	r27, r0
    29e2:	e1 1d       	adc	r30, r1
    29e4:	f9 1f       	adc	r31, r25
    29e6:	63 9f       	mul	r22, r19
    29e8:	b0 0d       	add	r27, r0
    29ea:	e1 1d       	adc	r30, r1
    29ec:	f9 1f       	adc	r31, r25
    29ee:	bd 01       	movw	r22, r26
    29f0:	cf 01       	movw	r24, r30
    29f2:	11 24       	eor	r1, r1
    29f4:	08 95       	ret

000029f6 <__udivmodsi4>:
    29f6:	a1 e2       	ldi	r26, 0x21	; 33
    29f8:	1a 2e       	mov	r1, r26
    29fa:	aa 1b       	sub	r26, r26
    29fc:	bb 1b       	sub	r27, r27
    29fe:	fd 01       	movw	r30, r26
    2a00:	0d c0       	rjmp	.+26     	; 0x2a1c <__udivmodsi4_ep>

00002a02 <__udivmodsi4_loop>:
    2a02:	aa 1f       	adc	r26, r26
    2a04:	bb 1f       	adc	r27, r27
    2a06:	ee 1f       	adc	r30, r30
    2a08:	ff 1f       	adc	r31, r31
    2a0a:	a2 17       	cp	r26, r18
    2a0c:	b3 07       	cpc	r27, r19
    2a0e:	e4 07       	cpc	r30, r20
    2a10:	f5 07       	cpc	r31, r21
    2a12:	20 f0       	brcs	.+8      	; 0x2a1c <__udivmodsi4_ep>
    2a14:	a2 1b       	sub	r26, r18
    2a16:	b3 0b       	sbc	r27, r19
    2a18:	e4 0b       	sbc	r30, r20
    2a1a:	f5 0b       	sbc	r31, r21

00002a1c <__udivmodsi4_ep>:
    2a1c:	66 1f       	adc	r22, r22
    2a1e:	77 1f       	adc	r23, r23
    2a20:	88 1f       	adc	r24, r24
    2a22:	99 1f       	adc	r25, r25
    2a24:	1a 94       	dec	r1
    2a26:	69 f7       	brne	.-38     	; 0x2a02 <__udivmodsi4_loop>
    2a28:	60 95       	com	r22
    2a2a:	70 95       	com	r23
    2a2c:	80 95       	com	r24
    2a2e:	90 95       	com	r25
    2a30:	9b 01       	movw	r18, r22
    2a32:	ac 01       	movw	r20, r24
    2a34:	bd 01       	movw	r22, r26
    2a36:	cf 01       	movw	r24, r30
    2a38:	08 95       	ret

00002a3a <_exit>:
    2a3a:	f8 94       	cli

00002a3c <__stop_program>:
    2a3c:	ff cf       	rjmp	.-2      	; 0x2a3c <__stop_program>
